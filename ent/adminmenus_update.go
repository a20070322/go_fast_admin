// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/go_fast_admin/ent/adminmenus"
	"github.com/a20070322/go_fast_admin/ent/adminrole"
	"github.com/a20070322/go_fast_admin/ent/predicate"
)

// AdminMenusUpdate is the builder for updating AdminMenus entities.
type AdminMenusUpdate struct {
	config
	hooks    []Hook
	mutation *AdminMenusMutation
}

// Where adds a new predicate for the AdminMenusUpdate builder.
func (amu *AdminMenusUpdate) Where(ps ...predicate.AdminMenus) *AdminMenusUpdate {
	amu.mutation.predicates = append(amu.mutation.predicates, ps...)
	return amu
}

// SetUpdatedAt sets the "updated_at" field.
func (amu *AdminMenusUpdate) SetUpdatedAt(t time.Time) *AdminMenusUpdate {
	amu.mutation.SetUpdatedAt(t)
	return amu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (amu *AdminMenusUpdate) ClearUpdatedAt() *AdminMenusUpdate {
	amu.mutation.ClearUpdatedAt()
	return amu
}

// SetDeletedAt sets the "deleted_at" field.
func (amu *AdminMenusUpdate) SetDeletedAt(t time.Time) *AdminMenusUpdate {
	amu.mutation.SetDeletedAt(t)
	return amu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (amu *AdminMenusUpdate) SetNillableDeletedAt(t *time.Time) *AdminMenusUpdate {
	if t != nil {
		amu.SetDeletedAt(*t)
	}
	return amu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (amu *AdminMenusUpdate) ClearDeletedAt() *AdminMenusUpdate {
	amu.mutation.ClearDeletedAt()
	return amu
}

// SetName sets the "name" field.
func (amu *AdminMenusUpdate) SetName(s string) *AdminMenusUpdate {
	amu.mutation.SetName(s)
	return amu
}

// SetPath sets the "path" field.
func (amu *AdminMenusUpdate) SetPath(s string) *AdminMenusUpdate {
	amu.mutation.SetPath(s)
	return amu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (amu *AdminMenusUpdate) SetNillablePath(s *string) *AdminMenusUpdate {
	if s != nil {
		amu.SetPath(*s)
	}
	return amu
}

// ClearPath clears the value of the "path" field.
func (amu *AdminMenusUpdate) ClearPath() *AdminMenusUpdate {
	amu.mutation.ClearPath()
	return amu
}

// SetPathAction sets the "path_action" field.
func (amu *AdminMenusUpdate) SetPathAction(s string) *AdminMenusUpdate {
	amu.mutation.SetPathAction(s)
	return amu
}

// SetNillablePathAction sets the "path_action" field if the given value is not nil.
func (amu *AdminMenusUpdate) SetNillablePathAction(s *string) *AdminMenusUpdate {
	if s != nil {
		amu.SetPathAction(*s)
	}
	return amu
}

// ClearPathAction clears the value of the "path_action" field.
func (amu *AdminMenusUpdate) ClearPathAction() *AdminMenusUpdate {
	amu.mutation.ClearPathAction()
	return amu
}

// SetRouterPath sets the "router_path" field.
func (amu *AdminMenusUpdate) SetRouterPath(s string) *AdminMenusUpdate {
	amu.mutation.SetRouterPath(s)
	return amu
}

// SetNillableRouterPath sets the "router_path" field if the given value is not nil.
func (amu *AdminMenusUpdate) SetNillableRouterPath(s *string) *AdminMenusUpdate {
	if s != nil {
		amu.SetRouterPath(*s)
	}
	return amu
}

// ClearRouterPath clears the value of the "router_path" field.
func (amu *AdminMenusUpdate) ClearRouterPath() *AdminMenusUpdate {
	amu.mutation.ClearRouterPath()
	return amu
}

// SetIcon sets the "icon" field.
func (amu *AdminMenusUpdate) SetIcon(s string) *AdminMenusUpdate {
	amu.mutation.SetIcon(s)
	return amu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (amu *AdminMenusUpdate) SetNillableIcon(s *string) *AdminMenusUpdate {
	if s != nil {
		amu.SetIcon(*s)
	}
	return amu
}

// ClearIcon clears the value of the "icon" field.
func (amu *AdminMenusUpdate) ClearIcon() *AdminMenusUpdate {
	amu.mutation.ClearIcon()
	return amu
}

// SetType sets the "type" field.
func (amu *AdminMenusUpdate) SetType(i int8) *AdminMenusUpdate {
	amu.mutation.ResetType()
	amu.mutation.SetType(i)
	return amu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (amu *AdminMenusUpdate) SetNillableType(i *int8) *AdminMenusUpdate {
	if i != nil {
		amu.SetType(*i)
	}
	return amu
}

// AddType adds i to the "type" field.
func (amu *AdminMenusUpdate) AddType(i int8) *AdminMenusUpdate {
	amu.mutation.AddType(i)
	return amu
}

// ClearType clears the value of the "type" field.
func (amu *AdminMenusUpdate) ClearType() *AdminMenusUpdate {
	amu.mutation.ClearType()
	return amu
}

// SetPowerStr sets the "power_str" field.
func (amu *AdminMenusUpdate) SetPowerStr(s string) *AdminMenusUpdate {
	amu.mutation.SetPowerStr(s)
	return amu
}

// SetNillablePowerStr sets the "power_str" field if the given value is not nil.
func (amu *AdminMenusUpdate) SetNillablePowerStr(s *string) *AdminMenusUpdate {
	if s != nil {
		amu.SetPowerStr(*s)
	}
	return amu
}

// ClearPowerStr clears the value of the "power_str" field.
func (amu *AdminMenusUpdate) ClearPowerStr() *AdminMenusUpdate {
	amu.mutation.ClearPowerStr()
	return amu
}

// SetSort sets the "sort" field.
func (amu *AdminMenusUpdate) SetSort(i int) *AdminMenusUpdate {
	amu.mutation.ResetSort()
	amu.mutation.SetSort(i)
	return amu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (amu *AdminMenusUpdate) SetNillableSort(i *int) *AdminMenusUpdate {
	if i != nil {
		amu.SetSort(*i)
	}
	return amu
}

// AddSort adds i to the "sort" field.
func (amu *AdminMenusUpdate) AddSort(i int) *AdminMenusUpdate {
	amu.mutation.AddSort(i)
	return amu
}

// ClearSort clears the value of the "sort" field.
func (amu *AdminMenusUpdate) ClearSort() *AdminMenusUpdate {
	amu.mutation.ClearSort()
	return amu
}

// SetFid sets the "fid" field.
func (amu *AdminMenusUpdate) SetFid(i int) *AdminMenusUpdate {
	amu.mutation.ResetFid()
	amu.mutation.SetFid(i)
	return amu
}

// SetNillableFid sets the "fid" field if the given value is not nil.
func (amu *AdminMenusUpdate) SetNillableFid(i *int) *AdminMenusUpdate {
	if i != nil {
		amu.SetFid(*i)
	}
	return amu
}

// AddFid adds i to the "fid" field.
func (amu *AdminMenusUpdate) AddFid(i int) *AdminMenusUpdate {
	amu.mutation.AddFid(i)
	return amu
}

// ClearFid clears the value of the "fid" field.
func (amu *AdminMenusUpdate) ClearFid() *AdminMenusUpdate {
	amu.mutation.ClearFid()
	return amu
}

// SetIsExternalLink sets the "is_external_link" field.
func (amu *AdminMenusUpdate) SetIsExternalLink(b bool) *AdminMenusUpdate {
	amu.mutation.SetIsExternalLink(b)
	return amu
}

// SetNillableIsExternalLink sets the "is_external_link" field if the given value is not nil.
func (amu *AdminMenusUpdate) SetNillableIsExternalLink(b *bool) *AdminMenusUpdate {
	if b != nil {
		amu.SetIsExternalLink(*b)
	}
	return amu
}

// ClearIsExternalLink clears the value of the "is_external_link" field.
func (amu *AdminMenusUpdate) ClearIsExternalLink() *AdminMenusUpdate {
	amu.mutation.ClearIsExternalLink()
	return amu
}

// SetIsShow sets the "is_show" field.
func (amu *AdminMenusUpdate) SetIsShow(b bool) *AdminMenusUpdate {
	amu.mutation.SetIsShow(b)
	return amu
}

// SetNillableIsShow sets the "is_show" field if the given value is not nil.
func (amu *AdminMenusUpdate) SetNillableIsShow(b *bool) *AdminMenusUpdate {
	if b != nil {
		amu.SetIsShow(*b)
	}
	return amu
}

// ClearIsShow clears the value of the "is_show" field.
func (amu *AdminMenusUpdate) ClearIsShow() *AdminMenusUpdate {
	amu.mutation.ClearIsShow()
	return amu
}

// SetIsEnable sets the "is_enable" field.
func (amu *AdminMenusUpdate) SetIsEnable(b bool) *AdminMenusUpdate {
	amu.mutation.SetIsEnable(b)
	return amu
}

// SetNillableIsEnable sets the "is_enable" field if the given value is not nil.
func (amu *AdminMenusUpdate) SetNillableIsEnable(b *bool) *AdminMenusUpdate {
	if b != nil {
		amu.SetIsEnable(*b)
	}
	return amu
}

// ClearIsEnable clears the value of the "is_enable" field.
func (amu *AdminMenusUpdate) ClearIsEnable() *AdminMenusUpdate {
	amu.mutation.ClearIsEnable()
	return amu
}

// AddRoleIDs adds the "role" edge to the AdminRole entity by IDs.
func (amu *AdminMenusUpdate) AddRoleIDs(ids ...int) *AdminMenusUpdate {
	amu.mutation.AddRoleIDs(ids...)
	return amu
}

// AddRole adds the "role" edges to the AdminRole entity.
func (amu *AdminMenusUpdate) AddRole(a ...*AdminRole) *AdminMenusUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amu.AddRoleIDs(ids...)
}

// Mutation returns the AdminMenusMutation object of the builder.
func (amu *AdminMenusUpdate) Mutation() *AdminMenusMutation {
	return amu.mutation
}

// ClearRole clears all "role" edges to the AdminRole entity.
func (amu *AdminMenusUpdate) ClearRole() *AdminMenusUpdate {
	amu.mutation.ClearRole()
	return amu
}

// RemoveRoleIDs removes the "role" edge to AdminRole entities by IDs.
func (amu *AdminMenusUpdate) RemoveRoleIDs(ids ...int) *AdminMenusUpdate {
	amu.mutation.RemoveRoleIDs(ids...)
	return amu
}

// RemoveRole removes "role" edges to AdminRole entities.
func (amu *AdminMenusUpdate) RemoveRole(a ...*AdminRole) *AdminMenusUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amu.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amu *AdminMenusUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	amu.defaults()
	if len(amu.hooks) == 0 {
		if err = amu.check(); err != nil {
			return 0, err
		}
		affected, err = amu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminMenusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = amu.check(); err != nil {
				return 0, err
			}
			amu.mutation = mutation
			affected, err = amu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amu.hooks) - 1; i >= 0; i-- {
			mut = amu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amu *AdminMenusUpdate) SaveX(ctx context.Context) int {
	affected, err := amu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amu *AdminMenusUpdate) Exec(ctx context.Context) error {
	_, err := amu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amu *AdminMenusUpdate) ExecX(ctx context.Context) {
	if err := amu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amu *AdminMenusUpdate) defaults() {
	if _, ok := amu.mutation.UpdatedAt(); !ok && !amu.mutation.UpdatedAtCleared() {
		v := adminmenus.UpdateDefaultUpdatedAt()
		amu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amu *AdminMenusUpdate) check() error {
	if v, ok := amu.mutation.Sort(); ok {
		if err := adminmenus.SortValidator(v); err != nil {
			return &ValidationError{Name: "sort", err: fmt.Errorf("ent: validator failed for field \"sort\": %w", err)}
		}
	}
	return nil
}

func (amu *AdminMenusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminmenus.Table,
			Columns: adminmenus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminmenus.FieldID,
			},
		},
	}
	if ps := amu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminmenus.FieldUpdatedAt,
		})
	}
	if amu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminmenus.FieldUpdatedAt,
		})
	}
	if value, ok := amu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminmenus.FieldDeletedAt,
		})
	}
	if amu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminmenus.FieldDeletedAt,
		})
	}
	if value, ok := amu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldName,
		})
	}
	if value, ok := amu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldPath,
		})
	}
	if amu.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adminmenus.FieldPath,
		})
	}
	if value, ok := amu.mutation.PathAction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldPathAction,
		})
	}
	if amu.mutation.PathActionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adminmenus.FieldPathAction,
		})
	}
	if value, ok := amu.mutation.RouterPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldRouterPath,
		})
	}
	if amu.mutation.RouterPathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adminmenus.FieldRouterPath,
		})
	}
	if value, ok := amu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldIcon,
		})
	}
	if amu.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adminmenus.FieldIcon,
		})
	}
	if value, ok := amu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: adminmenus.FieldType,
		})
	}
	if value, ok := amu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: adminmenus.FieldType,
		})
	}
	if amu.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: adminmenus.FieldType,
		})
	}
	if value, ok := amu.mutation.PowerStr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldPowerStr,
		})
	}
	if amu.mutation.PowerStrCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adminmenus.FieldPowerStr,
		})
	}
	if value, ok := amu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: adminmenus.FieldSort,
		})
	}
	if value, ok := amu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: adminmenus.FieldSort,
		})
	}
	if amu.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: adminmenus.FieldSort,
		})
	}
	if value, ok := amu.mutation.Fid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: adminmenus.FieldFid,
		})
	}
	if value, ok := amu.mutation.AddedFid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: adminmenus.FieldFid,
		})
	}
	if amu.mutation.FidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: adminmenus.FieldFid,
		})
	}
	if value, ok := amu.mutation.IsExternalLink(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: adminmenus.FieldIsExternalLink,
		})
	}
	if amu.mutation.IsExternalLinkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: adminmenus.FieldIsExternalLink,
		})
	}
	if value, ok := amu.mutation.IsShow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: adminmenus.FieldIsShow,
		})
	}
	if amu.mutation.IsShowCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: adminmenus.FieldIsShow,
		})
	}
	if value, ok := amu.mutation.IsEnable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: adminmenus.FieldIsEnable,
		})
	}
	if amu.mutation.IsEnableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: adminmenus.FieldIsEnable,
		})
	}
	if amu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   adminmenus.RoleTable,
			Columns: adminmenus.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.RemovedRoleIDs(); len(nodes) > 0 && !amu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   adminmenus.RoleTable,
			Columns: adminmenus.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   adminmenus.RoleTable,
			Columns: adminmenus.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminmenus.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AdminMenusUpdateOne is the builder for updating a single AdminMenus entity.
type AdminMenusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminMenusMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (amuo *AdminMenusUpdateOne) SetUpdatedAt(t time.Time) *AdminMenusUpdateOne {
	amuo.mutation.SetUpdatedAt(t)
	return amuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (amuo *AdminMenusUpdateOne) ClearUpdatedAt() *AdminMenusUpdateOne {
	amuo.mutation.ClearUpdatedAt()
	return amuo
}

// SetDeletedAt sets the "deleted_at" field.
func (amuo *AdminMenusUpdateOne) SetDeletedAt(t time.Time) *AdminMenusUpdateOne {
	amuo.mutation.SetDeletedAt(t)
	return amuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (amuo *AdminMenusUpdateOne) SetNillableDeletedAt(t *time.Time) *AdminMenusUpdateOne {
	if t != nil {
		amuo.SetDeletedAt(*t)
	}
	return amuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (amuo *AdminMenusUpdateOne) ClearDeletedAt() *AdminMenusUpdateOne {
	amuo.mutation.ClearDeletedAt()
	return amuo
}

// SetName sets the "name" field.
func (amuo *AdminMenusUpdateOne) SetName(s string) *AdminMenusUpdateOne {
	amuo.mutation.SetName(s)
	return amuo
}

// SetPath sets the "path" field.
func (amuo *AdminMenusUpdateOne) SetPath(s string) *AdminMenusUpdateOne {
	amuo.mutation.SetPath(s)
	return amuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (amuo *AdminMenusUpdateOne) SetNillablePath(s *string) *AdminMenusUpdateOne {
	if s != nil {
		amuo.SetPath(*s)
	}
	return amuo
}

// ClearPath clears the value of the "path" field.
func (amuo *AdminMenusUpdateOne) ClearPath() *AdminMenusUpdateOne {
	amuo.mutation.ClearPath()
	return amuo
}

// SetPathAction sets the "path_action" field.
func (amuo *AdminMenusUpdateOne) SetPathAction(s string) *AdminMenusUpdateOne {
	amuo.mutation.SetPathAction(s)
	return amuo
}

// SetNillablePathAction sets the "path_action" field if the given value is not nil.
func (amuo *AdminMenusUpdateOne) SetNillablePathAction(s *string) *AdminMenusUpdateOne {
	if s != nil {
		amuo.SetPathAction(*s)
	}
	return amuo
}

// ClearPathAction clears the value of the "path_action" field.
func (amuo *AdminMenusUpdateOne) ClearPathAction() *AdminMenusUpdateOne {
	amuo.mutation.ClearPathAction()
	return amuo
}

// SetRouterPath sets the "router_path" field.
func (amuo *AdminMenusUpdateOne) SetRouterPath(s string) *AdminMenusUpdateOne {
	amuo.mutation.SetRouterPath(s)
	return amuo
}

// SetNillableRouterPath sets the "router_path" field if the given value is not nil.
func (amuo *AdminMenusUpdateOne) SetNillableRouterPath(s *string) *AdminMenusUpdateOne {
	if s != nil {
		amuo.SetRouterPath(*s)
	}
	return amuo
}

// ClearRouterPath clears the value of the "router_path" field.
func (amuo *AdminMenusUpdateOne) ClearRouterPath() *AdminMenusUpdateOne {
	amuo.mutation.ClearRouterPath()
	return amuo
}

// SetIcon sets the "icon" field.
func (amuo *AdminMenusUpdateOne) SetIcon(s string) *AdminMenusUpdateOne {
	amuo.mutation.SetIcon(s)
	return amuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (amuo *AdminMenusUpdateOne) SetNillableIcon(s *string) *AdminMenusUpdateOne {
	if s != nil {
		amuo.SetIcon(*s)
	}
	return amuo
}

// ClearIcon clears the value of the "icon" field.
func (amuo *AdminMenusUpdateOne) ClearIcon() *AdminMenusUpdateOne {
	amuo.mutation.ClearIcon()
	return amuo
}

// SetType sets the "type" field.
func (amuo *AdminMenusUpdateOne) SetType(i int8) *AdminMenusUpdateOne {
	amuo.mutation.ResetType()
	amuo.mutation.SetType(i)
	return amuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (amuo *AdminMenusUpdateOne) SetNillableType(i *int8) *AdminMenusUpdateOne {
	if i != nil {
		amuo.SetType(*i)
	}
	return amuo
}

// AddType adds i to the "type" field.
func (amuo *AdminMenusUpdateOne) AddType(i int8) *AdminMenusUpdateOne {
	amuo.mutation.AddType(i)
	return amuo
}

// ClearType clears the value of the "type" field.
func (amuo *AdminMenusUpdateOne) ClearType() *AdminMenusUpdateOne {
	amuo.mutation.ClearType()
	return amuo
}

// SetPowerStr sets the "power_str" field.
func (amuo *AdminMenusUpdateOne) SetPowerStr(s string) *AdminMenusUpdateOne {
	amuo.mutation.SetPowerStr(s)
	return amuo
}

// SetNillablePowerStr sets the "power_str" field if the given value is not nil.
func (amuo *AdminMenusUpdateOne) SetNillablePowerStr(s *string) *AdminMenusUpdateOne {
	if s != nil {
		amuo.SetPowerStr(*s)
	}
	return amuo
}

// ClearPowerStr clears the value of the "power_str" field.
func (amuo *AdminMenusUpdateOne) ClearPowerStr() *AdminMenusUpdateOne {
	amuo.mutation.ClearPowerStr()
	return amuo
}

// SetSort sets the "sort" field.
func (amuo *AdminMenusUpdateOne) SetSort(i int) *AdminMenusUpdateOne {
	amuo.mutation.ResetSort()
	amuo.mutation.SetSort(i)
	return amuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (amuo *AdminMenusUpdateOne) SetNillableSort(i *int) *AdminMenusUpdateOne {
	if i != nil {
		amuo.SetSort(*i)
	}
	return amuo
}

// AddSort adds i to the "sort" field.
func (amuo *AdminMenusUpdateOne) AddSort(i int) *AdminMenusUpdateOne {
	amuo.mutation.AddSort(i)
	return amuo
}

// ClearSort clears the value of the "sort" field.
func (amuo *AdminMenusUpdateOne) ClearSort() *AdminMenusUpdateOne {
	amuo.mutation.ClearSort()
	return amuo
}

// SetFid sets the "fid" field.
func (amuo *AdminMenusUpdateOne) SetFid(i int) *AdminMenusUpdateOne {
	amuo.mutation.ResetFid()
	amuo.mutation.SetFid(i)
	return amuo
}

// SetNillableFid sets the "fid" field if the given value is not nil.
func (amuo *AdminMenusUpdateOne) SetNillableFid(i *int) *AdminMenusUpdateOne {
	if i != nil {
		amuo.SetFid(*i)
	}
	return amuo
}

// AddFid adds i to the "fid" field.
func (amuo *AdminMenusUpdateOne) AddFid(i int) *AdminMenusUpdateOne {
	amuo.mutation.AddFid(i)
	return amuo
}

// ClearFid clears the value of the "fid" field.
func (amuo *AdminMenusUpdateOne) ClearFid() *AdminMenusUpdateOne {
	amuo.mutation.ClearFid()
	return amuo
}

// SetIsExternalLink sets the "is_external_link" field.
func (amuo *AdminMenusUpdateOne) SetIsExternalLink(b bool) *AdminMenusUpdateOne {
	amuo.mutation.SetIsExternalLink(b)
	return amuo
}

// SetNillableIsExternalLink sets the "is_external_link" field if the given value is not nil.
func (amuo *AdminMenusUpdateOne) SetNillableIsExternalLink(b *bool) *AdminMenusUpdateOne {
	if b != nil {
		amuo.SetIsExternalLink(*b)
	}
	return amuo
}

// ClearIsExternalLink clears the value of the "is_external_link" field.
func (amuo *AdminMenusUpdateOne) ClearIsExternalLink() *AdminMenusUpdateOne {
	amuo.mutation.ClearIsExternalLink()
	return amuo
}

// SetIsShow sets the "is_show" field.
func (amuo *AdminMenusUpdateOne) SetIsShow(b bool) *AdminMenusUpdateOne {
	amuo.mutation.SetIsShow(b)
	return amuo
}

// SetNillableIsShow sets the "is_show" field if the given value is not nil.
func (amuo *AdminMenusUpdateOne) SetNillableIsShow(b *bool) *AdminMenusUpdateOne {
	if b != nil {
		amuo.SetIsShow(*b)
	}
	return amuo
}

// ClearIsShow clears the value of the "is_show" field.
func (amuo *AdminMenusUpdateOne) ClearIsShow() *AdminMenusUpdateOne {
	amuo.mutation.ClearIsShow()
	return amuo
}

// SetIsEnable sets the "is_enable" field.
func (amuo *AdminMenusUpdateOne) SetIsEnable(b bool) *AdminMenusUpdateOne {
	amuo.mutation.SetIsEnable(b)
	return amuo
}

// SetNillableIsEnable sets the "is_enable" field if the given value is not nil.
func (amuo *AdminMenusUpdateOne) SetNillableIsEnable(b *bool) *AdminMenusUpdateOne {
	if b != nil {
		amuo.SetIsEnable(*b)
	}
	return amuo
}

// ClearIsEnable clears the value of the "is_enable" field.
func (amuo *AdminMenusUpdateOne) ClearIsEnable() *AdminMenusUpdateOne {
	amuo.mutation.ClearIsEnable()
	return amuo
}

// AddRoleIDs adds the "role" edge to the AdminRole entity by IDs.
func (amuo *AdminMenusUpdateOne) AddRoleIDs(ids ...int) *AdminMenusUpdateOne {
	amuo.mutation.AddRoleIDs(ids...)
	return amuo
}

// AddRole adds the "role" edges to the AdminRole entity.
func (amuo *AdminMenusUpdateOne) AddRole(a ...*AdminRole) *AdminMenusUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amuo.AddRoleIDs(ids...)
}

// Mutation returns the AdminMenusMutation object of the builder.
func (amuo *AdminMenusUpdateOne) Mutation() *AdminMenusMutation {
	return amuo.mutation
}

// ClearRole clears all "role" edges to the AdminRole entity.
func (amuo *AdminMenusUpdateOne) ClearRole() *AdminMenusUpdateOne {
	amuo.mutation.ClearRole()
	return amuo
}

// RemoveRoleIDs removes the "role" edge to AdminRole entities by IDs.
func (amuo *AdminMenusUpdateOne) RemoveRoleIDs(ids ...int) *AdminMenusUpdateOne {
	amuo.mutation.RemoveRoleIDs(ids...)
	return amuo
}

// RemoveRole removes "role" edges to AdminRole entities.
func (amuo *AdminMenusUpdateOne) RemoveRole(a ...*AdminRole) *AdminMenusUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amuo.RemoveRoleIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amuo *AdminMenusUpdateOne) Select(field string, fields ...string) *AdminMenusUpdateOne {
	amuo.fields = append([]string{field}, fields...)
	return amuo
}

// Save executes the query and returns the updated AdminMenus entity.
func (amuo *AdminMenusUpdateOne) Save(ctx context.Context) (*AdminMenus, error) {
	var (
		err  error
		node *AdminMenus
	)
	amuo.defaults()
	if len(amuo.hooks) == 0 {
		if err = amuo.check(); err != nil {
			return nil, err
		}
		node, err = amuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminMenusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = amuo.check(); err != nil {
				return nil, err
			}
			amuo.mutation = mutation
			node, err = amuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amuo.hooks) - 1; i >= 0; i-- {
			mut = amuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amuo *AdminMenusUpdateOne) SaveX(ctx context.Context) *AdminMenus {
	node, err := amuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amuo *AdminMenusUpdateOne) Exec(ctx context.Context) error {
	_, err := amuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amuo *AdminMenusUpdateOne) ExecX(ctx context.Context) {
	if err := amuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amuo *AdminMenusUpdateOne) defaults() {
	if _, ok := amuo.mutation.UpdatedAt(); !ok && !amuo.mutation.UpdatedAtCleared() {
		v := adminmenus.UpdateDefaultUpdatedAt()
		amuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amuo *AdminMenusUpdateOne) check() error {
	if v, ok := amuo.mutation.Sort(); ok {
		if err := adminmenus.SortValidator(v); err != nil {
			return &ValidationError{Name: "sort", err: fmt.Errorf("ent: validator failed for field \"sort\": %w", err)}
		}
	}
	return nil
}

func (amuo *AdminMenusUpdateOne) sqlSave(ctx context.Context) (_node *AdminMenus, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminmenus.Table,
			Columns: adminmenus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminmenus.FieldID,
			},
		},
	}
	id, ok := amuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AdminMenus.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := amuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminmenus.FieldID)
		for _, f := range fields {
			if !adminmenus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminmenus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminmenus.FieldUpdatedAt,
		})
	}
	if amuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminmenus.FieldUpdatedAt,
		})
	}
	if value, ok := amuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminmenus.FieldDeletedAt,
		})
	}
	if amuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminmenus.FieldDeletedAt,
		})
	}
	if value, ok := amuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldName,
		})
	}
	if value, ok := amuo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldPath,
		})
	}
	if amuo.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adminmenus.FieldPath,
		})
	}
	if value, ok := amuo.mutation.PathAction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldPathAction,
		})
	}
	if amuo.mutation.PathActionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adminmenus.FieldPathAction,
		})
	}
	if value, ok := amuo.mutation.RouterPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldRouterPath,
		})
	}
	if amuo.mutation.RouterPathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adminmenus.FieldRouterPath,
		})
	}
	if value, ok := amuo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldIcon,
		})
	}
	if amuo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adminmenus.FieldIcon,
		})
	}
	if value, ok := amuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: adminmenus.FieldType,
		})
	}
	if value, ok := amuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: adminmenus.FieldType,
		})
	}
	if amuo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: adminmenus.FieldType,
		})
	}
	if value, ok := amuo.mutation.PowerStr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldPowerStr,
		})
	}
	if amuo.mutation.PowerStrCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adminmenus.FieldPowerStr,
		})
	}
	if value, ok := amuo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: adminmenus.FieldSort,
		})
	}
	if value, ok := amuo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: adminmenus.FieldSort,
		})
	}
	if amuo.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: adminmenus.FieldSort,
		})
	}
	if value, ok := amuo.mutation.Fid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: adminmenus.FieldFid,
		})
	}
	if value, ok := amuo.mutation.AddedFid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: adminmenus.FieldFid,
		})
	}
	if amuo.mutation.FidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: adminmenus.FieldFid,
		})
	}
	if value, ok := amuo.mutation.IsExternalLink(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: adminmenus.FieldIsExternalLink,
		})
	}
	if amuo.mutation.IsExternalLinkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: adminmenus.FieldIsExternalLink,
		})
	}
	if value, ok := amuo.mutation.IsShow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: adminmenus.FieldIsShow,
		})
	}
	if amuo.mutation.IsShowCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: adminmenus.FieldIsShow,
		})
	}
	if value, ok := amuo.mutation.IsEnable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: adminmenus.FieldIsEnable,
		})
	}
	if amuo.mutation.IsEnableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: adminmenus.FieldIsEnable,
		})
	}
	if amuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   adminmenus.RoleTable,
			Columns: adminmenus.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.RemovedRoleIDs(); len(nodes) > 0 && !amuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   adminmenus.RoleTable,
			Columns: adminmenus.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   adminmenus.RoleTable,
			Columns: adminmenus.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AdminMenus{config: amuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminmenus.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
