// Code generated by entc, DO NOT EDIT.

package adminmenus

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/a20070322/go_fast_admin/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// PathAction applies equality check predicate on the "path_action" field. It's identical to PathActionEQ.
func PathAction(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPathAction), v))
	})
}

// RouterPath applies equality check predicate on the "router_path" field. It's identical to RouterPathEQ.
func RouterPath(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRouterPath), v))
	})
}

// Icon applies equality check predicate on the "icon" field. It's identical to IconEQ.
func Icon(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcon), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int8) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// PowerStr applies equality check predicate on the "power_str" field. It's identical to PowerStrEQ.
func PowerStr(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPowerStr), v))
	})
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// Fid applies equality check predicate on the "fid" field. It's identical to FidEQ.
func Fid(v int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFid), v))
	})
}

// IsExternalLink applies equality check predicate on the "is_external_link" field. It's identical to IsExternalLinkEQ.
func IsExternalLink(v bool) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsExternalLink), v))
	})
}

// IsShow applies equality check predicate on the "is_show" field. It's identical to IsShowEQ.
func IsShow(v bool) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsShow), v))
	})
}

// IsEnable applies equality check predicate on the "is_enable" field. It's identical to IsEnableEQ.
func IsEnable(v bool) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsEnable), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPath), v))
	})
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPath), v...))
	})
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPath), v...))
	})
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPath), v))
	})
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPath), v))
	})
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPath), v))
	})
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPath), v))
	})
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPath), v))
	})
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPath), v))
	})
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPath), v))
	})
}

// PathIsNil applies the IsNil predicate on the "path" field.
func PathIsNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPath)))
	})
}

// PathNotNil applies the NotNil predicate on the "path" field.
func PathNotNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPath)))
	})
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPath), v))
	})
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPath), v))
	})
}

// PathActionEQ applies the EQ predicate on the "path_action" field.
func PathActionEQ(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPathAction), v))
	})
}

// PathActionNEQ applies the NEQ predicate on the "path_action" field.
func PathActionNEQ(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPathAction), v))
	})
}

// PathActionIn applies the In predicate on the "path_action" field.
func PathActionIn(vs ...string) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPathAction), v...))
	})
}

// PathActionNotIn applies the NotIn predicate on the "path_action" field.
func PathActionNotIn(vs ...string) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPathAction), v...))
	})
}

// PathActionGT applies the GT predicate on the "path_action" field.
func PathActionGT(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPathAction), v))
	})
}

// PathActionGTE applies the GTE predicate on the "path_action" field.
func PathActionGTE(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPathAction), v))
	})
}

// PathActionLT applies the LT predicate on the "path_action" field.
func PathActionLT(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPathAction), v))
	})
}

// PathActionLTE applies the LTE predicate on the "path_action" field.
func PathActionLTE(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPathAction), v))
	})
}

// PathActionContains applies the Contains predicate on the "path_action" field.
func PathActionContains(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPathAction), v))
	})
}

// PathActionHasPrefix applies the HasPrefix predicate on the "path_action" field.
func PathActionHasPrefix(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPathAction), v))
	})
}

// PathActionHasSuffix applies the HasSuffix predicate on the "path_action" field.
func PathActionHasSuffix(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPathAction), v))
	})
}

// PathActionIsNil applies the IsNil predicate on the "path_action" field.
func PathActionIsNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPathAction)))
	})
}

// PathActionNotNil applies the NotNil predicate on the "path_action" field.
func PathActionNotNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPathAction)))
	})
}

// PathActionEqualFold applies the EqualFold predicate on the "path_action" field.
func PathActionEqualFold(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPathAction), v))
	})
}

// PathActionContainsFold applies the ContainsFold predicate on the "path_action" field.
func PathActionContainsFold(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPathAction), v))
	})
}

// RouterPathEQ applies the EQ predicate on the "router_path" field.
func RouterPathEQ(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRouterPath), v))
	})
}

// RouterPathNEQ applies the NEQ predicate on the "router_path" field.
func RouterPathNEQ(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRouterPath), v))
	})
}

// RouterPathIn applies the In predicate on the "router_path" field.
func RouterPathIn(vs ...string) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRouterPath), v...))
	})
}

// RouterPathNotIn applies the NotIn predicate on the "router_path" field.
func RouterPathNotIn(vs ...string) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRouterPath), v...))
	})
}

// RouterPathGT applies the GT predicate on the "router_path" field.
func RouterPathGT(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRouterPath), v))
	})
}

// RouterPathGTE applies the GTE predicate on the "router_path" field.
func RouterPathGTE(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRouterPath), v))
	})
}

// RouterPathLT applies the LT predicate on the "router_path" field.
func RouterPathLT(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRouterPath), v))
	})
}

// RouterPathLTE applies the LTE predicate on the "router_path" field.
func RouterPathLTE(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRouterPath), v))
	})
}

// RouterPathContains applies the Contains predicate on the "router_path" field.
func RouterPathContains(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRouterPath), v))
	})
}

// RouterPathHasPrefix applies the HasPrefix predicate on the "router_path" field.
func RouterPathHasPrefix(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRouterPath), v))
	})
}

// RouterPathHasSuffix applies the HasSuffix predicate on the "router_path" field.
func RouterPathHasSuffix(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRouterPath), v))
	})
}

// RouterPathIsNil applies the IsNil predicate on the "router_path" field.
func RouterPathIsNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRouterPath)))
	})
}

// RouterPathNotNil applies the NotNil predicate on the "router_path" field.
func RouterPathNotNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRouterPath)))
	})
}

// RouterPathEqualFold applies the EqualFold predicate on the "router_path" field.
func RouterPathEqualFold(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRouterPath), v))
	})
}

// RouterPathContainsFold applies the ContainsFold predicate on the "router_path" field.
func RouterPathContainsFold(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRouterPath), v))
	})
}

// IconEQ applies the EQ predicate on the "icon" field.
func IconEQ(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcon), v))
	})
}

// IconNEQ applies the NEQ predicate on the "icon" field.
func IconNEQ(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIcon), v))
	})
}

// IconIn applies the In predicate on the "icon" field.
func IconIn(vs ...string) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIcon), v...))
	})
}

// IconNotIn applies the NotIn predicate on the "icon" field.
func IconNotIn(vs ...string) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIcon), v...))
	})
}

// IconGT applies the GT predicate on the "icon" field.
func IconGT(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIcon), v))
	})
}

// IconGTE applies the GTE predicate on the "icon" field.
func IconGTE(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIcon), v))
	})
}

// IconLT applies the LT predicate on the "icon" field.
func IconLT(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIcon), v))
	})
}

// IconLTE applies the LTE predicate on the "icon" field.
func IconLTE(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIcon), v))
	})
}

// IconContains applies the Contains predicate on the "icon" field.
func IconContains(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIcon), v))
	})
}

// IconHasPrefix applies the HasPrefix predicate on the "icon" field.
func IconHasPrefix(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIcon), v))
	})
}

// IconHasSuffix applies the HasSuffix predicate on the "icon" field.
func IconHasSuffix(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIcon), v))
	})
}

// IconIsNil applies the IsNil predicate on the "icon" field.
func IconIsNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIcon)))
	})
}

// IconNotNil applies the NotNil predicate on the "icon" field.
func IconNotNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIcon)))
	})
}

// IconEqualFold applies the EqualFold predicate on the "icon" field.
func IconEqualFold(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIcon), v))
	})
}

// IconContainsFold applies the ContainsFold predicate on the "icon" field.
func IconContainsFold(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIcon), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int8) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int8) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int8) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int8) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int8) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int8) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int8) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int8) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldType)))
	})
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldType)))
	})
}

// PowerStrEQ applies the EQ predicate on the "power_str" field.
func PowerStrEQ(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPowerStr), v))
	})
}

// PowerStrNEQ applies the NEQ predicate on the "power_str" field.
func PowerStrNEQ(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPowerStr), v))
	})
}

// PowerStrIn applies the In predicate on the "power_str" field.
func PowerStrIn(vs ...string) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPowerStr), v...))
	})
}

// PowerStrNotIn applies the NotIn predicate on the "power_str" field.
func PowerStrNotIn(vs ...string) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPowerStr), v...))
	})
}

// PowerStrGT applies the GT predicate on the "power_str" field.
func PowerStrGT(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPowerStr), v))
	})
}

// PowerStrGTE applies the GTE predicate on the "power_str" field.
func PowerStrGTE(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPowerStr), v))
	})
}

// PowerStrLT applies the LT predicate on the "power_str" field.
func PowerStrLT(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPowerStr), v))
	})
}

// PowerStrLTE applies the LTE predicate on the "power_str" field.
func PowerStrLTE(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPowerStr), v))
	})
}

// PowerStrContains applies the Contains predicate on the "power_str" field.
func PowerStrContains(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPowerStr), v))
	})
}

// PowerStrHasPrefix applies the HasPrefix predicate on the "power_str" field.
func PowerStrHasPrefix(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPowerStr), v))
	})
}

// PowerStrHasSuffix applies the HasSuffix predicate on the "power_str" field.
func PowerStrHasSuffix(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPowerStr), v))
	})
}

// PowerStrIsNil applies the IsNil predicate on the "power_str" field.
func PowerStrIsNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPowerStr)))
	})
}

// PowerStrNotNil applies the NotNil predicate on the "power_str" field.
func PowerStrNotNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPowerStr)))
	})
}

// PowerStrEqualFold applies the EqualFold predicate on the "power_str" field.
func PowerStrEqualFold(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPowerStr), v))
	})
}

// PowerStrContainsFold applies the ContainsFold predicate on the "power_str" field.
func PowerStrContainsFold(v string) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPowerStr), v))
	})
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSort), v))
	})
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSort), v...))
	})
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSort), v...))
	})
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSort), v))
	})
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSort), v))
	})
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSort), v))
	})
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSort), v))
	})
}

// SortIsNil applies the IsNil predicate on the "sort" field.
func SortIsNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSort)))
	})
}

// SortNotNil applies the NotNil predicate on the "sort" field.
func SortNotNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSort)))
	})
}

// FidEQ applies the EQ predicate on the "fid" field.
func FidEQ(v int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFid), v))
	})
}

// FidNEQ applies the NEQ predicate on the "fid" field.
func FidNEQ(v int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFid), v))
	})
}

// FidIn applies the In predicate on the "fid" field.
func FidIn(vs ...int) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFid), v...))
	})
}

// FidNotIn applies the NotIn predicate on the "fid" field.
func FidNotIn(vs ...int) predicate.AdminMenus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminMenus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFid), v...))
	})
}

// FidGT applies the GT predicate on the "fid" field.
func FidGT(v int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFid), v))
	})
}

// FidGTE applies the GTE predicate on the "fid" field.
func FidGTE(v int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFid), v))
	})
}

// FidLT applies the LT predicate on the "fid" field.
func FidLT(v int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFid), v))
	})
}

// FidLTE applies the LTE predicate on the "fid" field.
func FidLTE(v int) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFid), v))
	})
}

// FidIsNil applies the IsNil predicate on the "fid" field.
func FidIsNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFid)))
	})
}

// FidNotNil applies the NotNil predicate on the "fid" field.
func FidNotNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFid)))
	})
}

// IsExternalLinkEQ applies the EQ predicate on the "is_external_link" field.
func IsExternalLinkEQ(v bool) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsExternalLink), v))
	})
}

// IsExternalLinkNEQ applies the NEQ predicate on the "is_external_link" field.
func IsExternalLinkNEQ(v bool) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsExternalLink), v))
	})
}

// IsExternalLinkIsNil applies the IsNil predicate on the "is_external_link" field.
func IsExternalLinkIsNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsExternalLink)))
	})
}

// IsExternalLinkNotNil applies the NotNil predicate on the "is_external_link" field.
func IsExternalLinkNotNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsExternalLink)))
	})
}

// IsShowEQ applies the EQ predicate on the "is_show" field.
func IsShowEQ(v bool) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsShow), v))
	})
}

// IsShowNEQ applies the NEQ predicate on the "is_show" field.
func IsShowNEQ(v bool) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsShow), v))
	})
}

// IsShowIsNil applies the IsNil predicate on the "is_show" field.
func IsShowIsNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsShow)))
	})
}

// IsShowNotNil applies the NotNil predicate on the "is_show" field.
func IsShowNotNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsShow)))
	})
}

// IsEnableEQ applies the EQ predicate on the "is_enable" field.
func IsEnableEQ(v bool) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsEnable), v))
	})
}

// IsEnableNEQ applies the NEQ predicate on the "is_enable" field.
func IsEnableNEQ(v bool) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsEnable), v))
	})
}

// IsEnableIsNil applies the IsNil predicate on the "is_enable" field.
func IsEnableIsNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsEnable)))
	})
}

// IsEnableNotNil applies the NotNil predicate on the "is_enable" field.
func IsEnableNotNil() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsEnable)))
	})
}

// HasRole applies the HasEdge predicate on the "role" edge.
func HasRole() predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RoleTable, RolePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleWith applies the HasEdge predicate on the "role" edge with a given conditions (other predicates).
func HasRoleWith(preds ...predicate.AdminRole) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RoleTable, RolePrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AdminMenus) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AdminMenus) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AdminMenus) predicate.AdminMenus {
	return predicate.AdminMenus(func(s *sql.Selector) {
		p(s.Not())
	})
}
