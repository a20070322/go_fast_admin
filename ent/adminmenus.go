// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/go_fast_admin/ent/adminmenus"
)

// AdminMenus is the model entity for the AdminMenus schema.
type AdminMenus struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// Name holds the value of the "name" field.
	// 菜单名称
	Name string `json:"name,omitempty"`
	// Path holds the value of the "path" field.
	// 路由地址
	Path string `json:"path,omitempty"`
	// PathAction holds the value of the "path_action" field.
	// 路由类型
	PathAction string `json:"path_action,omitempty"`
	// RouterPath holds the value of the "router_path" field.
	// 页面路由地址
	RouterPath string `json:"router_path,omitempty"`
	// Icon holds the value of the "icon" field.
	// 菜单图标
	Icon string `json:"icon,omitempty"`
	// Type holds the value of the "type" field.
	// 菜单类型 1目录 2菜单 3按钮
	Type int8 `json:"type,omitempty"`
	// PowerStr holds the value of the "power_str" field.
	// 权限字符
	PowerStr string `json:"power_str,omitempty"`
	// Sort holds the value of the "sort" field.
	// 排序
	Sort int `json:"sort,omitempty"`
	// Fid holds the value of the "fid" field.
	// 父级id
	Fid int `json:"fid,omitempty"`
	// IsExternalLink holds the value of the "is_external_link" field.
	// 是否外链
	IsExternalLink bool `json:"is_external_link,omitempty"`
	// IsShow holds the value of the "is_show" field.
	// 显示状态
	IsShow bool `json:"is_show,omitempty"`
	// IsEnable holds the value of the "is_enable" field.
	// 是否启用
	IsEnable bool `json:"is_enable,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminMenusQuery when eager-loading is set.
	Edges AdminMenusEdges `json:"edges"`
}

// AdminMenusEdges holds the relations/edges for other nodes in the graph.
type AdminMenusEdges struct {
	// Role holds the value of the role edge.
	Role []*AdminRole `json:"role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading.
func (e AdminMenusEdges) RoleOrErr() ([]*AdminRole, error) {
	if e.loadedTypes[0] {
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminMenus) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminmenus.FieldIsExternalLink, adminmenus.FieldIsShow, adminmenus.FieldIsEnable:
			values[i] = new(sql.NullBool)
		case adminmenus.FieldID, adminmenus.FieldType, adminmenus.FieldSort, adminmenus.FieldFid:
			values[i] = new(sql.NullInt64)
		case adminmenus.FieldName, adminmenus.FieldPath, adminmenus.FieldPathAction, adminmenus.FieldRouterPath, adminmenus.FieldIcon, adminmenus.FieldPowerStr:
			values[i] = new(sql.NullString)
		case adminmenus.FieldCreatedAt, adminmenus.FieldUpdatedAt, adminmenus.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AdminMenus", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminMenus fields.
func (am *AdminMenus) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminmenus.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			am.ID = int(value.Int64)
		case adminmenus.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				am.CreatedAt = value.Time
			}
		case adminmenus.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				am.UpdatedAt = value.Time
			}
		case adminmenus.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				am.DeletedAt = value.Time
			}
		case adminmenus.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				am.Name = value.String
			}
		case adminmenus.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				am.Path = value.String
			}
		case adminmenus.FieldPathAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path_action", values[i])
			} else if value.Valid {
				am.PathAction = value.String
			}
		case adminmenus.FieldRouterPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field router_path", values[i])
			} else if value.Valid {
				am.RouterPath = value.String
			}
		case adminmenus.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				am.Icon = value.String
			}
		case adminmenus.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				am.Type = int8(value.Int64)
			}
		case adminmenus.FieldPowerStr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field power_str", values[i])
			} else if value.Valid {
				am.PowerStr = value.String
			}
		case adminmenus.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				am.Sort = int(value.Int64)
			}
		case adminmenus.FieldFid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fid", values[i])
			} else if value.Valid {
				am.Fid = int(value.Int64)
			}
		case adminmenus.FieldIsExternalLink:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_external_link", values[i])
			} else if value.Valid {
				am.IsExternalLink = value.Bool
			}
		case adminmenus.FieldIsShow:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_show", values[i])
			} else if value.Valid {
				am.IsShow = value.Bool
			}
		case adminmenus.FieldIsEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enable", values[i])
			} else if value.Valid {
				am.IsEnable = value.Bool
			}
		}
	}
	return nil
}

// QueryRole queries the "role" edge of the AdminMenus entity.
func (am *AdminMenus) QueryRole() *AdminRoleQuery {
	return (&AdminMenusClient{config: am.config}).QueryRole(am)
}

// Update returns a builder for updating this AdminMenus.
// Note that you need to call AdminMenus.Unwrap() before calling this method if this AdminMenus
// was returned from a transaction, and the transaction was committed or rolled back.
func (am *AdminMenus) Update() *AdminMenusUpdateOne {
	return (&AdminMenusClient{config: am.config}).UpdateOne(am)
}

// Unwrap unwraps the AdminMenus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (am *AdminMenus) Unwrap() *AdminMenus {
	tx, ok := am.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminMenus is not a transactional entity")
	}
	am.config.driver = tx.drv
	return am
}

// String implements the fmt.Stringer.
func (am *AdminMenus) String() string {
	var builder strings.Builder
	builder.WriteString("AdminMenus(")
	builder.WriteString(fmt.Sprintf("id=%v", am.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(am.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(am.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(am.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(am.Name)
	builder.WriteString(", path=")
	builder.WriteString(am.Path)
	builder.WriteString(", path_action=")
	builder.WriteString(am.PathAction)
	builder.WriteString(", router_path=")
	builder.WriteString(am.RouterPath)
	builder.WriteString(", icon=")
	builder.WriteString(am.Icon)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", am.Type))
	builder.WriteString(", power_str=")
	builder.WriteString(am.PowerStr)
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", am.Sort))
	builder.WriteString(", fid=")
	builder.WriteString(fmt.Sprintf("%v", am.Fid))
	builder.WriteString(", is_external_link=")
	builder.WriteString(fmt.Sprintf("%v", am.IsExternalLink))
	builder.WriteString(", is_show=")
	builder.WriteString(fmt.Sprintf("%v", am.IsShow))
	builder.WriteString(", is_enable=")
	builder.WriteString(fmt.Sprintf("%v", am.IsEnable))
	builder.WriteByte(')')
	return builder.String()
}

// AdminMenusSlice is a parsable slice of AdminMenus.
type AdminMenusSlice []*AdminMenus

func (am AdminMenusSlice) config(cfg config) {
	for _i := range am {
		am[_i].config = cfg
	}
}
