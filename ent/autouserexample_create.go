// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/go_fast_admin/ent/autouserexample"
)

// AutoUserExampleCreate is the builder for creating a AutoUserExample entity.
type AutoUserExampleCreate struct {
	config
	mutation *AutoUserExampleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (auec *AutoUserExampleCreate) SetCreatedAt(t time.Time) *AutoUserExampleCreate {
	auec.mutation.SetCreatedAt(t)
	return auec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auec *AutoUserExampleCreate) SetNillableCreatedAt(t *time.Time) *AutoUserExampleCreate {
	if t != nil {
		auec.SetCreatedAt(*t)
	}
	return auec
}

// SetUpdatedAt sets the "updated_at" field.
func (auec *AutoUserExampleCreate) SetUpdatedAt(t time.Time) *AutoUserExampleCreate {
	auec.mutation.SetUpdatedAt(t)
	return auec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auec *AutoUserExampleCreate) SetNillableUpdatedAt(t *time.Time) *AutoUserExampleCreate {
	if t != nil {
		auec.SetUpdatedAt(*t)
	}
	return auec
}

// SetDeletedAt sets the "deleted_at" field.
func (auec *AutoUserExampleCreate) SetDeletedAt(t time.Time) *AutoUserExampleCreate {
	auec.mutation.SetDeletedAt(t)
	return auec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auec *AutoUserExampleCreate) SetNillableDeletedAt(t *time.Time) *AutoUserExampleCreate {
	if t != nil {
		auec.SetDeletedAt(*t)
	}
	return auec
}

// SetTestText sets the "test_text" field.
func (auec *AutoUserExampleCreate) SetTestText(s string) *AutoUserExampleCreate {
	auec.mutation.SetTestText(s)
	return auec
}

// SetNillableTestText sets the "test_text" field if the given value is not nil.
func (auec *AutoUserExampleCreate) SetNillableTestText(s *string) *AutoUserExampleCreate {
	if s != nil {
		auec.SetTestText(*s)
	}
	return auec
}

// SetTestBool sets the "test_bool" field.
func (auec *AutoUserExampleCreate) SetTestBool(b bool) *AutoUserExampleCreate {
	auec.mutation.SetTestBool(b)
	return auec
}

// SetNillableTestBool sets the "test_bool" field if the given value is not nil.
func (auec *AutoUserExampleCreate) SetNillableTestBool(b *bool) *AutoUserExampleCreate {
	if b != nil {
		auec.SetTestBool(*b)
	}
	return auec
}

// SetTestInt sets the "test_int" field.
func (auec *AutoUserExampleCreate) SetTestInt(i int) *AutoUserExampleCreate {
	auec.mutation.SetTestInt(i)
	return auec
}

// SetNillableTestInt sets the "test_int" field if the given value is not nil.
func (auec *AutoUserExampleCreate) SetNillableTestInt(i *int) *AutoUserExampleCreate {
	if i != nil {
		auec.SetTestInt(*i)
	}
	return auec
}

// Mutation returns the AutoUserExampleMutation object of the builder.
func (auec *AutoUserExampleCreate) Mutation() *AutoUserExampleMutation {
	return auec.mutation
}

// Save creates the AutoUserExample in the database.
func (auec *AutoUserExampleCreate) Save(ctx context.Context) (*AutoUserExample, error) {
	var (
		err  error
		node *AutoUserExample
	)
	auec.defaults()
	if len(auec.hooks) == 0 {
		if err = auec.check(); err != nil {
			return nil, err
		}
		node, err = auec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AutoUserExampleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auec.check(); err != nil {
				return nil, err
			}
			auec.mutation = mutation
			node, err = auec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auec.hooks) - 1; i >= 0; i-- {
			mut = auec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (auec *AutoUserExampleCreate) SaveX(ctx context.Context) *AutoUserExample {
	v, err := auec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (auec *AutoUserExampleCreate) defaults() {
	if _, ok := auec.mutation.CreatedAt(); !ok {
		v := autouserexample.DefaultCreatedAt()
		auec.mutation.SetCreatedAt(v)
	}
	if _, ok := auec.mutation.TestText(); !ok {
		v := autouserexample.DefaultTestText
		auec.mutation.SetTestText(v)
	}
	if _, ok := auec.mutation.TestBool(); !ok {
		v := autouserexample.DefaultTestBool
		auec.mutation.SetTestBool(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auec *AutoUserExampleCreate) check() error {
	if _, ok := auec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	return nil
}

func (auec *AutoUserExampleCreate) sqlSave(ctx context.Context) (*AutoUserExample, error) {
	_node, _spec := auec.createSpec()
	if err := sqlgraph.CreateNode(ctx, auec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (auec *AutoUserExampleCreate) createSpec() (*AutoUserExample, *sqlgraph.CreateSpec) {
	var (
		_node = &AutoUserExample{config: auec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: autouserexample.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: autouserexample.FieldID,
			},
		}
	)
	if value, ok := auec.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: autouserexample.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := auec.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: autouserexample.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := auec.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: autouserexample.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := auec.mutation.TestText(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: autouserexample.FieldTestText,
		})
		_node.TestText = value
	}
	if value, ok := auec.mutation.TestBool(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: autouserexample.FieldTestBool,
		})
		_node.TestBool = value
	}
	if value, ok := auec.mutation.TestInt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: autouserexample.FieldTestInt,
		})
		_node.TestInt = value
	}
	return _node, _spec
}

// AutoUserExampleCreateBulk is the builder for creating many AutoUserExample entities in bulk.
type AutoUserExampleCreateBulk struct {
	config
	builders []*AutoUserExampleCreate
}

// Save creates the AutoUserExample entities in the database.
func (auecb *AutoUserExampleCreateBulk) Save(ctx context.Context) ([]*AutoUserExample, error) {
	specs := make([]*sqlgraph.CreateSpec, len(auecb.builders))
	nodes := make([]*AutoUserExample, len(auecb.builders))
	mutators := make([]Mutator, len(auecb.builders))
	for i := range auecb.builders {
		func(i int, root context.Context) {
			builder := auecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AutoUserExampleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, auecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, auecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, auecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (auecb *AutoUserExampleCreateBulk) SaveX(ctx context.Context) []*AutoUserExample {
	v, err := auecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
