// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/go_fast_admin/ent/adminuser"
	"github.com/google/uuid"
)

// AdminUser is the model entity for the AdminUser schema.
type AdminUser struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// Username holds the value of the "username" field.
	// 用户名
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	// 密码
	Password string `json:"-"`
	// Avatar holds the value of the "avatar" field.
	// 头像
	Avatar string `json:"avatar,omitempty"`
	// Phone holds the value of the "phone" field.
	// 手机号
	Phone string `json:"phone,omitempty"`
	// IsEnable holds the value of the "is_enable" field.
	// 是否启用
	IsEnable bool `json:"is_enable,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminUserQuery when eager-loading is set.
	Edges AdminUserEdges `json:"edges"`
}

// AdminUserEdges holds the relations/edges for other nodes in the graph.
type AdminUserEdges struct {
	// Role holds the value of the role edge.
	Role []*AdminRole `json:"role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading.
func (e AdminUserEdges) RoleOrErr() ([]*AdminRole, error) {
	if e.loadedTypes[0] {
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminuser.FieldIsEnable:
			values[i] = new(sql.NullBool)
		case adminuser.FieldUsername, adminuser.FieldPassword, adminuser.FieldAvatar, adminuser.FieldPhone:
			values[i] = new(sql.NullString)
		case adminuser.FieldCreatedAt, adminuser.FieldUpdatedAt, adminuser.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case adminuser.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AdminUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminUser fields.
func (au *AdminUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminuser.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				au.ID = *value
			}
		case adminuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				au.CreatedAt = value.Time
			}
		case adminuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				au.UpdatedAt = value.Time
			}
		case adminuser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				au.DeletedAt = value.Time
			}
		case adminuser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				au.Username = value.String
			}
		case adminuser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				au.Password = value.String
			}
		case adminuser.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				au.Avatar = value.String
			}
		case adminuser.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				au.Phone = value.String
			}
		case adminuser.FieldIsEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enable", values[i])
			} else if value.Valid {
				au.IsEnable = value.Bool
			}
		}
	}
	return nil
}

// QueryRole queries the "role" edge of the AdminUser entity.
func (au *AdminUser) QueryRole() *AdminRoleQuery {
	return (&AdminUserClient{config: au.config}).QueryRole(au)
}

// Update returns a builder for updating this AdminUser.
// Note that you need to call AdminUser.Unwrap() before calling this method if this AdminUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (au *AdminUser) Update() *AdminUserUpdateOne {
	return (&AdminUserClient{config: au.config}).UpdateOne(au)
}

// Unwrap unwraps the AdminUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (au *AdminUser) Unwrap() *AdminUser {
	tx, ok := au.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminUser is not a transactional entity")
	}
	au.config.driver = tx.drv
	return au
}

// String implements the fmt.Stringer.
func (au *AdminUser) String() string {
	var builder strings.Builder
	builder.WriteString("AdminUser(")
	builder.WriteString(fmt.Sprintf("id=%v", au.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(au.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(au.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(au.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", username=")
	builder.WriteString(au.Username)
	builder.WriteString(", password=<sensitive>")
	builder.WriteString(", avatar=")
	builder.WriteString(au.Avatar)
	builder.WriteString(", phone=")
	builder.WriteString(au.Phone)
	builder.WriteString(", is_enable=")
	builder.WriteString(fmt.Sprintf("%v", au.IsEnable))
	builder.WriteByte(')')
	return builder.String()
}

// AdminUsers is a parsable slice of AdminUser.
type AdminUsers []*AdminUser

func (au AdminUsers) config(cfg config) {
	for _i := range au {
		au[_i].config = cfg
	}
}
