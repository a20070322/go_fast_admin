// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/go_fast_admin/ent/autouserexample"
	"github.com/a20070322/go_fast_admin/ent/predicate"
)

// AutoUserExampleUpdate is the builder for updating AutoUserExample entities.
type AutoUserExampleUpdate struct {
	config
	hooks    []Hook
	mutation *AutoUserExampleMutation
}

// Where adds a new predicate for the AutoUserExampleUpdate builder.
func (aueu *AutoUserExampleUpdate) Where(ps ...predicate.AutoUserExample) *AutoUserExampleUpdate {
	aueu.mutation.predicates = append(aueu.mutation.predicates, ps...)
	return aueu
}

// SetUpdatedAt sets the "updated_at" field.
func (aueu *AutoUserExampleUpdate) SetUpdatedAt(t time.Time) *AutoUserExampleUpdate {
	aueu.mutation.SetUpdatedAt(t)
	return aueu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aueu *AutoUserExampleUpdate) ClearUpdatedAt() *AutoUserExampleUpdate {
	aueu.mutation.ClearUpdatedAt()
	return aueu
}

// SetDeletedAt sets the "deleted_at" field.
func (aueu *AutoUserExampleUpdate) SetDeletedAt(t time.Time) *AutoUserExampleUpdate {
	aueu.mutation.SetDeletedAt(t)
	return aueu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aueu *AutoUserExampleUpdate) SetNillableDeletedAt(t *time.Time) *AutoUserExampleUpdate {
	if t != nil {
		aueu.SetDeletedAt(*t)
	}
	return aueu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aueu *AutoUserExampleUpdate) ClearDeletedAt() *AutoUserExampleUpdate {
	aueu.mutation.ClearDeletedAt()
	return aueu
}

// SetTestText sets the "test_text" field.
func (aueu *AutoUserExampleUpdate) SetTestText(s string) *AutoUserExampleUpdate {
	aueu.mutation.SetTestText(s)
	return aueu
}

// SetNillableTestText sets the "test_text" field if the given value is not nil.
func (aueu *AutoUserExampleUpdate) SetNillableTestText(s *string) *AutoUserExampleUpdate {
	if s != nil {
		aueu.SetTestText(*s)
	}
	return aueu
}

// ClearTestText clears the value of the "test_text" field.
func (aueu *AutoUserExampleUpdate) ClearTestText() *AutoUserExampleUpdate {
	aueu.mutation.ClearTestText()
	return aueu
}

// SetTestBool sets the "test_bool" field.
func (aueu *AutoUserExampleUpdate) SetTestBool(b bool) *AutoUserExampleUpdate {
	aueu.mutation.SetTestBool(b)
	return aueu
}

// SetNillableTestBool sets the "test_bool" field if the given value is not nil.
func (aueu *AutoUserExampleUpdate) SetNillableTestBool(b *bool) *AutoUserExampleUpdate {
	if b != nil {
		aueu.SetTestBool(*b)
	}
	return aueu
}

// ClearTestBool clears the value of the "test_bool" field.
func (aueu *AutoUserExampleUpdate) ClearTestBool() *AutoUserExampleUpdate {
	aueu.mutation.ClearTestBool()
	return aueu
}

// SetTestInt sets the "test_int" field.
func (aueu *AutoUserExampleUpdate) SetTestInt(i int) *AutoUserExampleUpdate {
	aueu.mutation.ResetTestInt()
	aueu.mutation.SetTestInt(i)
	return aueu
}

// SetNillableTestInt sets the "test_int" field if the given value is not nil.
func (aueu *AutoUserExampleUpdate) SetNillableTestInt(i *int) *AutoUserExampleUpdate {
	if i != nil {
		aueu.SetTestInt(*i)
	}
	return aueu
}

// AddTestInt adds i to the "test_int" field.
func (aueu *AutoUserExampleUpdate) AddTestInt(i int) *AutoUserExampleUpdate {
	aueu.mutation.AddTestInt(i)
	return aueu
}

// ClearTestInt clears the value of the "test_int" field.
func (aueu *AutoUserExampleUpdate) ClearTestInt() *AutoUserExampleUpdate {
	aueu.mutation.ClearTestInt()
	return aueu
}

// Mutation returns the AutoUserExampleMutation object of the builder.
func (aueu *AutoUserExampleUpdate) Mutation() *AutoUserExampleMutation {
	return aueu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aueu *AutoUserExampleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aueu.defaults()
	if len(aueu.hooks) == 0 {
		affected, err = aueu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AutoUserExampleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aueu.mutation = mutation
			affected, err = aueu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aueu.hooks) - 1; i >= 0; i-- {
			mut = aueu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aueu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aueu *AutoUserExampleUpdate) SaveX(ctx context.Context) int {
	affected, err := aueu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aueu *AutoUserExampleUpdate) Exec(ctx context.Context) error {
	_, err := aueu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aueu *AutoUserExampleUpdate) ExecX(ctx context.Context) {
	if err := aueu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aueu *AutoUserExampleUpdate) defaults() {
	if _, ok := aueu.mutation.UpdatedAt(); !ok && !aueu.mutation.UpdatedAtCleared() {
		v := autouserexample.UpdateDefaultUpdatedAt()
		aueu.mutation.SetUpdatedAt(v)
	}
}

func (aueu *AutoUserExampleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   autouserexample.Table,
			Columns: autouserexample.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: autouserexample.FieldID,
			},
		},
	}
	if ps := aueu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aueu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: autouserexample.FieldUpdatedAt,
		})
	}
	if aueu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: autouserexample.FieldUpdatedAt,
		})
	}
	if value, ok := aueu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: autouserexample.FieldDeletedAt,
		})
	}
	if aueu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: autouserexample.FieldDeletedAt,
		})
	}
	if value, ok := aueu.mutation.TestText(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: autouserexample.FieldTestText,
		})
	}
	if aueu.mutation.TestTextCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: autouserexample.FieldTestText,
		})
	}
	if value, ok := aueu.mutation.TestBool(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: autouserexample.FieldTestBool,
		})
	}
	if aueu.mutation.TestBoolCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: autouserexample.FieldTestBool,
		})
	}
	if value, ok := aueu.mutation.TestInt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: autouserexample.FieldTestInt,
		})
	}
	if value, ok := aueu.mutation.AddedTestInt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: autouserexample.FieldTestInt,
		})
	}
	if aueu.mutation.TestIntCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: autouserexample.FieldTestInt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aueu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{autouserexample.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AutoUserExampleUpdateOne is the builder for updating a single AutoUserExample entity.
type AutoUserExampleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AutoUserExampleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (aueuo *AutoUserExampleUpdateOne) SetUpdatedAt(t time.Time) *AutoUserExampleUpdateOne {
	aueuo.mutation.SetUpdatedAt(t)
	return aueuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aueuo *AutoUserExampleUpdateOne) ClearUpdatedAt() *AutoUserExampleUpdateOne {
	aueuo.mutation.ClearUpdatedAt()
	return aueuo
}

// SetDeletedAt sets the "deleted_at" field.
func (aueuo *AutoUserExampleUpdateOne) SetDeletedAt(t time.Time) *AutoUserExampleUpdateOne {
	aueuo.mutation.SetDeletedAt(t)
	return aueuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aueuo *AutoUserExampleUpdateOne) SetNillableDeletedAt(t *time.Time) *AutoUserExampleUpdateOne {
	if t != nil {
		aueuo.SetDeletedAt(*t)
	}
	return aueuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aueuo *AutoUserExampleUpdateOne) ClearDeletedAt() *AutoUserExampleUpdateOne {
	aueuo.mutation.ClearDeletedAt()
	return aueuo
}

// SetTestText sets the "test_text" field.
func (aueuo *AutoUserExampleUpdateOne) SetTestText(s string) *AutoUserExampleUpdateOne {
	aueuo.mutation.SetTestText(s)
	return aueuo
}

// SetNillableTestText sets the "test_text" field if the given value is not nil.
func (aueuo *AutoUserExampleUpdateOne) SetNillableTestText(s *string) *AutoUserExampleUpdateOne {
	if s != nil {
		aueuo.SetTestText(*s)
	}
	return aueuo
}

// ClearTestText clears the value of the "test_text" field.
func (aueuo *AutoUserExampleUpdateOne) ClearTestText() *AutoUserExampleUpdateOne {
	aueuo.mutation.ClearTestText()
	return aueuo
}

// SetTestBool sets the "test_bool" field.
func (aueuo *AutoUserExampleUpdateOne) SetTestBool(b bool) *AutoUserExampleUpdateOne {
	aueuo.mutation.SetTestBool(b)
	return aueuo
}

// SetNillableTestBool sets the "test_bool" field if the given value is not nil.
func (aueuo *AutoUserExampleUpdateOne) SetNillableTestBool(b *bool) *AutoUserExampleUpdateOne {
	if b != nil {
		aueuo.SetTestBool(*b)
	}
	return aueuo
}

// ClearTestBool clears the value of the "test_bool" field.
func (aueuo *AutoUserExampleUpdateOne) ClearTestBool() *AutoUserExampleUpdateOne {
	aueuo.mutation.ClearTestBool()
	return aueuo
}

// SetTestInt sets the "test_int" field.
func (aueuo *AutoUserExampleUpdateOne) SetTestInt(i int) *AutoUserExampleUpdateOne {
	aueuo.mutation.ResetTestInt()
	aueuo.mutation.SetTestInt(i)
	return aueuo
}

// SetNillableTestInt sets the "test_int" field if the given value is not nil.
func (aueuo *AutoUserExampleUpdateOne) SetNillableTestInt(i *int) *AutoUserExampleUpdateOne {
	if i != nil {
		aueuo.SetTestInt(*i)
	}
	return aueuo
}

// AddTestInt adds i to the "test_int" field.
func (aueuo *AutoUserExampleUpdateOne) AddTestInt(i int) *AutoUserExampleUpdateOne {
	aueuo.mutation.AddTestInt(i)
	return aueuo
}

// ClearTestInt clears the value of the "test_int" field.
func (aueuo *AutoUserExampleUpdateOne) ClearTestInt() *AutoUserExampleUpdateOne {
	aueuo.mutation.ClearTestInt()
	return aueuo
}

// Mutation returns the AutoUserExampleMutation object of the builder.
func (aueuo *AutoUserExampleUpdateOne) Mutation() *AutoUserExampleMutation {
	return aueuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aueuo *AutoUserExampleUpdateOne) Select(field string, fields ...string) *AutoUserExampleUpdateOne {
	aueuo.fields = append([]string{field}, fields...)
	return aueuo
}

// Save executes the query and returns the updated AutoUserExample entity.
func (aueuo *AutoUserExampleUpdateOne) Save(ctx context.Context) (*AutoUserExample, error) {
	var (
		err  error
		node *AutoUserExample
	)
	aueuo.defaults()
	if len(aueuo.hooks) == 0 {
		node, err = aueuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AutoUserExampleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aueuo.mutation = mutation
			node, err = aueuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aueuo.hooks) - 1; i >= 0; i-- {
			mut = aueuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aueuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aueuo *AutoUserExampleUpdateOne) SaveX(ctx context.Context) *AutoUserExample {
	node, err := aueuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aueuo *AutoUserExampleUpdateOne) Exec(ctx context.Context) error {
	_, err := aueuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aueuo *AutoUserExampleUpdateOne) ExecX(ctx context.Context) {
	if err := aueuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aueuo *AutoUserExampleUpdateOne) defaults() {
	if _, ok := aueuo.mutation.UpdatedAt(); !ok && !aueuo.mutation.UpdatedAtCleared() {
		v := autouserexample.UpdateDefaultUpdatedAt()
		aueuo.mutation.SetUpdatedAt(v)
	}
}

func (aueuo *AutoUserExampleUpdateOne) sqlSave(ctx context.Context) (_node *AutoUserExample, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   autouserexample.Table,
			Columns: autouserexample.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: autouserexample.FieldID,
			},
		},
	}
	id, ok := aueuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AutoUserExample.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aueuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, autouserexample.FieldID)
		for _, f := range fields {
			if !autouserexample.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != autouserexample.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aueuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aueuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: autouserexample.FieldUpdatedAt,
		})
	}
	if aueuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: autouserexample.FieldUpdatedAt,
		})
	}
	if value, ok := aueuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: autouserexample.FieldDeletedAt,
		})
	}
	if aueuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: autouserexample.FieldDeletedAt,
		})
	}
	if value, ok := aueuo.mutation.TestText(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: autouserexample.FieldTestText,
		})
	}
	if aueuo.mutation.TestTextCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: autouserexample.FieldTestText,
		})
	}
	if value, ok := aueuo.mutation.TestBool(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: autouserexample.FieldTestBool,
		})
	}
	if aueuo.mutation.TestBoolCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: autouserexample.FieldTestBool,
		})
	}
	if value, ok := aueuo.mutation.TestInt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: autouserexample.FieldTestInt,
		})
	}
	if value, ok := aueuo.mutation.AddedTestInt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: autouserexample.FieldTestInt,
		})
	}
	if aueuo.mutation.TestIntCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: autouserexample.FieldTestInt,
		})
	}
	_node = &AutoUserExample{config: aueuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aueuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{autouserexample.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
