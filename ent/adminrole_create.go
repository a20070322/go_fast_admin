// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/go_fast_admin/ent/adminmenus"
	"github.com/a20070322/go_fast_admin/ent/adminrole"
	"github.com/a20070322/go_fast_admin/ent/adminuser"
	"github.com/google/uuid"
)

// AdminRoleCreate is the builder for creating a AdminRole entity.
type AdminRoleCreate struct {
	config
	mutation *AdminRoleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (arc *AdminRoleCreate) SetCreatedAt(t time.Time) *AdminRoleCreate {
	arc.mutation.SetCreatedAt(t)
	return arc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (arc *AdminRoleCreate) SetNillableCreatedAt(t *time.Time) *AdminRoleCreate {
	if t != nil {
		arc.SetCreatedAt(*t)
	}
	return arc
}

// SetUpdatedAt sets the "updated_at" field.
func (arc *AdminRoleCreate) SetUpdatedAt(t time.Time) *AdminRoleCreate {
	arc.mutation.SetUpdatedAt(t)
	return arc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (arc *AdminRoleCreate) SetNillableUpdatedAt(t *time.Time) *AdminRoleCreate {
	if t != nil {
		arc.SetUpdatedAt(*t)
	}
	return arc
}

// SetDeletedAt sets the "deleted_at" field.
func (arc *AdminRoleCreate) SetDeletedAt(t time.Time) *AdminRoleCreate {
	arc.mutation.SetDeletedAt(t)
	return arc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (arc *AdminRoleCreate) SetNillableDeletedAt(t *time.Time) *AdminRoleCreate {
	if t != nil {
		arc.SetDeletedAt(*t)
	}
	return arc
}

// SetName sets the "name" field.
func (arc *AdminRoleCreate) SetName(s string) *AdminRoleCreate {
	arc.mutation.SetName(s)
	return arc
}

// SetIsEnable sets the "is_enable" field.
func (arc *AdminRoleCreate) SetIsEnable(b bool) *AdminRoleCreate {
	arc.mutation.SetIsEnable(b)
	return arc
}

// SetNillableIsEnable sets the "is_enable" field if the given value is not nil.
func (arc *AdminRoleCreate) SetNillableIsEnable(b *bool) *AdminRoleCreate {
	if b != nil {
		arc.SetIsEnable(*b)
	}
	return arc
}

// AddUserIDs adds the "user" edge to the AdminUser entity by IDs.
func (arc *AdminRoleCreate) AddUserIDs(ids ...uuid.UUID) *AdminRoleCreate {
	arc.mutation.AddUserIDs(ids...)
	return arc
}

// AddUser adds the "user" edges to the AdminUser entity.
func (arc *AdminRoleCreate) AddUser(a ...*AdminUser) *AdminRoleCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return arc.AddUserIDs(ids...)
}

// AddMenuIDs adds the "menu" edge to the AdminMenus entity by IDs.
func (arc *AdminRoleCreate) AddMenuIDs(ids ...int) *AdminRoleCreate {
	arc.mutation.AddMenuIDs(ids...)
	return arc
}

// AddMenu adds the "menu" edges to the AdminMenus entity.
func (arc *AdminRoleCreate) AddMenu(a ...*AdminMenus) *AdminRoleCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return arc.AddMenuIDs(ids...)
}

// Mutation returns the AdminRoleMutation object of the builder.
func (arc *AdminRoleCreate) Mutation() *AdminRoleMutation {
	return arc.mutation
}

// Save creates the AdminRole in the database.
func (arc *AdminRoleCreate) Save(ctx context.Context) (*AdminRole, error) {
	var (
		err  error
		node *AdminRole
	)
	arc.defaults()
	if len(arc.hooks) == 0 {
		if err = arc.check(); err != nil {
			return nil, err
		}
		node, err = arc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = arc.check(); err != nil {
				return nil, err
			}
			arc.mutation = mutation
			node, err = arc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(arc.hooks) - 1; i >= 0; i-- {
			mut = arc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, arc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (arc *AdminRoleCreate) SaveX(ctx context.Context) *AdminRole {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (arc *AdminRoleCreate) defaults() {
	if _, ok := arc.mutation.CreatedAt(); !ok {
		v := adminrole.DefaultCreatedAt()
		arc.mutation.SetCreatedAt(v)
	}
	if _, ok := arc.mutation.IsEnable(); !ok {
		v := adminrole.DefaultIsEnable
		arc.mutation.SetIsEnable(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arc *AdminRoleCreate) check() error {
	if _, ok := arc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := arc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	return nil
}

func (arc *AdminRoleCreate) sqlSave(ctx context.Context) (*AdminRole, error) {
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (arc *AdminRoleCreate) createSpec() (*AdminRole, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminRole{config: arc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: adminrole.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminrole.FieldID,
			},
		}
	)
	if value, ok := arc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrole.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := arc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrole.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := arc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrole.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := arc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminrole.FieldName,
		})
		_node.Name = value
	}
	if value, ok := arc.mutation.IsEnable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: adminrole.FieldIsEnable,
		})
		_node.IsEnable = value
	}
	if nodes := arc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.UserTable,
			Columns: adminrole.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adminuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := arc.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.MenuTable,
			Columns: adminrole.MenuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminmenus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdminRoleCreateBulk is the builder for creating many AdminRole entities in bulk.
type AdminRoleCreateBulk struct {
	config
	builders []*AdminRoleCreate
}

// Save creates the AdminRole entities in the database.
func (arcb *AdminRoleCreateBulk) Save(ctx context.Context) ([]*AdminRole, error) {
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*AdminRole, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *AdminRoleCreateBulk) SaveX(ctx context.Context) []*AdminRole {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
