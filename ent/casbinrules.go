// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/go_fast_admin/ent/casbinrules"
)

// CasbinRules is the model entity for the CasbinRules schema.
type CasbinRules struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Ptype holds the value of the "ptype" field.
	Ptype string `json:"ptype,omitempty"`
	// V0 holds the value of the "v0" field.
	V0 string `json:"v0,omitempty"`
	// V1 holds the value of the "v1" field.
	V1 string `json:"v1,omitempty"`
	// V2 holds the value of the "v2" field.
	V2 string `json:"v2,omitempty"`
	// V3 holds the value of the "v3" field.
	V3 string `json:"v3,omitempty"`
	// V4 holds the value of the "v4" field.
	V4 string `json:"v4,omitempty"`
	// V5 holds the value of the "v5" field.
	V5 string `json:"v5,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CasbinRules) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case casbinrules.FieldID:
			values[i] = new(sql.NullInt64)
		case casbinrules.FieldPtype, casbinrules.FieldV0, casbinrules.FieldV1, casbinrules.FieldV2, casbinrules.FieldV3, casbinrules.FieldV4, casbinrules.FieldV5:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CasbinRules", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CasbinRules fields.
func (cr *CasbinRules) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case casbinrules.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case casbinrules.FieldPtype:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ptype", values[i])
			} else if value.Valid {
				cr.Ptype = value.String
			}
		case casbinrules.FieldV0:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v0", values[i])
			} else if value.Valid {
				cr.V0 = value.String
			}
		case casbinrules.FieldV1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v1", values[i])
			} else if value.Valid {
				cr.V1 = value.String
			}
		case casbinrules.FieldV2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v2", values[i])
			} else if value.Valid {
				cr.V2 = value.String
			}
		case casbinrules.FieldV3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v3", values[i])
			} else if value.Valid {
				cr.V3 = value.String
			}
		case casbinrules.FieldV4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v4", values[i])
			} else if value.Valid {
				cr.V4 = value.String
			}
		case casbinrules.FieldV5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v5", values[i])
			} else if value.Valid {
				cr.V5 = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CasbinRules.
// Note that you need to call CasbinRules.Unwrap() before calling this method if this CasbinRules
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CasbinRules) Update() *CasbinRulesUpdateOne {
	return (&CasbinRulesClient{config: cr.config}).UpdateOne(cr)
}

// Unwrap unwraps the CasbinRules entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *CasbinRules) Unwrap() *CasbinRules {
	tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CasbinRules is not a transactional entity")
	}
	cr.config.driver = tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CasbinRules) String() string {
	var builder strings.Builder
	builder.WriteString("CasbinRules(")
	builder.WriteString(fmt.Sprintf("id=%v", cr.ID))
	builder.WriteString(", ptype=")
	builder.WriteString(cr.Ptype)
	builder.WriteString(", v0=")
	builder.WriteString(cr.V0)
	builder.WriteString(", v1=")
	builder.WriteString(cr.V1)
	builder.WriteString(", v2=")
	builder.WriteString(cr.V2)
	builder.WriteString(", v3=")
	builder.WriteString(cr.V3)
	builder.WriteString(", v4=")
	builder.WriteString(cr.V4)
	builder.WriteString(", v5=")
	builder.WriteString(cr.V5)
	builder.WriteByte(')')
	return builder.String()
}

// CasbinRulesSlice is a parsable slice of CasbinRules.
type CasbinRulesSlice []*CasbinRules

func (cr CasbinRulesSlice) config(cfg config) {
	for _i := range cr {
		cr[_i].config = cfg
	}
}
