// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/go_fast_admin/ent/adminmenus"
	"github.com/a20070322/go_fast_admin/ent/adminrole"
	"github.com/a20070322/go_fast_admin/ent/adminuser"
	"github.com/a20070322/go_fast_admin/ent/predicate"
	"github.com/google/uuid"
)

// AdminRoleUpdate is the builder for updating AdminRole entities.
type AdminRoleUpdate struct {
	config
	hooks    []Hook
	mutation *AdminRoleMutation
}

// Where adds a new predicate for the AdminRoleUpdate builder.
func (aru *AdminRoleUpdate) Where(ps ...predicate.AdminRole) *AdminRoleUpdate {
	aru.mutation.predicates = append(aru.mutation.predicates, ps...)
	return aru
}

// SetUpdatedAt sets the "updated_at" field.
func (aru *AdminRoleUpdate) SetUpdatedAt(t time.Time) *AdminRoleUpdate {
	aru.mutation.SetUpdatedAt(t)
	return aru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aru *AdminRoleUpdate) ClearUpdatedAt() *AdminRoleUpdate {
	aru.mutation.ClearUpdatedAt()
	return aru
}

// SetDeletedAt sets the "deleted_at" field.
func (aru *AdminRoleUpdate) SetDeletedAt(t time.Time) *AdminRoleUpdate {
	aru.mutation.SetDeletedAt(t)
	return aru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aru *AdminRoleUpdate) SetNillableDeletedAt(t *time.Time) *AdminRoleUpdate {
	if t != nil {
		aru.SetDeletedAt(*t)
	}
	return aru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aru *AdminRoleUpdate) ClearDeletedAt() *AdminRoleUpdate {
	aru.mutation.ClearDeletedAt()
	return aru
}

// SetName sets the "name" field.
func (aru *AdminRoleUpdate) SetName(s string) *AdminRoleUpdate {
	aru.mutation.SetName(s)
	return aru
}

// SetIsEnable sets the "is_enable" field.
func (aru *AdminRoleUpdate) SetIsEnable(b bool) *AdminRoleUpdate {
	aru.mutation.SetIsEnable(b)
	return aru
}

// SetNillableIsEnable sets the "is_enable" field if the given value is not nil.
func (aru *AdminRoleUpdate) SetNillableIsEnable(b *bool) *AdminRoleUpdate {
	if b != nil {
		aru.SetIsEnable(*b)
	}
	return aru
}

// ClearIsEnable clears the value of the "is_enable" field.
func (aru *AdminRoleUpdate) ClearIsEnable() *AdminRoleUpdate {
	aru.mutation.ClearIsEnable()
	return aru
}

// AddUserIDs adds the "user" edge to the AdminUser entity by IDs.
func (aru *AdminRoleUpdate) AddUserIDs(ids ...uuid.UUID) *AdminRoleUpdate {
	aru.mutation.AddUserIDs(ids...)
	return aru
}

// AddUser adds the "user" edges to the AdminUser entity.
func (aru *AdminRoleUpdate) AddUser(a ...*AdminUser) *AdminRoleUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.AddUserIDs(ids...)
}

// AddMenuIDs adds the "menu" edge to the AdminMenus entity by IDs.
func (aru *AdminRoleUpdate) AddMenuIDs(ids ...int) *AdminRoleUpdate {
	aru.mutation.AddMenuIDs(ids...)
	return aru
}

// AddMenu adds the "menu" edges to the AdminMenus entity.
func (aru *AdminRoleUpdate) AddMenu(a ...*AdminMenus) *AdminRoleUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.AddMenuIDs(ids...)
}

// Mutation returns the AdminRoleMutation object of the builder.
func (aru *AdminRoleUpdate) Mutation() *AdminRoleMutation {
	return aru.mutation
}

// ClearUser clears all "user" edges to the AdminUser entity.
func (aru *AdminRoleUpdate) ClearUser() *AdminRoleUpdate {
	aru.mutation.ClearUser()
	return aru
}

// RemoveUserIDs removes the "user" edge to AdminUser entities by IDs.
func (aru *AdminRoleUpdate) RemoveUserIDs(ids ...uuid.UUID) *AdminRoleUpdate {
	aru.mutation.RemoveUserIDs(ids...)
	return aru
}

// RemoveUser removes "user" edges to AdminUser entities.
func (aru *AdminRoleUpdate) RemoveUser(a ...*AdminUser) *AdminRoleUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.RemoveUserIDs(ids...)
}

// ClearMenu clears all "menu" edges to the AdminMenus entity.
func (aru *AdminRoleUpdate) ClearMenu() *AdminRoleUpdate {
	aru.mutation.ClearMenu()
	return aru
}

// RemoveMenuIDs removes the "menu" edge to AdminMenus entities by IDs.
func (aru *AdminRoleUpdate) RemoveMenuIDs(ids ...int) *AdminRoleUpdate {
	aru.mutation.RemoveMenuIDs(ids...)
	return aru
}

// RemoveMenu removes "menu" edges to AdminMenus entities.
func (aru *AdminRoleUpdate) RemoveMenu(a ...*AdminMenus) *AdminRoleUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.RemoveMenuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AdminRoleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aru.defaults()
	if len(aru.hooks) == 0 {
		affected, err = aru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aru.mutation = mutation
			affected, err = aru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aru.hooks) - 1; i >= 0; i-- {
			mut = aru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AdminRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AdminRoleUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AdminRoleUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aru *AdminRoleUpdate) defaults() {
	if _, ok := aru.mutation.UpdatedAt(); !ok && !aru.mutation.UpdatedAtCleared() {
		v := adminrole.UpdateDefaultUpdatedAt()
		aru.mutation.SetUpdatedAt(v)
	}
}

func (aru *AdminRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminrole.Table,
			Columns: adminrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminrole.FieldID,
			},
		},
	}
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrole.FieldUpdatedAt,
		})
	}
	if aru.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminrole.FieldUpdatedAt,
		})
	}
	if value, ok := aru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrole.FieldDeletedAt,
		})
	}
	if aru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminrole.FieldDeletedAt,
		})
	}
	if value, ok := aru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminrole.FieldName,
		})
	}
	if value, ok := aru.mutation.IsEnable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: adminrole.FieldIsEnable,
		})
	}
	if aru.mutation.IsEnableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: adminrole.FieldIsEnable,
		})
	}
	if aru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.UserTable,
			Columns: adminrole.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adminuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedUserIDs(); len(nodes) > 0 && !aru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.UserTable,
			Columns: adminrole.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adminuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.UserTable,
			Columns: adminrole.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adminuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aru.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.MenuTable,
			Columns: adminrole.MenuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminmenus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedMenuIDs(); len(nodes) > 0 && !aru.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.MenuTable,
			Columns: adminrole.MenuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminmenus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.MenuTable,
			Columns: adminrole.MenuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminmenus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminrole.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AdminRoleUpdateOne is the builder for updating a single AdminRole entity.
type AdminRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminRoleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (aruo *AdminRoleUpdateOne) SetUpdatedAt(t time.Time) *AdminRoleUpdateOne {
	aruo.mutation.SetUpdatedAt(t)
	return aruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aruo *AdminRoleUpdateOne) ClearUpdatedAt() *AdminRoleUpdateOne {
	aruo.mutation.ClearUpdatedAt()
	return aruo
}

// SetDeletedAt sets the "deleted_at" field.
func (aruo *AdminRoleUpdateOne) SetDeletedAt(t time.Time) *AdminRoleUpdateOne {
	aruo.mutation.SetDeletedAt(t)
	return aruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aruo *AdminRoleUpdateOne) SetNillableDeletedAt(t *time.Time) *AdminRoleUpdateOne {
	if t != nil {
		aruo.SetDeletedAt(*t)
	}
	return aruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aruo *AdminRoleUpdateOne) ClearDeletedAt() *AdminRoleUpdateOne {
	aruo.mutation.ClearDeletedAt()
	return aruo
}

// SetName sets the "name" field.
func (aruo *AdminRoleUpdateOne) SetName(s string) *AdminRoleUpdateOne {
	aruo.mutation.SetName(s)
	return aruo
}

// SetIsEnable sets the "is_enable" field.
func (aruo *AdminRoleUpdateOne) SetIsEnable(b bool) *AdminRoleUpdateOne {
	aruo.mutation.SetIsEnable(b)
	return aruo
}

// SetNillableIsEnable sets the "is_enable" field if the given value is not nil.
func (aruo *AdminRoleUpdateOne) SetNillableIsEnable(b *bool) *AdminRoleUpdateOne {
	if b != nil {
		aruo.SetIsEnable(*b)
	}
	return aruo
}

// ClearIsEnable clears the value of the "is_enable" field.
func (aruo *AdminRoleUpdateOne) ClearIsEnable() *AdminRoleUpdateOne {
	aruo.mutation.ClearIsEnable()
	return aruo
}

// AddUserIDs adds the "user" edge to the AdminUser entity by IDs.
func (aruo *AdminRoleUpdateOne) AddUserIDs(ids ...uuid.UUID) *AdminRoleUpdateOne {
	aruo.mutation.AddUserIDs(ids...)
	return aruo
}

// AddUser adds the "user" edges to the AdminUser entity.
func (aruo *AdminRoleUpdateOne) AddUser(a ...*AdminUser) *AdminRoleUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.AddUserIDs(ids...)
}

// AddMenuIDs adds the "menu" edge to the AdminMenus entity by IDs.
func (aruo *AdminRoleUpdateOne) AddMenuIDs(ids ...int) *AdminRoleUpdateOne {
	aruo.mutation.AddMenuIDs(ids...)
	return aruo
}

// AddMenu adds the "menu" edges to the AdminMenus entity.
func (aruo *AdminRoleUpdateOne) AddMenu(a ...*AdminMenus) *AdminRoleUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.AddMenuIDs(ids...)
}

// Mutation returns the AdminRoleMutation object of the builder.
func (aruo *AdminRoleUpdateOne) Mutation() *AdminRoleMutation {
	return aruo.mutation
}

// ClearUser clears all "user" edges to the AdminUser entity.
func (aruo *AdminRoleUpdateOne) ClearUser() *AdminRoleUpdateOne {
	aruo.mutation.ClearUser()
	return aruo
}

// RemoveUserIDs removes the "user" edge to AdminUser entities by IDs.
func (aruo *AdminRoleUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *AdminRoleUpdateOne {
	aruo.mutation.RemoveUserIDs(ids...)
	return aruo
}

// RemoveUser removes "user" edges to AdminUser entities.
func (aruo *AdminRoleUpdateOne) RemoveUser(a ...*AdminUser) *AdminRoleUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.RemoveUserIDs(ids...)
}

// ClearMenu clears all "menu" edges to the AdminMenus entity.
func (aruo *AdminRoleUpdateOne) ClearMenu() *AdminRoleUpdateOne {
	aruo.mutation.ClearMenu()
	return aruo
}

// RemoveMenuIDs removes the "menu" edge to AdminMenus entities by IDs.
func (aruo *AdminRoleUpdateOne) RemoveMenuIDs(ids ...int) *AdminRoleUpdateOne {
	aruo.mutation.RemoveMenuIDs(ids...)
	return aruo
}

// RemoveMenu removes "menu" edges to AdminMenus entities.
func (aruo *AdminRoleUpdateOne) RemoveMenu(a ...*AdminMenus) *AdminRoleUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.RemoveMenuIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AdminRoleUpdateOne) Select(field string, fields ...string) *AdminRoleUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AdminRole entity.
func (aruo *AdminRoleUpdateOne) Save(ctx context.Context) (*AdminRole, error) {
	var (
		err  error
		node *AdminRole
	)
	aruo.defaults()
	if len(aruo.hooks) == 0 {
		node, err = aruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aruo.mutation = mutation
			node, err = aruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aruo.hooks) - 1; i >= 0; i-- {
			mut = aruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AdminRoleUpdateOne) SaveX(ctx context.Context) *AdminRole {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AdminRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AdminRoleUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aruo *AdminRoleUpdateOne) defaults() {
	if _, ok := aruo.mutation.UpdatedAt(); !ok && !aruo.mutation.UpdatedAtCleared() {
		v := adminrole.UpdateDefaultUpdatedAt()
		aruo.mutation.SetUpdatedAt(v)
	}
}

func (aruo *AdminRoleUpdateOne) sqlSave(ctx context.Context) (_node *AdminRole, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminrole.Table,
			Columns: adminrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminrole.FieldID,
			},
		},
	}
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AdminRole.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminrole.FieldID)
		for _, f := range fields {
			if !adminrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrole.FieldUpdatedAt,
		})
	}
	if aruo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminrole.FieldUpdatedAt,
		})
	}
	if value, ok := aruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrole.FieldDeletedAt,
		})
	}
	if aruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminrole.FieldDeletedAt,
		})
	}
	if value, ok := aruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminrole.FieldName,
		})
	}
	if value, ok := aruo.mutation.IsEnable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: adminrole.FieldIsEnable,
		})
	}
	if aruo.mutation.IsEnableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: adminrole.FieldIsEnable,
		})
	}
	if aruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.UserTable,
			Columns: adminrole.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adminuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedUserIDs(); len(nodes) > 0 && !aruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.UserTable,
			Columns: adminrole.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adminuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.UserTable,
			Columns: adminrole.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adminuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aruo.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.MenuTable,
			Columns: adminrole.MenuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminmenus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedMenuIDs(); len(nodes) > 0 && !aruo.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.MenuTable,
			Columns: adminrole.MenuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminmenus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adminrole.MenuTable,
			Columns: adminrole.MenuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminmenus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AdminRole{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminrole.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
