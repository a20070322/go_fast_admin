// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/go_fast_admin/ent/adminrole"
)

// AdminRole is the model entity for the AdminRole schema.
type AdminRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// Name holds the value of the "name" field.
	// 角色名称
	Name string `json:"name,omitempty"`
	// IsEnable holds the value of the "is_enable" field.
	// 是否启用
	IsEnable bool `json:"is_enable,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminRoleQuery when eager-loading is set.
	Edges AdminRoleEdges `json:"edges"`
}

// AdminRoleEdges holds the relations/edges for other nodes in the graph.
type AdminRoleEdges struct {
	// User holds the value of the user edge.
	User []*AdminUser `json:"user,omitempty"`
	// Menu holds the value of the menu edge.
	Menu []*AdminMenus `json:"menu,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e AdminRoleEdges) UserOrErr() ([]*AdminUser, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// MenuOrErr returns the Menu value or an error if the edge
// was not loaded in eager-loading.
func (e AdminRoleEdges) MenuOrErr() ([]*AdminMenus, error) {
	if e.loadedTypes[1] {
		return e.Menu, nil
	}
	return nil, &NotLoadedError{edge: "menu"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminRole) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminrole.FieldIsEnable:
			values[i] = new(sql.NullBool)
		case adminrole.FieldID:
			values[i] = new(sql.NullInt64)
		case adminrole.FieldName:
			values[i] = new(sql.NullString)
		case adminrole.FieldCreatedAt, adminrole.FieldUpdatedAt, adminrole.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AdminRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminRole fields.
func (ar *AdminRole) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ar.ID = int(value.Int64)
		case adminrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ar.CreatedAt = value.Time
			}
		case adminrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ar.UpdatedAt = value.Time
			}
		case adminrole.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ar.DeletedAt = value.Time
			}
		case adminrole.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ar.Name = value.String
			}
		case adminrole.FieldIsEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enable", values[i])
			} else if value.Valid {
				ar.IsEnable = value.Bool
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the AdminRole entity.
func (ar *AdminRole) QueryUser() *AdminUserQuery {
	return (&AdminRoleClient{config: ar.config}).QueryUser(ar)
}

// QueryMenu queries the "menu" edge of the AdminRole entity.
func (ar *AdminRole) QueryMenu() *AdminMenusQuery {
	return (&AdminRoleClient{config: ar.config}).QueryMenu(ar)
}

// Update returns a builder for updating this AdminRole.
// Note that you need to call AdminRole.Unwrap() before calling this method if this AdminRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *AdminRole) Update() *AdminRoleUpdateOne {
	return (&AdminRoleClient{config: ar.config}).UpdateOne(ar)
}

// Unwrap unwraps the AdminRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *AdminRole) Unwrap() *AdminRole {
	tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminRole is not a transactional entity")
	}
	ar.config.driver = tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *AdminRole) String() string {
	var builder strings.Builder
	builder.WriteString("AdminRole(")
	builder.WriteString(fmt.Sprintf("id=%v", ar.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ar.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ar.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(ar.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(ar.Name)
	builder.WriteString(", is_enable=")
	builder.WriteString(fmt.Sprintf("%v", ar.IsEnable))
	builder.WriteByte(')')
	return builder.String()
}

// AdminRoles is a parsable slice of AdminRole.
type AdminRoles []*AdminRole

func (ar AdminRoles) config(cfg config) {
	for _i := range ar {
		ar[_i].config = cfg
	}
}
