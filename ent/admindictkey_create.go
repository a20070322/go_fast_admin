// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/go_fast_admin/ent/admindict"
	"github.com/a20070322/go_fast_admin/ent/admindictkey"
)

// AdminDictKeyCreate is the builder for creating a AdminDictKey entity.
type AdminDictKeyCreate struct {
	config
	mutation *AdminDictKeyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (adkc *AdminDictKeyCreate) SetCreatedAt(t time.Time) *AdminDictKeyCreate {
	adkc.mutation.SetCreatedAt(t)
	return adkc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (adkc *AdminDictKeyCreate) SetNillableCreatedAt(t *time.Time) *AdminDictKeyCreate {
	if t != nil {
		adkc.SetCreatedAt(*t)
	}
	return adkc
}

// SetUpdatedAt sets the "updated_at" field.
func (adkc *AdminDictKeyCreate) SetUpdatedAt(t time.Time) *AdminDictKeyCreate {
	adkc.mutation.SetUpdatedAt(t)
	return adkc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (adkc *AdminDictKeyCreate) SetNillableUpdatedAt(t *time.Time) *AdminDictKeyCreate {
	if t != nil {
		adkc.SetUpdatedAt(*t)
	}
	return adkc
}

// SetDeletedAt sets the "deleted_at" field.
func (adkc *AdminDictKeyCreate) SetDeletedAt(t time.Time) *AdminDictKeyCreate {
	adkc.mutation.SetDeletedAt(t)
	return adkc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (adkc *AdminDictKeyCreate) SetNillableDeletedAt(t *time.Time) *AdminDictKeyCreate {
	if t != nil {
		adkc.SetDeletedAt(*t)
	}
	return adkc
}

// SetDictLabel sets the "dict_label" field.
func (adkc *AdminDictKeyCreate) SetDictLabel(s string) *AdminDictKeyCreate {
	adkc.mutation.SetDictLabel(s)
	return adkc
}

// SetDictCode sets the "dict_code" field.
func (adkc *AdminDictKeyCreate) SetDictCode(s string) *AdminDictKeyCreate {
	adkc.mutation.SetDictCode(s)
	return adkc
}

// SetSort sets the "sort" field.
func (adkc *AdminDictKeyCreate) SetSort(i int) *AdminDictKeyCreate {
	adkc.mutation.SetSort(i)
	return adkc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (adkc *AdminDictKeyCreate) SetNillableSort(i *int) *AdminDictKeyCreate {
	if i != nil {
		adkc.SetSort(*i)
	}
	return adkc
}

// SetRemarks sets the "remarks" field.
func (adkc *AdminDictKeyCreate) SetRemarks(s string) *AdminDictKeyCreate {
	adkc.mutation.SetRemarks(s)
	return adkc
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (adkc *AdminDictKeyCreate) SetNillableRemarks(s *string) *AdminDictKeyCreate {
	if s != nil {
		adkc.SetRemarks(*s)
	}
	return adkc
}

// SetIsEnable sets the "is_enable" field.
func (adkc *AdminDictKeyCreate) SetIsEnable(b bool) *AdminDictKeyCreate {
	adkc.mutation.SetIsEnable(b)
	return adkc
}

// SetPID sets the "P" edge to the AdminDict entity by ID.
func (adkc *AdminDictKeyCreate) SetPID(id int) *AdminDictKeyCreate {
	adkc.mutation.SetPID(id)
	return adkc
}

// SetNillablePID sets the "P" edge to the AdminDict entity by ID if the given value is not nil.
func (adkc *AdminDictKeyCreate) SetNillablePID(id *int) *AdminDictKeyCreate {
	if id != nil {
		adkc = adkc.SetPID(*id)
	}
	return adkc
}

// SetP sets the "P" edge to the AdminDict entity.
func (adkc *AdminDictKeyCreate) SetP(a *AdminDict) *AdminDictKeyCreate {
	return adkc.SetPID(a.ID)
}

// Mutation returns the AdminDictKeyMutation object of the builder.
func (adkc *AdminDictKeyCreate) Mutation() *AdminDictKeyMutation {
	return adkc.mutation
}

// Save creates the AdminDictKey in the database.
func (adkc *AdminDictKeyCreate) Save(ctx context.Context) (*AdminDictKey, error) {
	var (
		err  error
		node *AdminDictKey
	)
	adkc.defaults()
	if len(adkc.hooks) == 0 {
		if err = adkc.check(); err != nil {
			return nil, err
		}
		node, err = adkc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminDictKeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = adkc.check(); err != nil {
				return nil, err
			}
			adkc.mutation = mutation
			node, err = adkc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(adkc.hooks) - 1; i >= 0; i-- {
			mut = adkc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, adkc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (adkc *AdminDictKeyCreate) SaveX(ctx context.Context) *AdminDictKey {
	v, err := adkc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (adkc *AdminDictKeyCreate) defaults() {
	if _, ok := adkc.mutation.CreatedAt(); !ok {
		v := admindictkey.DefaultCreatedAt()
		adkc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adkc *AdminDictKeyCreate) check() error {
	if _, ok := adkc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := adkc.mutation.DictLabel(); !ok {
		return &ValidationError{Name: "dict_label", err: errors.New("ent: missing required field \"dict_label\"")}
	}
	if _, ok := adkc.mutation.DictCode(); !ok {
		return &ValidationError{Name: "dict_code", err: errors.New("ent: missing required field \"dict_code\"")}
	}
	if _, ok := adkc.mutation.IsEnable(); !ok {
		return &ValidationError{Name: "is_enable", err: errors.New("ent: missing required field \"is_enable\"")}
	}
	return nil
}

func (adkc *AdminDictKeyCreate) sqlSave(ctx context.Context) (*AdminDictKey, error) {
	_node, _spec := adkc.createSpec()
	if err := sqlgraph.CreateNode(ctx, adkc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (adkc *AdminDictKeyCreate) createSpec() (*AdminDictKey, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminDictKey{config: adkc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: admindictkey.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admindictkey.FieldID,
			},
		}
	)
	if value, ok := adkc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admindictkey.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := adkc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admindictkey.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := adkc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admindictkey.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := adkc.mutation.DictLabel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admindictkey.FieldDictLabel,
		})
		_node.DictLabel = value
	}
	if value, ok := adkc.mutation.DictCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admindictkey.FieldDictCode,
		})
		_node.DictCode = value
	}
	if value, ok := adkc.mutation.Sort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admindictkey.FieldSort,
		})
		_node.Sort = value
	}
	if value, ok := adkc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admindictkey.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := adkc.mutation.IsEnable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: admindictkey.FieldIsEnable,
		})
		_node.IsEnable = value
	}
	if nodes := adkc.mutation.PIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   admindictkey.PTable,
			Columns: []string{admindictkey.PColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admindict.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.admin_dict_key = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdminDictKeyCreateBulk is the builder for creating many AdminDictKey entities in bulk.
type AdminDictKeyCreateBulk struct {
	config
	builders []*AdminDictKeyCreate
}

// Save creates the AdminDictKey entities in the database.
func (adkcb *AdminDictKeyCreateBulk) Save(ctx context.Context) ([]*AdminDictKey, error) {
	specs := make([]*sqlgraph.CreateSpec, len(adkcb.builders))
	nodes := make([]*AdminDictKey, len(adkcb.builders))
	mutators := make([]Mutator, len(adkcb.builders))
	for i := range adkcb.builders {
		func(i int, root context.Context) {
			builder := adkcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminDictKeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, adkcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, adkcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, adkcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (adkcb *AdminDictKeyCreateBulk) SaveX(ctx context.Context) []*AdminDictKey {
	v, err := adkcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
