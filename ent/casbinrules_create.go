// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/go_fast_admin/ent/casbinrules"
)

// CasbinRulesCreate is the builder for creating a CasbinRules entity.
type CasbinRulesCreate struct {
	config
	mutation *CasbinRulesMutation
	hooks    []Hook
}

// SetPtype sets the "ptype" field.
func (crc *CasbinRulesCreate) SetPtype(s string) *CasbinRulesCreate {
	crc.mutation.SetPtype(s)
	return crc
}

// SetNillablePtype sets the "ptype" field if the given value is not nil.
func (crc *CasbinRulesCreate) SetNillablePtype(s *string) *CasbinRulesCreate {
	if s != nil {
		crc.SetPtype(*s)
	}
	return crc
}

// SetV0 sets the "v0" field.
func (crc *CasbinRulesCreate) SetV0(s string) *CasbinRulesCreate {
	crc.mutation.SetV0(s)
	return crc
}

// SetNillableV0 sets the "v0" field if the given value is not nil.
func (crc *CasbinRulesCreate) SetNillableV0(s *string) *CasbinRulesCreate {
	if s != nil {
		crc.SetV0(*s)
	}
	return crc
}

// SetV1 sets the "v1" field.
func (crc *CasbinRulesCreate) SetV1(s string) *CasbinRulesCreate {
	crc.mutation.SetV1(s)
	return crc
}

// SetNillableV1 sets the "v1" field if the given value is not nil.
func (crc *CasbinRulesCreate) SetNillableV1(s *string) *CasbinRulesCreate {
	if s != nil {
		crc.SetV1(*s)
	}
	return crc
}

// SetV2 sets the "v2" field.
func (crc *CasbinRulesCreate) SetV2(s string) *CasbinRulesCreate {
	crc.mutation.SetV2(s)
	return crc
}

// SetNillableV2 sets the "v2" field if the given value is not nil.
func (crc *CasbinRulesCreate) SetNillableV2(s *string) *CasbinRulesCreate {
	if s != nil {
		crc.SetV2(*s)
	}
	return crc
}

// SetV3 sets the "v3" field.
func (crc *CasbinRulesCreate) SetV3(s string) *CasbinRulesCreate {
	crc.mutation.SetV3(s)
	return crc
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (crc *CasbinRulesCreate) SetNillableV3(s *string) *CasbinRulesCreate {
	if s != nil {
		crc.SetV3(*s)
	}
	return crc
}

// SetV4 sets the "v4" field.
func (crc *CasbinRulesCreate) SetV4(s string) *CasbinRulesCreate {
	crc.mutation.SetV4(s)
	return crc
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (crc *CasbinRulesCreate) SetNillableV4(s *string) *CasbinRulesCreate {
	if s != nil {
		crc.SetV4(*s)
	}
	return crc
}

// SetV5 sets the "v5" field.
func (crc *CasbinRulesCreate) SetV5(s string) *CasbinRulesCreate {
	crc.mutation.SetV5(s)
	return crc
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (crc *CasbinRulesCreate) SetNillableV5(s *string) *CasbinRulesCreate {
	if s != nil {
		crc.SetV5(*s)
	}
	return crc
}

// Mutation returns the CasbinRulesMutation object of the builder.
func (crc *CasbinRulesCreate) Mutation() *CasbinRulesMutation {
	return crc.mutation
}

// Save creates the CasbinRules in the database.
func (crc *CasbinRulesCreate) Save(ctx context.Context) (*CasbinRules, error) {
	var (
		err  error
		node *CasbinRules
	)
	crc.defaults()
	if len(crc.hooks) == 0 {
		if err = crc.check(); err != nil {
			return nil, err
		}
		node, err = crc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CasbinRulesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = crc.check(); err != nil {
				return nil, err
			}
			crc.mutation = mutation
			node, err = crc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(crc.hooks) - 1; i >= 0; i-- {
			mut = crc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, crc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (crc *CasbinRulesCreate) SaveX(ctx context.Context) *CasbinRules {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (crc *CasbinRulesCreate) defaults() {
	if _, ok := crc.mutation.Ptype(); !ok {
		v := casbinrules.DefaultPtype
		crc.mutation.SetPtype(v)
	}
	if _, ok := crc.mutation.V0(); !ok {
		v := casbinrules.DefaultV0
		crc.mutation.SetV0(v)
	}
	if _, ok := crc.mutation.V1(); !ok {
		v := casbinrules.DefaultV1
		crc.mutation.SetV1(v)
	}
	if _, ok := crc.mutation.V2(); !ok {
		v := casbinrules.DefaultV2
		crc.mutation.SetV2(v)
	}
	if _, ok := crc.mutation.V3(); !ok {
		v := casbinrules.DefaultV3
		crc.mutation.SetV3(v)
	}
	if _, ok := crc.mutation.V4(); !ok {
		v := casbinrules.DefaultV4
		crc.mutation.SetV4(v)
	}
	if _, ok := crc.mutation.V5(); !ok {
		v := casbinrules.DefaultV5
		crc.mutation.SetV5(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crc *CasbinRulesCreate) check() error {
	return nil
}

func (crc *CasbinRulesCreate) sqlSave(ctx context.Context) (*CasbinRules, error) {
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (crc *CasbinRulesCreate) createSpec() (*CasbinRules, *sqlgraph.CreateSpec) {
	var (
		_node = &CasbinRules{config: crc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: casbinrules.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: casbinrules.FieldID,
			},
		}
	)
	if value, ok := crc.mutation.Ptype(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldPtype,
		})
		_node.Ptype = value
	}
	if value, ok := crc.mutation.V0(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV0,
		})
		_node.V0 = value
	}
	if value, ok := crc.mutation.V1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV1,
		})
		_node.V1 = value
	}
	if value, ok := crc.mutation.V2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV2,
		})
		_node.V2 = value
	}
	if value, ok := crc.mutation.V3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV3,
		})
		_node.V3 = value
	}
	if value, ok := crc.mutation.V4(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV4,
		})
		_node.V4 = value
	}
	if value, ok := crc.mutation.V5(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV5,
		})
		_node.V5 = value
	}
	return _node, _spec
}

// CasbinRulesCreateBulk is the builder for creating many CasbinRules entities in bulk.
type CasbinRulesCreateBulk struct {
	config
	builders []*CasbinRulesCreate
}

// Save creates the CasbinRules entities in the database.
func (crcb *CasbinRulesCreateBulk) Save(ctx context.Context) ([]*CasbinRules, error) {
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*CasbinRules, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CasbinRulesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *CasbinRulesCreateBulk) SaveX(ctx context.Context) []*CasbinRules {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
