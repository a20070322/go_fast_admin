// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/a20070322/go_fast_admin/ent/migrate"
	"github.com/google/uuid"

	"github.com/a20070322/go_fast_admin/ent/admindict"
	"github.com/a20070322/go_fast_admin/ent/admindictkey"
	"github.com/a20070322/go_fast_admin/ent/adminmenus"
	"github.com/a20070322/go_fast_admin/ent/adminrole"
	"github.com/a20070322/go_fast_admin/ent/adminuser"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AdminDict is the client for interacting with the AdminDict builders.
	AdminDict *AdminDictClient
	// AdminDictKey is the client for interacting with the AdminDictKey builders.
	AdminDictKey *AdminDictKeyClient
	// AdminMenus is the client for interacting with the AdminMenus builders.
	AdminMenus *AdminMenusClient
	// AdminRole is the client for interacting with the AdminRole builders.
	AdminRole *AdminRoleClient
	// AdminUser is the client for interacting with the AdminUser builders.
	AdminUser *AdminUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AdminDict = NewAdminDictClient(c.config)
	c.AdminDictKey = NewAdminDictKeyClient(c.config)
	c.AdminMenus = NewAdminMenusClient(c.config)
	c.AdminRole = NewAdminRoleClient(c.config)
	c.AdminUser = NewAdminUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		AdminDict:    NewAdminDictClient(cfg),
		AdminDictKey: NewAdminDictKeyClient(cfg),
		AdminMenus:   NewAdminMenusClient(cfg),
		AdminRole:    NewAdminRoleClient(cfg),
		AdminUser:    NewAdminUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:       cfg,
		AdminDict:    NewAdminDictClient(cfg),
		AdminDictKey: NewAdminDictKeyClient(cfg),
		AdminMenus:   NewAdminMenusClient(cfg),
		AdminRole:    NewAdminRoleClient(cfg),
		AdminUser:    NewAdminUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AdminDict.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AdminDict.Use(hooks...)
	c.AdminDictKey.Use(hooks...)
	c.AdminMenus.Use(hooks...)
	c.AdminRole.Use(hooks...)
	c.AdminUser.Use(hooks...)
}

// AdminDictClient is a client for the AdminDict schema.
type AdminDictClient struct {
	config
}

// NewAdminDictClient returns a client for the AdminDict from the given config.
func NewAdminDictClient(c config) *AdminDictClient {
	return &AdminDictClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `admindict.Hooks(f(g(h())))`.
func (c *AdminDictClient) Use(hooks ...Hook) {
	c.hooks.AdminDict = append(c.hooks.AdminDict, hooks...)
}

// Create returns a create builder for AdminDict.
func (c *AdminDictClient) Create() *AdminDictCreate {
	mutation := newAdminDictMutation(c.config, OpCreate)
	return &AdminDictCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminDict entities.
func (c *AdminDictClient) CreateBulk(builders ...*AdminDictCreate) *AdminDictCreateBulk {
	return &AdminDictCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminDict.
func (c *AdminDictClient) Update() *AdminDictUpdate {
	mutation := newAdminDictMutation(c.config, OpUpdate)
	return &AdminDictUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminDictClient) UpdateOne(ad *AdminDict) *AdminDictUpdateOne {
	mutation := newAdminDictMutation(c.config, OpUpdateOne, withAdminDict(ad))
	return &AdminDictUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminDictClient) UpdateOneID(id int) *AdminDictUpdateOne {
	mutation := newAdminDictMutation(c.config, OpUpdateOne, withAdminDictID(id))
	return &AdminDictUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminDict.
func (c *AdminDictClient) Delete() *AdminDictDelete {
	mutation := newAdminDictMutation(c.config, OpDelete)
	return &AdminDictDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdminDictClient) DeleteOne(ad *AdminDict) *AdminDictDeleteOne {
	return c.DeleteOneID(ad.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdminDictClient) DeleteOneID(id int) *AdminDictDeleteOne {
	builder := c.Delete().Where(admindict.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminDictDeleteOne{builder}
}

// Query returns a query builder for AdminDict.
func (c *AdminDictClient) Query() *AdminDictQuery {
	return &AdminDictQuery{
		config: c.config,
	}
}

// Get returns a AdminDict entity by its id.
func (c *AdminDictClient) Get(ctx context.Context, id int) (*AdminDict, error) {
	return c.Query().Where(admindict.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminDictClient) GetX(ctx context.Context, id int) *AdminDict {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryKey queries the key edge of a AdminDict.
func (c *AdminDictClient) QueryKey(ad *AdminDict) *AdminDictKeyQuery {
	query := &AdminDictKeyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ad.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admindict.Table, admindict.FieldID, id),
			sqlgraph.To(admindictkey.Table, admindictkey.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admindict.KeyTable, admindict.KeyColumn),
		)
		fromV = sqlgraph.Neighbors(ad.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminDictClient) Hooks() []Hook {
	return c.hooks.AdminDict
}

// AdminDictKeyClient is a client for the AdminDictKey schema.
type AdminDictKeyClient struct {
	config
}

// NewAdminDictKeyClient returns a client for the AdminDictKey from the given config.
func NewAdminDictKeyClient(c config) *AdminDictKeyClient {
	return &AdminDictKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `admindictkey.Hooks(f(g(h())))`.
func (c *AdminDictKeyClient) Use(hooks ...Hook) {
	c.hooks.AdminDictKey = append(c.hooks.AdminDictKey, hooks...)
}

// Create returns a create builder for AdminDictKey.
func (c *AdminDictKeyClient) Create() *AdminDictKeyCreate {
	mutation := newAdminDictKeyMutation(c.config, OpCreate)
	return &AdminDictKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminDictKey entities.
func (c *AdminDictKeyClient) CreateBulk(builders ...*AdminDictKeyCreate) *AdminDictKeyCreateBulk {
	return &AdminDictKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminDictKey.
func (c *AdminDictKeyClient) Update() *AdminDictKeyUpdate {
	mutation := newAdminDictKeyMutation(c.config, OpUpdate)
	return &AdminDictKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminDictKeyClient) UpdateOne(adk *AdminDictKey) *AdminDictKeyUpdateOne {
	mutation := newAdminDictKeyMutation(c.config, OpUpdateOne, withAdminDictKey(adk))
	return &AdminDictKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminDictKeyClient) UpdateOneID(id int) *AdminDictKeyUpdateOne {
	mutation := newAdminDictKeyMutation(c.config, OpUpdateOne, withAdminDictKeyID(id))
	return &AdminDictKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminDictKey.
func (c *AdminDictKeyClient) Delete() *AdminDictKeyDelete {
	mutation := newAdminDictKeyMutation(c.config, OpDelete)
	return &AdminDictKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdminDictKeyClient) DeleteOne(adk *AdminDictKey) *AdminDictKeyDeleteOne {
	return c.DeleteOneID(adk.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdminDictKeyClient) DeleteOneID(id int) *AdminDictKeyDeleteOne {
	builder := c.Delete().Where(admindictkey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminDictKeyDeleteOne{builder}
}

// Query returns a query builder for AdminDictKey.
func (c *AdminDictKeyClient) Query() *AdminDictKeyQuery {
	return &AdminDictKeyQuery{
		config: c.config,
	}
}

// Get returns a AdminDictKey entity by its id.
func (c *AdminDictKeyClient) Get(ctx context.Context, id int) (*AdminDictKey, error) {
	return c.Query().Where(admindictkey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminDictKeyClient) GetX(ctx context.Context, id int) *AdminDictKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryP queries the P edge of a AdminDictKey.
func (c *AdminDictKeyClient) QueryP(adk *AdminDictKey) *AdminDictQuery {
	query := &AdminDictQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := adk.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admindictkey.Table, admindictkey.FieldID, id),
			sqlgraph.To(admindict.Table, admindict.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, admindictkey.PTable, admindictkey.PColumn),
		)
		fromV = sqlgraph.Neighbors(adk.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminDictKeyClient) Hooks() []Hook {
	return c.hooks.AdminDictKey
}

// AdminMenusClient is a client for the AdminMenus schema.
type AdminMenusClient struct {
	config
}

// NewAdminMenusClient returns a client for the AdminMenus from the given config.
func NewAdminMenusClient(c config) *AdminMenusClient {
	return &AdminMenusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminmenus.Hooks(f(g(h())))`.
func (c *AdminMenusClient) Use(hooks ...Hook) {
	c.hooks.AdminMenus = append(c.hooks.AdminMenus, hooks...)
}

// Create returns a create builder for AdminMenus.
func (c *AdminMenusClient) Create() *AdminMenusCreate {
	mutation := newAdminMenusMutation(c.config, OpCreate)
	return &AdminMenusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminMenus entities.
func (c *AdminMenusClient) CreateBulk(builders ...*AdminMenusCreate) *AdminMenusCreateBulk {
	return &AdminMenusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminMenus.
func (c *AdminMenusClient) Update() *AdminMenusUpdate {
	mutation := newAdminMenusMutation(c.config, OpUpdate)
	return &AdminMenusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminMenusClient) UpdateOne(am *AdminMenus) *AdminMenusUpdateOne {
	mutation := newAdminMenusMutation(c.config, OpUpdateOne, withAdminMenus(am))
	return &AdminMenusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminMenusClient) UpdateOneID(id int) *AdminMenusUpdateOne {
	mutation := newAdminMenusMutation(c.config, OpUpdateOne, withAdminMenusID(id))
	return &AdminMenusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminMenus.
func (c *AdminMenusClient) Delete() *AdminMenusDelete {
	mutation := newAdminMenusMutation(c.config, OpDelete)
	return &AdminMenusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdminMenusClient) DeleteOne(am *AdminMenus) *AdminMenusDeleteOne {
	return c.DeleteOneID(am.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdminMenusClient) DeleteOneID(id int) *AdminMenusDeleteOne {
	builder := c.Delete().Where(adminmenus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminMenusDeleteOne{builder}
}

// Query returns a query builder for AdminMenus.
func (c *AdminMenusClient) Query() *AdminMenusQuery {
	return &AdminMenusQuery{
		config: c.config,
	}
}

// Get returns a AdminMenus entity by its id.
func (c *AdminMenusClient) Get(ctx context.Context, id int) (*AdminMenus, error) {
	return c.Query().Where(adminmenus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminMenusClient) GetX(ctx context.Context, id int) *AdminMenus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRole queries the role edge of a AdminMenus.
func (c *AdminMenusClient) QueryRole(am *AdminMenus) *AdminRoleQuery {
	query := &AdminRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := am.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminmenus.Table, adminmenus.FieldID, id),
			sqlgraph.To(adminrole.Table, adminrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, adminmenus.RoleTable, adminmenus.RolePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(am.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminMenusClient) Hooks() []Hook {
	return c.hooks.AdminMenus
}

// AdminRoleClient is a client for the AdminRole schema.
type AdminRoleClient struct {
	config
}

// NewAdminRoleClient returns a client for the AdminRole from the given config.
func NewAdminRoleClient(c config) *AdminRoleClient {
	return &AdminRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminrole.Hooks(f(g(h())))`.
func (c *AdminRoleClient) Use(hooks ...Hook) {
	c.hooks.AdminRole = append(c.hooks.AdminRole, hooks...)
}

// Create returns a create builder for AdminRole.
func (c *AdminRoleClient) Create() *AdminRoleCreate {
	mutation := newAdminRoleMutation(c.config, OpCreate)
	return &AdminRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminRole entities.
func (c *AdminRoleClient) CreateBulk(builders ...*AdminRoleCreate) *AdminRoleCreateBulk {
	return &AdminRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminRole.
func (c *AdminRoleClient) Update() *AdminRoleUpdate {
	mutation := newAdminRoleMutation(c.config, OpUpdate)
	return &AdminRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminRoleClient) UpdateOne(ar *AdminRole) *AdminRoleUpdateOne {
	mutation := newAdminRoleMutation(c.config, OpUpdateOne, withAdminRole(ar))
	return &AdminRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminRoleClient) UpdateOneID(id int) *AdminRoleUpdateOne {
	mutation := newAdminRoleMutation(c.config, OpUpdateOne, withAdminRoleID(id))
	return &AdminRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminRole.
func (c *AdminRoleClient) Delete() *AdminRoleDelete {
	mutation := newAdminRoleMutation(c.config, OpDelete)
	return &AdminRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdminRoleClient) DeleteOne(ar *AdminRole) *AdminRoleDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdminRoleClient) DeleteOneID(id int) *AdminRoleDeleteOne {
	builder := c.Delete().Where(adminrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminRoleDeleteOne{builder}
}

// Query returns a query builder for AdminRole.
func (c *AdminRoleClient) Query() *AdminRoleQuery {
	return &AdminRoleQuery{
		config: c.config,
	}
}

// Get returns a AdminRole entity by its id.
func (c *AdminRoleClient) Get(ctx context.Context, id int) (*AdminRole, error) {
	return c.Query().Where(adminrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminRoleClient) GetX(ctx context.Context, id int) *AdminRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a AdminRole.
func (c *AdminRoleClient) QueryUser(ar *AdminRole) *AdminUserQuery {
	query := &AdminUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminrole.Table, adminrole.FieldID, id),
			sqlgraph.To(adminuser.Table, adminuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, adminrole.UserTable, adminrole.UserPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMenu queries the menu edge of a AdminRole.
func (c *AdminRoleClient) QueryMenu(ar *AdminRole) *AdminMenusQuery {
	query := &AdminMenusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminrole.Table, adminrole.FieldID, id),
			sqlgraph.To(adminmenus.Table, adminmenus.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, adminrole.MenuTable, adminrole.MenuPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminRoleClient) Hooks() []Hook {
	return c.hooks.AdminRole
}

// AdminUserClient is a client for the AdminUser schema.
type AdminUserClient struct {
	config
}

// NewAdminUserClient returns a client for the AdminUser from the given config.
func NewAdminUserClient(c config) *AdminUserClient {
	return &AdminUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminuser.Hooks(f(g(h())))`.
func (c *AdminUserClient) Use(hooks ...Hook) {
	c.hooks.AdminUser = append(c.hooks.AdminUser, hooks...)
}

// Create returns a create builder for AdminUser.
func (c *AdminUserClient) Create() *AdminUserCreate {
	mutation := newAdminUserMutation(c.config, OpCreate)
	return &AdminUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminUser entities.
func (c *AdminUserClient) CreateBulk(builders ...*AdminUserCreate) *AdminUserCreateBulk {
	return &AdminUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminUser.
func (c *AdminUserClient) Update() *AdminUserUpdate {
	mutation := newAdminUserMutation(c.config, OpUpdate)
	return &AdminUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminUserClient) UpdateOne(au *AdminUser) *AdminUserUpdateOne {
	mutation := newAdminUserMutation(c.config, OpUpdateOne, withAdminUser(au))
	return &AdminUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminUserClient) UpdateOneID(id uuid.UUID) *AdminUserUpdateOne {
	mutation := newAdminUserMutation(c.config, OpUpdateOne, withAdminUserID(id))
	return &AdminUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminUser.
func (c *AdminUserClient) Delete() *AdminUserDelete {
	mutation := newAdminUserMutation(c.config, OpDelete)
	return &AdminUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdminUserClient) DeleteOne(au *AdminUser) *AdminUserDeleteOne {
	return c.DeleteOneID(au.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdminUserClient) DeleteOneID(id uuid.UUID) *AdminUserDeleteOne {
	builder := c.Delete().Where(adminuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminUserDeleteOne{builder}
}

// Query returns a query builder for AdminUser.
func (c *AdminUserClient) Query() *AdminUserQuery {
	return &AdminUserQuery{
		config: c.config,
	}
}

// Get returns a AdminUser entity by its id.
func (c *AdminUserClient) Get(ctx context.Context, id uuid.UUID) (*AdminUser, error) {
	return c.Query().Where(adminuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminUserClient) GetX(ctx context.Context, id uuid.UUID) *AdminUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRole queries the role edge of a AdminUser.
func (c *AdminUserClient) QueryRole(au *AdminUser) *AdminRoleQuery {
	query := &AdminRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminuser.Table, adminuser.FieldID, id),
			sqlgraph.To(adminrole.Table, adminrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, adminuser.RoleTable, adminuser.RolePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminUserClient) Hooks() []Hook {
	return c.hooks.AdminUser
}
