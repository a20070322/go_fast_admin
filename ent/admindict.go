// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/go_fast_admin/ent/admindict"
)

// AdminDict is the model entity for the AdminDict schema.
type AdminDict struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// DictType holds the value of the "dict_type" field.
	// 字典类型
	DictType string `json:"dict_type,omitempty"`
	// DictName holds the value of the "dict_name" field.
	// 字典名称
	DictName string `json:"dict_name,omitempty"`
	// Remarks holds the value of the "remarks" field.
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// IsEnable holds the value of the "is_enable" field.
	// 是否启用
	IsEnable bool `json:"is_enable,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminDictQuery when eager-loading is set.
	Edges AdminDictEdges `json:"edges"`
}

// AdminDictEdges holds the relations/edges for other nodes in the graph.
type AdminDictEdges struct {
	// Key holds the value of the key edge.
	Key []*AdminDictKey `json:"key,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// KeyOrErr returns the Key value or an error if the edge
// was not loaded in eager-loading.
func (e AdminDictEdges) KeyOrErr() ([]*AdminDictKey, error) {
	if e.loadedTypes[0] {
		return e.Key, nil
	}
	return nil, &NotLoadedError{edge: "key"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminDict) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case admindict.FieldIsEnable:
			values[i] = new(sql.NullBool)
		case admindict.FieldID:
			values[i] = new(sql.NullInt64)
		case admindict.FieldDictType, admindict.FieldDictName, admindict.FieldRemarks:
			values[i] = new(sql.NullString)
		case admindict.FieldCreatedAt, admindict.FieldUpdatedAt, admindict.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AdminDict", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminDict fields.
func (ad *AdminDict) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case admindict.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ad.ID = int(value.Int64)
		case admindict.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ad.CreatedAt = value.Time
			}
		case admindict.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ad.UpdatedAt = value.Time
			}
		case admindict.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ad.DeletedAt = value.Time
			}
		case admindict.FieldDictType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dict_type", values[i])
			} else if value.Valid {
				ad.DictType = value.String
			}
		case admindict.FieldDictName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dict_name", values[i])
			} else if value.Valid {
				ad.DictName = value.String
			}
		case admindict.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				ad.Remarks = value.String
			}
		case admindict.FieldIsEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enable", values[i])
			} else if value.Valid {
				ad.IsEnable = value.Bool
			}
		}
	}
	return nil
}

// QueryKey queries the "key" edge of the AdminDict entity.
func (ad *AdminDict) QueryKey() *AdminDictKeyQuery {
	return (&AdminDictClient{config: ad.config}).QueryKey(ad)
}

// Update returns a builder for updating this AdminDict.
// Note that you need to call AdminDict.Unwrap() before calling this method if this AdminDict
// was returned from a transaction, and the transaction was committed or rolled back.
func (ad *AdminDict) Update() *AdminDictUpdateOne {
	return (&AdminDictClient{config: ad.config}).UpdateOne(ad)
}

// Unwrap unwraps the AdminDict entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ad *AdminDict) Unwrap() *AdminDict {
	tx, ok := ad.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminDict is not a transactional entity")
	}
	ad.config.driver = tx.drv
	return ad
}

// String implements the fmt.Stringer.
func (ad *AdminDict) String() string {
	var builder strings.Builder
	builder.WriteString("AdminDict(")
	builder.WriteString(fmt.Sprintf("id=%v", ad.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ad.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ad.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(ad.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", dict_type=")
	builder.WriteString(ad.DictType)
	builder.WriteString(", dict_name=")
	builder.WriteString(ad.DictName)
	builder.WriteString(", remarks=")
	builder.WriteString(ad.Remarks)
	builder.WriteString(", is_enable=")
	builder.WriteString(fmt.Sprintf("%v", ad.IsEnable))
	builder.WriteByte(')')
	return builder.String()
}

// AdminDicts is a parsable slice of AdminDict.
type AdminDicts []*AdminDict

func (ad AdminDicts) config(cfg config) {
	for _i := range ad {
		ad[_i].config = cfg
	}
}
