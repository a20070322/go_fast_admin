// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/go_fast_admin/ent/admindict"
	"github.com/a20070322/go_fast_admin/ent/admindictkey"
	"github.com/a20070322/go_fast_admin/ent/predicate"
)

// AdminDictQuery is the builder for querying AdminDict entities.
type AdminDictQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AdminDict
	// eager-loading edges.
	withKey *AdminDictKeyQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AdminDictQuery builder.
func (adq *AdminDictQuery) Where(ps ...predicate.AdminDict) *AdminDictQuery {
	adq.predicates = append(adq.predicates, ps...)
	return adq
}

// Limit adds a limit step to the query.
func (adq *AdminDictQuery) Limit(limit int) *AdminDictQuery {
	adq.limit = &limit
	return adq
}

// Offset adds an offset step to the query.
func (adq *AdminDictQuery) Offset(offset int) *AdminDictQuery {
	adq.offset = &offset
	return adq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (adq *AdminDictQuery) Unique(unique bool) *AdminDictQuery {
	adq.unique = &unique
	return adq
}

// Order adds an order step to the query.
func (adq *AdminDictQuery) Order(o ...OrderFunc) *AdminDictQuery {
	adq.order = append(adq.order, o...)
	return adq
}

// QueryKey chains the current query on the "key" edge.
func (adq *AdminDictQuery) QueryKey() *AdminDictKeyQuery {
	query := &AdminDictKeyQuery{config: adq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := adq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := adq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(admindict.Table, admindict.FieldID, selector),
			sqlgraph.To(admindictkey.Table, admindictkey.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admindict.KeyTable, admindict.KeyColumn),
		)
		fromU = sqlgraph.SetNeighbors(adq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AdminDict entity from the query.
// Returns a *NotFoundError when no AdminDict was found.
func (adq *AdminDictQuery) First(ctx context.Context) (*AdminDict, error) {
	nodes, err := adq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{admindict.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (adq *AdminDictQuery) FirstX(ctx context.Context) *AdminDict {
	node, err := adq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AdminDict ID from the query.
// Returns a *NotFoundError when no AdminDict ID was found.
func (adq *AdminDictQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = adq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{admindict.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (adq *AdminDictQuery) FirstIDX(ctx context.Context) int {
	id, err := adq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AdminDict entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one AdminDict entity is not found.
// Returns a *NotFoundError when no AdminDict entities are found.
func (adq *AdminDictQuery) Only(ctx context.Context) (*AdminDict, error) {
	nodes, err := adq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{admindict.Label}
	default:
		return nil, &NotSingularError{admindict.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (adq *AdminDictQuery) OnlyX(ctx context.Context) *AdminDict {
	node, err := adq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AdminDict ID in the query.
// Returns a *NotSingularError when exactly one AdminDict ID is not found.
// Returns a *NotFoundError when no entities are found.
func (adq *AdminDictQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = adq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{admindict.Label}
	default:
		err = &NotSingularError{admindict.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (adq *AdminDictQuery) OnlyIDX(ctx context.Context) int {
	id, err := adq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AdminDicts.
func (adq *AdminDictQuery) All(ctx context.Context) ([]*AdminDict, error) {
	if err := adq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return adq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (adq *AdminDictQuery) AllX(ctx context.Context) []*AdminDict {
	nodes, err := adq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AdminDict IDs.
func (adq *AdminDictQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := adq.Select(admindict.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (adq *AdminDictQuery) IDsX(ctx context.Context) []int {
	ids, err := adq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (adq *AdminDictQuery) Count(ctx context.Context) (int, error) {
	if err := adq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return adq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (adq *AdminDictQuery) CountX(ctx context.Context) int {
	count, err := adq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (adq *AdminDictQuery) Exist(ctx context.Context) (bool, error) {
	if err := adq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return adq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (adq *AdminDictQuery) ExistX(ctx context.Context) bool {
	exist, err := adq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AdminDictQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (adq *AdminDictQuery) Clone() *AdminDictQuery {
	if adq == nil {
		return nil
	}
	return &AdminDictQuery{
		config:     adq.config,
		limit:      adq.limit,
		offset:     adq.offset,
		order:      append([]OrderFunc{}, adq.order...),
		predicates: append([]predicate.AdminDict{}, adq.predicates...),
		withKey:    adq.withKey.Clone(),
		// clone intermediate query.
		sql:  adq.sql.Clone(),
		path: adq.path,
	}
}

// WithKey tells the query-builder to eager-load the nodes that are connected to
// the "key" edge. The optional arguments are used to configure the query builder of the edge.
func (adq *AdminDictQuery) WithKey(opts ...func(*AdminDictKeyQuery)) *AdminDictQuery {
	query := &AdminDictKeyQuery{config: adq.config}
	for _, opt := range opts {
		opt(query)
	}
	adq.withKey = query
	return adq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AdminDict.Query().
//		GroupBy(admindict.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (adq *AdminDictQuery) GroupBy(field string, fields ...string) *AdminDictGroupBy {
	group := &AdminDictGroupBy{config: adq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := adq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return adq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AdminDict.Query().
//		Select(admindict.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (adq *AdminDictQuery) Select(field string, fields ...string) *AdminDictSelect {
	adq.fields = append([]string{field}, fields...)
	return &AdminDictSelect{AdminDictQuery: adq}
}

func (adq *AdminDictQuery) prepareQuery(ctx context.Context) error {
	for _, f := range adq.fields {
		if !admindict.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if adq.path != nil {
		prev, err := adq.path(ctx)
		if err != nil {
			return err
		}
		adq.sql = prev
	}
	return nil
}

func (adq *AdminDictQuery) sqlAll(ctx context.Context) ([]*AdminDict, error) {
	var (
		nodes       = []*AdminDict{}
		_spec       = adq.querySpec()
		loadedTypes = [1]bool{
			adq.withKey != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AdminDict{config: adq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, adq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := adq.withKey; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*AdminDict)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Key = []*AdminDictKey{}
		}
		query.withFKs = true
		query.Where(predicate.AdminDictKey(func(s *sql.Selector) {
			s.Where(sql.InValues(admindict.KeyColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.admin_dict_key
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "admin_dict_key" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "admin_dict_key" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Key = append(node.Edges.Key, n)
		}
	}

	return nodes, nil
}

func (adq *AdminDictQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := adq.querySpec()
	return sqlgraph.CountNodes(ctx, adq.driver, _spec)
}

func (adq *AdminDictQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := adq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (adq *AdminDictQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   admindict.Table,
			Columns: admindict.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admindict.FieldID,
			},
		},
		From:   adq.sql,
		Unique: true,
	}
	if unique := adq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := adq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, admindict.FieldID)
		for i := range fields {
			if fields[i] != admindict.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := adq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := adq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := adq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := adq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (adq *AdminDictQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(adq.driver.Dialect())
	t1 := builder.Table(admindict.Table)
	selector := builder.Select(t1.Columns(admindict.Columns...)...).From(t1)
	if adq.sql != nil {
		selector = adq.sql
		selector.Select(selector.Columns(admindict.Columns...)...)
	}
	for _, p := range adq.predicates {
		p(selector)
	}
	for _, p := range adq.order {
		p(selector)
	}
	if offset := adq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := adq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AdminDictGroupBy is the group-by builder for AdminDict entities.
type AdminDictGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (adgb *AdminDictGroupBy) Aggregate(fns ...AggregateFunc) *AdminDictGroupBy {
	adgb.fns = append(adgb.fns, fns...)
	return adgb
}

// Scan applies the group-by query and scans the result into the given value.
func (adgb *AdminDictGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := adgb.path(ctx)
	if err != nil {
		return err
	}
	adgb.sql = query
	return adgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (adgb *AdminDictGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := adgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (adgb *AdminDictGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(adgb.fields) > 1 {
		return nil, errors.New("ent: AdminDictGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := adgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (adgb *AdminDictGroupBy) StringsX(ctx context.Context) []string {
	v, err := adgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (adgb *AdminDictGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = adgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{admindict.Label}
	default:
		err = fmt.Errorf("ent: AdminDictGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (adgb *AdminDictGroupBy) StringX(ctx context.Context) string {
	v, err := adgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (adgb *AdminDictGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(adgb.fields) > 1 {
		return nil, errors.New("ent: AdminDictGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := adgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (adgb *AdminDictGroupBy) IntsX(ctx context.Context) []int {
	v, err := adgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (adgb *AdminDictGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = adgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{admindict.Label}
	default:
		err = fmt.Errorf("ent: AdminDictGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (adgb *AdminDictGroupBy) IntX(ctx context.Context) int {
	v, err := adgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (adgb *AdminDictGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(adgb.fields) > 1 {
		return nil, errors.New("ent: AdminDictGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := adgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (adgb *AdminDictGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := adgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (adgb *AdminDictGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = adgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{admindict.Label}
	default:
		err = fmt.Errorf("ent: AdminDictGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (adgb *AdminDictGroupBy) Float64X(ctx context.Context) float64 {
	v, err := adgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (adgb *AdminDictGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(adgb.fields) > 1 {
		return nil, errors.New("ent: AdminDictGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := adgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (adgb *AdminDictGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := adgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (adgb *AdminDictGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = adgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{admindict.Label}
	default:
		err = fmt.Errorf("ent: AdminDictGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (adgb *AdminDictGroupBy) BoolX(ctx context.Context) bool {
	v, err := adgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (adgb *AdminDictGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range adgb.fields {
		if !admindict.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := adgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := adgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (adgb *AdminDictGroupBy) sqlQuery() *sql.Selector {
	selector := adgb.sql
	columns := make([]string, 0, len(adgb.fields)+len(adgb.fns))
	columns = append(columns, adgb.fields...)
	for _, fn := range adgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(adgb.fields...)
}

// AdminDictSelect is the builder for selecting fields of AdminDict entities.
type AdminDictSelect struct {
	*AdminDictQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ads *AdminDictSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ads.prepareQuery(ctx); err != nil {
		return err
	}
	ads.sql = ads.AdminDictQuery.sqlQuery(ctx)
	return ads.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ads *AdminDictSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ads.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ads *AdminDictSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ads.fields) > 1 {
		return nil, errors.New("ent: AdminDictSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ads.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ads *AdminDictSelect) StringsX(ctx context.Context) []string {
	v, err := ads.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ads *AdminDictSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ads.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{admindict.Label}
	default:
		err = fmt.Errorf("ent: AdminDictSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ads *AdminDictSelect) StringX(ctx context.Context) string {
	v, err := ads.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ads *AdminDictSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ads.fields) > 1 {
		return nil, errors.New("ent: AdminDictSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ads.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ads *AdminDictSelect) IntsX(ctx context.Context) []int {
	v, err := ads.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ads *AdminDictSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ads.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{admindict.Label}
	default:
		err = fmt.Errorf("ent: AdminDictSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ads *AdminDictSelect) IntX(ctx context.Context) int {
	v, err := ads.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ads *AdminDictSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ads.fields) > 1 {
		return nil, errors.New("ent: AdminDictSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ads.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ads *AdminDictSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ads.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ads *AdminDictSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ads.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{admindict.Label}
	default:
		err = fmt.Errorf("ent: AdminDictSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ads *AdminDictSelect) Float64X(ctx context.Context) float64 {
	v, err := ads.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ads *AdminDictSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ads.fields) > 1 {
		return nil, errors.New("ent: AdminDictSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ads.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ads *AdminDictSelect) BoolsX(ctx context.Context) []bool {
	v, err := ads.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ads *AdminDictSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ads.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{admindict.Label}
	default:
		err = fmt.Errorf("ent: AdminDictSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ads *AdminDictSelect) BoolX(ctx context.Context) bool {
	v, err := ads.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ads *AdminDictSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ads.sqlQuery().Query()
	if err := ads.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ads *AdminDictSelect) sqlQuery() sql.Querier {
	selector := ads.sql
	selector.Select(selector.Columns(ads.fields...)...)
	return selector
}
