// Code generated by entc, DO NOT EDIT.

package autouserexample

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/go_fast_admin/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// TestText applies equality check predicate on the "test_text" field. It's identical to TestTextEQ.
func TestText(v string) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestText), v))
	})
}

// TestBool applies equality check predicate on the "test_bool" field. It's identical to TestBoolEQ.
func TestBool(v bool) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestBool), v))
	})
}

// TestInt applies equality check predicate on the "test_int" field. It's identical to TestIntEQ.
func TestInt(v int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestInt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AutoUserExample {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AutoUserExample(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AutoUserExample {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AutoUserExample(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AutoUserExample {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AutoUserExample(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AutoUserExample {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AutoUserExample(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.AutoUserExample {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AutoUserExample(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.AutoUserExample {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AutoUserExample(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// TestTextEQ applies the EQ predicate on the "test_text" field.
func TestTextEQ(v string) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestText), v))
	})
}

// TestTextNEQ applies the NEQ predicate on the "test_text" field.
func TestTextNEQ(v string) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTestText), v))
	})
}

// TestTextIn applies the In predicate on the "test_text" field.
func TestTextIn(vs ...string) predicate.AutoUserExample {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AutoUserExample(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTestText), v...))
	})
}

// TestTextNotIn applies the NotIn predicate on the "test_text" field.
func TestTextNotIn(vs ...string) predicate.AutoUserExample {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AutoUserExample(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTestText), v...))
	})
}

// TestTextGT applies the GT predicate on the "test_text" field.
func TestTextGT(v string) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTestText), v))
	})
}

// TestTextGTE applies the GTE predicate on the "test_text" field.
func TestTextGTE(v string) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTestText), v))
	})
}

// TestTextLT applies the LT predicate on the "test_text" field.
func TestTextLT(v string) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTestText), v))
	})
}

// TestTextLTE applies the LTE predicate on the "test_text" field.
func TestTextLTE(v string) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTestText), v))
	})
}

// TestTextContains applies the Contains predicate on the "test_text" field.
func TestTextContains(v string) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTestText), v))
	})
}

// TestTextHasPrefix applies the HasPrefix predicate on the "test_text" field.
func TestTextHasPrefix(v string) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTestText), v))
	})
}

// TestTextHasSuffix applies the HasSuffix predicate on the "test_text" field.
func TestTextHasSuffix(v string) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTestText), v))
	})
}

// TestTextIsNil applies the IsNil predicate on the "test_text" field.
func TestTextIsNil() predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTestText)))
	})
}

// TestTextNotNil applies the NotNil predicate on the "test_text" field.
func TestTextNotNil() predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTestText)))
	})
}

// TestTextEqualFold applies the EqualFold predicate on the "test_text" field.
func TestTextEqualFold(v string) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTestText), v))
	})
}

// TestTextContainsFold applies the ContainsFold predicate on the "test_text" field.
func TestTextContainsFold(v string) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTestText), v))
	})
}

// TestBoolEQ applies the EQ predicate on the "test_bool" field.
func TestBoolEQ(v bool) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestBool), v))
	})
}

// TestBoolNEQ applies the NEQ predicate on the "test_bool" field.
func TestBoolNEQ(v bool) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTestBool), v))
	})
}

// TestBoolIsNil applies the IsNil predicate on the "test_bool" field.
func TestBoolIsNil() predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTestBool)))
	})
}

// TestBoolNotNil applies the NotNil predicate on the "test_bool" field.
func TestBoolNotNil() predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTestBool)))
	})
}

// TestIntEQ applies the EQ predicate on the "test_int" field.
func TestIntEQ(v int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestInt), v))
	})
}

// TestIntNEQ applies the NEQ predicate on the "test_int" field.
func TestIntNEQ(v int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTestInt), v))
	})
}

// TestIntIn applies the In predicate on the "test_int" field.
func TestIntIn(vs ...int) predicate.AutoUserExample {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AutoUserExample(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTestInt), v...))
	})
}

// TestIntNotIn applies the NotIn predicate on the "test_int" field.
func TestIntNotIn(vs ...int) predicate.AutoUserExample {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AutoUserExample(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTestInt), v...))
	})
}

// TestIntGT applies the GT predicate on the "test_int" field.
func TestIntGT(v int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTestInt), v))
	})
}

// TestIntGTE applies the GTE predicate on the "test_int" field.
func TestIntGTE(v int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTestInt), v))
	})
}

// TestIntLT applies the LT predicate on the "test_int" field.
func TestIntLT(v int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTestInt), v))
	})
}

// TestIntLTE applies the LTE predicate on the "test_int" field.
func TestIntLTE(v int) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTestInt), v))
	})
}

// TestIntIsNil applies the IsNil predicate on the "test_int" field.
func TestIntIsNil() predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTestInt)))
	})
}

// TestIntNotNil applies the NotNil predicate on the "test_int" field.
func TestIntNotNil() predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTestInt)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AutoUserExample) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AutoUserExample) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AutoUserExample) predicate.AutoUserExample {
	return predicate.AutoUserExample(func(s *sql.Selector) {
		p(s.Not())
	})
}
