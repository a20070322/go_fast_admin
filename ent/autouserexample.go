// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a20070322/go_fast_admin/ent/autouserexample"
)

// AutoUserExample is the model entity for the AutoUserExample schema.
type AutoUserExample struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// TestText holds the value of the "test_text" field.
	// 文本域测试
	TestText string `json:"test_text,omitempty"`
	// TestBool holds the value of the "test_bool" field.
	// 布尔值测试
	TestBool bool `json:"test_bool,omitempty"`
	// TestInt holds the value of the "test_int" field.
	// 数字类型测试
	TestInt int `json:"test_int,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AutoUserExample) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case autouserexample.FieldTestBool:
			values[i] = new(sql.NullBool)
		case autouserexample.FieldID, autouserexample.FieldTestInt:
			values[i] = new(sql.NullInt64)
		case autouserexample.FieldTestText:
			values[i] = new(sql.NullString)
		case autouserexample.FieldCreatedAt, autouserexample.FieldUpdatedAt, autouserexample.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AutoUserExample", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AutoUserExample fields.
func (aue *AutoUserExample) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case autouserexample.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			aue.ID = int(value.Int64)
		case autouserexample.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aue.CreatedAt = value.Time
			}
		case autouserexample.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aue.UpdatedAt = value.Time
			}
		case autouserexample.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				aue.DeletedAt = value.Time
			}
		case autouserexample.FieldTestText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test_text", values[i])
			} else if value.Valid {
				aue.TestText = value.String
			}
		case autouserexample.FieldTestBool:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field test_bool", values[i])
			} else if value.Valid {
				aue.TestBool = value.Bool
			}
		case autouserexample.FieldTestInt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field test_int", values[i])
			} else if value.Valid {
				aue.TestInt = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AutoUserExample.
// Note that you need to call AutoUserExample.Unwrap() before calling this method if this AutoUserExample
// was returned from a transaction, and the transaction was committed or rolled back.
func (aue *AutoUserExample) Update() *AutoUserExampleUpdateOne {
	return (&AutoUserExampleClient{config: aue.config}).UpdateOne(aue)
}

// Unwrap unwraps the AutoUserExample entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aue *AutoUserExample) Unwrap() *AutoUserExample {
	tx, ok := aue.config.driver.(*txDriver)
	if !ok {
		panic("ent: AutoUserExample is not a transactional entity")
	}
	aue.config.driver = tx.drv
	return aue
}

// String implements the fmt.Stringer.
func (aue *AutoUserExample) String() string {
	var builder strings.Builder
	builder.WriteString("AutoUserExample(")
	builder.WriteString(fmt.Sprintf("id=%v", aue.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(aue.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(aue.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(aue.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", test_text=")
	builder.WriteString(aue.TestText)
	builder.WriteString(", test_bool=")
	builder.WriteString(fmt.Sprintf("%v", aue.TestBool))
	builder.WriteString(", test_int=")
	builder.WriteString(fmt.Sprintf("%v", aue.TestInt))
	builder.WriteByte(')')
	return builder.String()
}

// AutoUserExamples is a parsable slice of AutoUserExample.
type AutoUserExamples []*AutoUserExample

func (aue AutoUserExamples) config(cfg config) {
	for _i := range aue {
		aue[_i].config = cfg
	}
}
