// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/go_fast_admin/ent/casbinrules"
	"github.com/a20070322/go_fast_admin/ent/predicate"
)

// CasbinRulesQuery is the builder for querying CasbinRules entities.
type CasbinRulesQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.CasbinRules
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CasbinRulesQuery builder.
func (crq *CasbinRulesQuery) Where(ps ...predicate.CasbinRules) *CasbinRulesQuery {
	crq.predicates = append(crq.predicates, ps...)
	return crq
}

// Limit adds a limit step to the query.
func (crq *CasbinRulesQuery) Limit(limit int) *CasbinRulesQuery {
	crq.limit = &limit
	return crq
}

// Offset adds an offset step to the query.
func (crq *CasbinRulesQuery) Offset(offset int) *CasbinRulesQuery {
	crq.offset = &offset
	return crq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (crq *CasbinRulesQuery) Unique(unique bool) *CasbinRulesQuery {
	crq.unique = &unique
	return crq
}

// Order adds an order step to the query.
func (crq *CasbinRulesQuery) Order(o ...OrderFunc) *CasbinRulesQuery {
	crq.order = append(crq.order, o...)
	return crq
}

// First returns the first CasbinRules entity from the query.
// Returns a *NotFoundError when no CasbinRules was found.
func (crq *CasbinRulesQuery) First(ctx context.Context) (*CasbinRules, error) {
	nodes, err := crq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{casbinrules.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (crq *CasbinRulesQuery) FirstX(ctx context.Context) *CasbinRules {
	node, err := crq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CasbinRules ID from the query.
// Returns a *NotFoundError when no CasbinRules ID was found.
func (crq *CasbinRulesQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = crq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{casbinrules.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (crq *CasbinRulesQuery) FirstIDX(ctx context.Context) int {
	id, err := crq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CasbinRules entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one CasbinRules entity is not found.
// Returns a *NotFoundError when no CasbinRules entities are found.
func (crq *CasbinRulesQuery) Only(ctx context.Context) (*CasbinRules, error) {
	nodes, err := crq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{casbinrules.Label}
	default:
		return nil, &NotSingularError{casbinrules.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (crq *CasbinRulesQuery) OnlyX(ctx context.Context) *CasbinRules {
	node, err := crq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CasbinRules ID in the query.
// Returns a *NotSingularError when exactly one CasbinRules ID is not found.
// Returns a *NotFoundError when no entities are found.
func (crq *CasbinRulesQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = crq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{casbinrules.Label}
	default:
		err = &NotSingularError{casbinrules.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (crq *CasbinRulesQuery) OnlyIDX(ctx context.Context) int {
	id, err := crq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CasbinRulesSlice.
func (crq *CasbinRulesQuery) All(ctx context.Context) ([]*CasbinRules, error) {
	if err := crq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return crq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (crq *CasbinRulesQuery) AllX(ctx context.Context) []*CasbinRules {
	nodes, err := crq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CasbinRules IDs.
func (crq *CasbinRulesQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := crq.Select(casbinrules.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (crq *CasbinRulesQuery) IDsX(ctx context.Context) []int {
	ids, err := crq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (crq *CasbinRulesQuery) Count(ctx context.Context) (int, error) {
	if err := crq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return crq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (crq *CasbinRulesQuery) CountX(ctx context.Context) int {
	count, err := crq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (crq *CasbinRulesQuery) Exist(ctx context.Context) (bool, error) {
	if err := crq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return crq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (crq *CasbinRulesQuery) ExistX(ctx context.Context) bool {
	exist, err := crq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CasbinRulesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (crq *CasbinRulesQuery) Clone() *CasbinRulesQuery {
	if crq == nil {
		return nil
	}
	return &CasbinRulesQuery{
		config:     crq.config,
		limit:      crq.limit,
		offset:     crq.offset,
		order:      append([]OrderFunc{}, crq.order...),
		predicates: append([]predicate.CasbinRules{}, crq.predicates...),
		// clone intermediate query.
		sql:  crq.sql.Clone(),
		path: crq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Ptype string `json:"ptype,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CasbinRules.Query().
//		GroupBy(casbinrules.FieldPtype).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (crq *CasbinRulesQuery) GroupBy(field string, fields ...string) *CasbinRulesGroupBy {
	group := &CasbinRulesGroupBy{config: crq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := crq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return crq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Ptype string `json:"ptype,omitempty"`
//	}
//
//	client.CasbinRules.Query().
//		Select(casbinrules.FieldPtype).
//		Scan(ctx, &v)
//
func (crq *CasbinRulesQuery) Select(field string, fields ...string) *CasbinRulesSelect {
	crq.fields = append([]string{field}, fields...)
	return &CasbinRulesSelect{CasbinRulesQuery: crq}
}

func (crq *CasbinRulesQuery) prepareQuery(ctx context.Context) error {
	for _, f := range crq.fields {
		if !casbinrules.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if crq.path != nil {
		prev, err := crq.path(ctx)
		if err != nil {
			return err
		}
		crq.sql = prev
	}
	return nil
}

func (crq *CasbinRulesQuery) sqlAll(ctx context.Context) ([]*CasbinRules, error) {
	var (
		nodes = []*CasbinRules{}
		_spec = crq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &CasbinRules{config: crq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, crq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (crq *CasbinRulesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := crq.querySpec()
	return sqlgraph.CountNodes(ctx, crq.driver, _spec)
}

func (crq *CasbinRulesQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := crq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (crq *CasbinRulesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   casbinrules.Table,
			Columns: casbinrules.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: casbinrules.FieldID,
			},
		},
		From:   crq.sql,
		Unique: true,
	}
	if unique := crq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := crq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, casbinrules.FieldID)
		for i := range fields {
			if fields[i] != casbinrules.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := crq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := crq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := crq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := crq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (crq *CasbinRulesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(crq.driver.Dialect())
	t1 := builder.Table(casbinrules.Table)
	selector := builder.Select(t1.Columns(casbinrules.Columns...)...).From(t1)
	if crq.sql != nil {
		selector = crq.sql
		selector.Select(selector.Columns(casbinrules.Columns...)...)
	}
	for _, p := range crq.predicates {
		p(selector)
	}
	for _, p := range crq.order {
		p(selector)
	}
	if offset := crq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := crq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CasbinRulesGroupBy is the group-by builder for CasbinRules entities.
type CasbinRulesGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (crgb *CasbinRulesGroupBy) Aggregate(fns ...AggregateFunc) *CasbinRulesGroupBy {
	crgb.fns = append(crgb.fns, fns...)
	return crgb
}

// Scan applies the group-by query and scans the result into the given value.
func (crgb *CasbinRulesGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := crgb.path(ctx)
	if err != nil {
		return err
	}
	crgb.sql = query
	return crgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (crgb *CasbinRulesGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := crgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (crgb *CasbinRulesGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(crgb.fields) > 1 {
		return nil, errors.New("ent: CasbinRulesGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := crgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (crgb *CasbinRulesGroupBy) StringsX(ctx context.Context) []string {
	v, err := crgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (crgb *CasbinRulesGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = crgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{casbinrules.Label}
	default:
		err = fmt.Errorf("ent: CasbinRulesGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (crgb *CasbinRulesGroupBy) StringX(ctx context.Context) string {
	v, err := crgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (crgb *CasbinRulesGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(crgb.fields) > 1 {
		return nil, errors.New("ent: CasbinRulesGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := crgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (crgb *CasbinRulesGroupBy) IntsX(ctx context.Context) []int {
	v, err := crgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (crgb *CasbinRulesGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = crgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{casbinrules.Label}
	default:
		err = fmt.Errorf("ent: CasbinRulesGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (crgb *CasbinRulesGroupBy) IntX(ctx context.Context) int {
	v, err := crgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (crgb *CasbinRulesGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(crgb.fields) > 1 {
		return nil, errors.New("ent: CasbinRulesGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := crgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (crgb *CasbinRulesGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := crgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (crgb *CasbinRulesGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = crgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{casbinrules.Label}
	default:
		err = fmt.Errorf("ent: CasbinRulesGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (crgb *CasbinRulesGroupBy) Float64X(ctx context.Context) float64 {
	v, err := crgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (crgb *CasbinRulesGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(crgb.fields) > 1 {
		return nil, errors.New("ent: CasbinRulesGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := crgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (crgb *CasbinRulesGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := crgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (crgb *CasbinRulesGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = crgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{casbinrules.Label}
	default:
		err = fmt.Errorf("ent: CasbinRulesGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (crgb *CasbinRulesGroupBy) BoolX(ctx context.Context) bool {
	v, err := crgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (crgb *CasbinRulesGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range crgb.fields {
		if !casbinrules.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := crgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := crgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (crgb *CasbinRulesGroupBy) sqlQuery() *sql.Selector {
	selector := crgb.sql
	columns := make([]string, 0, len(crgb.fields)+len(crgb.fns))
	columns = append(columns, crgb.fields...)
	for _, fn := range crgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(crgb.fields...)
}

// CasbinRulesSelect is the builder for selecting fields of CasbinRules entities.
type CasbinRulesSelect struct {
	*CasbinRulesQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (crs *CasbinRulesSelect) Scan(ctx context.Context, v interface{}) error {
	if err := crs.prepareQuery(ctx); err != nil {
		return err
	}
	crs.sql = crs.CasbinRulesQuery.sqlQuery(ctx)
	return crs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (crs *CasbinRulesSelect) ScanX(ctx context.Context, v interface{}) {
	if err := crs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (crs *CasbinRulesSelect) Strings(ctx context.Context) ([]string, error) {
	if len(crs.fields) > 1 {
		return nil, errors.New("ent: CasbinRulesSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := crs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (crs *CasbinRulesSelect) StringsX(ctx context.Context) []string {
	v, err := crs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (crs *CasbinRulesSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = crs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{casbinrules.Label}
	default:
		err = fmt.Errorf("ent: CasbinRulesSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (crs *CasbinRulesSelect) StringX(ctx context.Context) string {
	v, err := crs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (crs *CasbinRulesSelect) Ints(ctx context.Context) ([]int, error) {
	if len(crs.fields) > 1 {
		return nil, errors.New("ent: CasbinRulesSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := crs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (crs *CasbinRulesSelect) IntsX(ctx context.Context) []int {
	v, err := crs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (crs *CasbinRulesSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = crs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{casbinrules.Label}
	default:
		err = fmt.Errorf("ent: CasbinRulesSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (crs *CasbinRulesSelect) IntX(ctx context.Context) int {
	v, err := crs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (crs *CasbinRulesSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(crs.fields) > 1 {
		return nil, errors.New("ent: CasbinRulesSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := crs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (crs *CasbinRulesSelect) Float64sX(ctx context.Context) []float64 {
	v, err := crs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (crs *CasbinRulesSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = crs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{casbinrules.Label}
	default:
		err = fmt.Errorf("ent: CasbinRulesSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (crs *CasbinRulesSelect) Float64X(ctx context.Context) float64 {
	v, err := crs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (crs *CasbinRulesSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(crs.fields) > 1 {
		return nil, errors.New("ent: CasbinRulesSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := crs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (crs *CasbinRulesSelect) BoolsX(ctx context.Context) []bool {
	v, err := crs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (crs *CasbinRulesSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = crs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{casbinrules.Label}
	default:
		err = fmt.Errorf("ent: CasbinRulesSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (crs *CasbinRulesSelect) BoolX(ctx context.Context) bool {
	v, err := crs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (crs *CasbinRulesSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := crs.sqlQuery().Query()
	if err := crs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (crs *CasbinRulesSelect) sqlQuery() sql.Querier {
	selector := crs.sql
	selector.Select(selector.Columns(crs.fields...)...)
	return selector
}
