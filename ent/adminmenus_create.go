// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/go_fast_admin/ent/adminmenus"
	"github.com/a20070322/go_fast_admin/ent/adminrole"
)

// AdminMenusCreate is the builder for creating a AdminMenus entity.
type AdminMenusCreate struct {
	config
	mutation *AdminMenusMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (amc *AdminMenusCreate) SetCreatedAt(t time.Time) *AdminMenusCreate {
	amc.mutation.SetCreatedAt(t)
	return amc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (amc *AdminMenusCreate) SetNillableCreatedAt(t *time.Time) *AdminMenusCreate {
	if t != nil {
		amc.SetCreatedAt(*t)
	}
	return amc
}

// SetUpdatedAt sets the "updated_at" field.
func (amc *AdminMenusCreate) SetUpdatedAt(t time.Time) *AdminMenusCreate {
	amc.mutation.SetUpdatedAt(t)
	return amc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (amc *AdminMenusCreate) SetNillableUpdatedAt(t *time.Time) *AdminMenusCreate {
	if t != nil {
		amc.SetUpdatedAt(*t)
	}
	return amc
}

// SetDeletedAt sets the "deleted_at" field.
func (amc *AdminMenusCreate) SetDeletedAt(t time.Time) *AdminMenusCreate {
	amc.mutation.SetDeletedAt(t)
	return amc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (amc *AdminMenusCreate) SetNillableDeletedAt(t *time.Time) *AdminMenusCreate {
	if t != nil {
		amc.SetDeletedAt(*t)
	}
	return amc
}

// SetName sets the "name" field.
func (amc *AdminMenusCreate) SetName(s string) *AdminMenusCreate {
	amc.mutation.SetName(s)
	return amc
}

// SetPath sets the "path" field.
func (amc *AdminMenusCreate) SetPath(s string) *AdminMenusCreate {
	amc.mutation.SetPath(s)
	return amc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (amc *AdminMenusCreate) SetNillablePath(s *string) *AdminMenusCreate {
	if s != nil {
		amc.SetPath(*s)
	}
	return amc
}

// SetPathAction sets the "path_action" field.
func (amc *AdminMenusCreate) SetPathAction(s string) *AdminMenusCreate {
	amc.mutation.SetPathAction(s)
	return amc
}

// SetNillablePathAction sets the "path_action" field if the given value is not nil.
func (amc *AdminMenusCreate) SetNillablePathAction(s *string) *AdminMenusCreate {
	if s != nil {
		amc.SetPathAction(*s)
	}
	return amc
}

// SetRouterPath sets the "router_path" field.
func (amc *AdminMenusCreate) SetRouterPath(s string) *AdminMenusCreate {
	amc.mutation.SetRouterPath(s)
	return amc
}

// SetNillableRouterPath sets the "router_path" field if the given value is not nil.
func (amc *AdminMenusCreate) SetNillableRouterPath(s *string) *AdminMenusCreate {
	if s != nil {
		amc.SetRouterPath(*s)
	}
	return amc
}

// SetIcon sets the "icon" field.
func (amc *AdminMenusCreate) SetIcon(s string) *AdminMenusCreate {
	amc.mutation.SetIcon(s)
	return amc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (amc *AdminMenusCreate) SetNillableIcon(s *string) *AdminMenusCreate {
	if s != nil {
		amc.SetIcon(*s)
	}
	return amc
}

// SetType sets the "type" field.
func (amc *AdminMenusCreate) SetType(i int8) *AdminMenusCreate {
	amc.mutation.SetType(i)
	return amc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (amc *AdminMenusCreate) SetNillableType(i *int8) *AdminMenusCreate {
	if i != nil {
		amc.SetType(*i)
	}
	return amc
}

// SetPowerStr sets the "power_str" field.
func (amc *AdminMenusCreate) SetPowerStr(s string) *AdminMenusCreate {
	amc.mutation.SetPowerStr(s)
	return amc
}

// SetNillablePowerStr sets the "power_str" field if the given value is not nil.
func (amc *AdminMenusCreate) SetNillablePowerStr(s *string) *AdminMenusCreate {
	if s != nil {
		amc.SetPowerStr(*s)
	}
	return amc
}

// SetSort sets the "sort" field.
func (amc *AdminMenusCreate) SetSort(i int) *AdminMenusCreate {
	amc.mutation.SetSort(i)
	return amc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (amc *AdminMenusCreate) SetNillableSort(i *int) *AdminMenusCreate {
	if i != nil {
		amc.SetSort(*i)
	}
	return amc
}

// SetFid sets the "fid" field.
func (amc *AdminMenusCreate) SetFid(i int) *AdminMenusCreate {
	amc.mutation.SetFid(i)
	return amc
}

// SetNillableFid sets the "fid" field if the given value is not nil.
func (amc *AdminMenusCreate) SetNillableFid(i *int) *AdminMenusCreate {
	if i != nil {
		amc.SetFid(*i)
	}
	return amc
}

// SetIsExternalLink sets the "is_external_link" field.
func (amc *AdminMenusCreate) SetIsExternalLink(b bool) *AdminMenusCreate {
	amc.mutation.SetIsExternalLink(b)
	return amc
}

// SetNillableIsExternalLink sets the "is_external_link" field if the given value is not nil.
func (amc *AdminMenusCreate) SetNillableIsExternalLink(b *bool) *AdminMenusCreate {
	if b != nil {
		amc.SetIsExternalLink(*b)
	}
	return amc
}

// SetIsShow sets the "is_show" field.
func (amc *AdminMenusCreate) SetIsShow(b bool) *AdminMenusCreate {
	amc.mutation.SetIsShow(b)
	return amc
}

// SetNillableIsShow sets the "is_show" field if the given value is not nil.
func (amc *AdminMenusCreate) SetNillableIsShow(b *bool) *AdminMenusCreate {
	if b != nil {
		amc.SetIsShow(*b)
	}
	return amc
}

// SetIsEnable sets the "is_enable" field.
func (amc *AdminMenusCreate) SetIsEnable(b bool) *AdminMenusCreate {
	amc.mutation.SetIsEnable(b)
	return amc
}

// SetNillableIsEnable sets the "is_enable" field if the given value is not nil.
func (amc *AdminMenusCreate) SetNillableIsEnable(b *bool) *AdminMenusCreate {
	if b != nil {
		amc.SetIsEnable(*b)
	}
	return amc
}

// AddRoleIDs adds the "role" edge to the AdminRole entity by IDs.
func (amc *AdminMenusCreate) AddRoleIDs(ids ...int) *AdminMenusCreate {
	amc.mutation.AddRoleIDs(ids...)
	return amc
}

// AddRole adds the "role" edges to the AdminRole entity.
func (amc *AdminMenusCreate) AddRole(a ...*AdminRole) *AdminMenusCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amc.AddRoleIDs(ids...)
}

// Mutation returns the AdminMenusMutation object of the builder.
func (amc *AdminMenusCreate) Mutation() *AdminMenusMutation {
	return amc.mutation
}

// Save creates the AdminMenus in the database.
func (amc *AdminMenusCreate) Save(ctx context.Context) (*AdminMenus, error) {
	var (
		err  error
		node *AdminMenus
	)
	amc.defaults()
	if len(amc.hooks) == 0 {
		if err = amc.check(); err != nil {
			return nil, err
		}
		node, err = amc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminMenusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = amc.check(); err != nil {
				return nil, err
			}
			amc.mutation = mutation
			node, err = amc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amc.hooks) - 1; i >= 0; i-- {
			mut = amc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (amc *AdminMenusCreate) SaveX(ctx context.Context) *AdminMenus {
	v, err := amc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (amc *AdminMenusCreate) defaults() {
	if _, ok := amc.mutation.CreatedAt(); !ok {
		v := adminmenus.DefaultCreatedAt()
		amc.mutation.SetCreatedAt(v)
	}
	if _, ok := amc.mutation.Icon(); !ok {
		v := adminmenus.DefaultIcon
		amc.mutation.SetIcon(v)
	}
	if _, ok := amc.mutation.GetType(); !ok {
		v := adminmenus.DefaultType
		amc.mutation.SetType(v)
	}
	if _, ok := amc.mutation.Sort(); !ok {
		v := adminmenus.DefaultSort
		amc.mutation.SetSort(v)
	}
	if _, ok := amc.mutation.IsExternalLink(); !ok {
		v := adminmenus.DefaultIsExternalLink
		amc.mutation.SetIsExternalLink(v)
	}
	if _, ok := amc.mutation.IsShow(); !ok {
		v := adminmenus.DefaultIsShow
		amc.mutation.SetIsShow(v)
	}
	if _, ok := amc.mutation.IsEnable(); !ok {
		v := adminmenus.DefaultIsEnable
		amc.mutation.SetIsEnable(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amc *AdminMenusCreate) check() error {
	if _, ok := amc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := amc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := amc.mutation.Sort(); ok {
		if err := adminmenus.SortValidator(v); err != nil {
			return &ValidationError{Name: "sort", err: fmt.Errorf("ent: validator failed for field \"sort\": %w", err)}
		}
	}
	return nil
}

func (amc *AdminMenusCreate) sqlSave(ctx context.Context) (*AdminMenus, error) {
	_node, _spec := amc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (amc *AdminMenusCreate) createSpec() (*AdminMenus, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminMenus{config: amc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: adminmenus.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminmenus.FieldID,
			},
		}
	)
	if value, ok := amc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminmenus.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := amc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminmenus.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := amc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminmenus.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := amc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldName,
		})
		_node.Name = value
	}
	if value, ok := amc.mutation.Path(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldPath,
		})
		_node.Path = value
	}
	if value, ok := amc.mutation.PathAction(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldPathAction,
		})
		_node.PathAction = value
	}
	if value, ok := amc.mutation.RouterPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldRouterPath,
		})
		_node.RouterPath = value
	}
	if value, ok := amc.mutation.Icon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldIcon,
		})
		_node.Icon = value
	}
	if value, ok := amc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: adminmenus.FieldType,
		})
		_node.Type = value
	}
	if value, ok := amc.mutation.PowerStr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminmenus.FieldPowerStr,
		})
		_node.PowerStr = value
	}
	if value, ok := amc.mutation.Sort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: adminmenus.FieldSort,
		})
		_node.Sort = value
	}
	if value, ok := amc.mutation.Fid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: adminmenus.FieldFid,
		})
		_node.Fid = value
	}
	if value, ok := amc.mutation.IsExternalLink(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: adminmenus.FieldIsExternalLink,
		})
		_node.IsExternalLink = value
	}
	if value, ok := amc.mutation.IsShow(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: adminmenus.FieldIsShow,
		})
		_node.IsShow = value
	}
	if value, ok := amc.mutation.IsEnable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: adminmenus.FieldIsEnable,
		})
		_node.IsEnable = value
	}
	if nodes := amc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   adminmenus.RoleTable,
			Columns: adminmenus.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdminMenusCreateBulk is the builder for creating many AdminMenus entities in bulk.
type AdminMenusCreateBulk struct {
	config
	builders []*AdminMenusCreate
}

// Save creates the AdminMenus entities in the database.
func (amcb *AdminMenusCreateBulk) Save(ctx context.Context) ([]*AdminMenus, error) {
	specs := make([]*sqlgraph.CreateSpec, len(amcb.builders))
	nodes := make([]*AdminMenus, len(amcb.builders))
	mutators := make([]Mutator, len(amcb.builders))
	for i := range amcb.builders {
		func(i int, root context.Context) {
			builder := amcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminMenusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amcb *AdminMenusCreateBulk) SaveX(ctx context.Context) []*AdminMenus {
	v, err := amcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
