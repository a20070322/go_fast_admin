// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/go_fast_admin/ent/casbinrules"
	"github.com/a20070322/go_fast_admin/ent/predicate"
)

// CasbinRulesUpdate is the builder for updating CasbinRules entities.
type CasbinRulesUpdate struct {
	config
	hooks    []Hook
	mutation *CasbinRulesMutation
}

// Where adds a new predicate for the CasbinRulesUpdate builder.
func (cru *CasbinRulesUpdate) Where(ps ...predicate.CasbinRules) *CasbinRulesUpdate {
	cru.mutation.predicates = append(cru.mutation.predicates, ps...)
	return cru
}

// SetPtype sets the "ptype" field.
func (cru *CasbinRulesUpdate) SetPtype(s string) *CasbinRulesUpdate {
	cru.mutation.SetPtype(s)
	return cru
}

// SetNillablePtype sets the "ptype" field if the given value is not nil.
func (cru *CasbinRulesUpdate) SetNillablePtype(s *string) *CasbinRulesUpdate {
	if s != nil {
		cru.SetPtype(*s)
	}
	return cru
}

// ClearPtype clears the value of the "ptype" field.
func (cru *CasbinRulesUpdate) ClearPtype() *CasbinRulesUpdate {
	cru.mutation.ClearPtype()
	return cru
}

// SetV0 sets the "v0" field.
func (cru *CasbinRulesUpdate) SetV0(s string) *CasbinRulesUpdate {
	cru.mutation.SetV0(s)
	return cru
}

// SetNillableV0 sets the "v0" field if the given value is not nil.
func (cru *CasbinRulesUpdate) SetNillableV0(s *string) *CasbinRulesUpdate {
	if s != nil {
		cru.SetV0(*s)
	}
	return cru
}

// ClearV0 clears the value of the "v0" field.
func (cru *CasbinRulesUpdate) ClearV0() *CasbinRulesUpdate {
	cru.mutation.ClearV0()
	return cru
}

// SetV1 sets the "v1" field.
func (cru *CasbinRulesUpdate) SetV1(s string) *CasbinRulesUpdate {
	cru.mutation.SetV1(s)
	return cru
}

// SetNillableV1 sets the "v1" field if the given value is not nil.
func (cru *CasbinRulesUpdate) SetNillableV1(s *string) *CasbinRulesUpdate {
	if s != nil {
		cru.SetV1(*s)
	}
	return cru
}

// ClearV1 clears the value of the "v1" field.
func (cru *CasbinRulesUpdate) ClearV1() *CasbinRulesUpdate {
	cru.mutation.ClearV1()
	return cru
}

// SetV2 sets the "v2" field.
func (cru *CasbinRulesUpdate) SetV2(s string) *CasbinRulesUpdate {
	cru.mutation.SetV2(s)
	return cru
}

// SetNillableV2 sets the "v2" field if the given value is not nil.
func (cru *CasbinRulesUpdate) SetNillableV2(s *string) *CasbinRulesUpdate {
	if s != nil {
		cru.SetV2(*s)
	}
	return cru
}

// ClearV2 clears the value of the "v2" field.
func (cru *CasbinRulesUpdate) ClearV2() *CasbinRulesUpdate {
	cru.mutation.ClearV2()
	return cru
}

// SetV3 sets the "v3" field.
func (cru *CasbinRulesUpdate) SetV3(s string) *CasbinRulesUpdate {
	cru.mutation.SetV3(s)
	return cru
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (cru *CasbinRulesUpdate) SetNillableV3(s *string) *CasbinRulesUpdate {
	if s != nil {
		cru.SetV3(*s)
	}
	return cru
}

// ClearV3 clears the value of the "v3" field.
func (cru *CasbinRulesUpdate) ClearV3() *CasbinRulesUpdate {
	cru.mutation.ClearV3()
	return cru
}

// SetV4 sets the "v4" field.
func (cru *CasbinRulesUpdate) SetV4(s string) *CasbinRulesUpdate {
	cru.mutation.SetV4(s)
	return cru
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (cru *CasbinRulesUpdate) SetNillableV4(s *string) *CasbinRulesUpdate {
	if s != nil {
		cru.SetV4(*s)
	}
	return cru
}

// ClearV4 clears the value of the "v4" field.
func (cru *CasbinRulesUpdate) ClearV4() *CasbinRulesUpdate {
	cru.mutation.ClearV4()
	return cru
}

// SetV5 sets the "v5" field.
func (cru *CasbinRulesUpdate) SetV5(s string) *CasbinRulesUpdate {
	cru.mutation.SetV5(s)
	return cru
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (cru *CasbinRulesUpdate) SetNillableV5(s *string) *CasbinRulesUpdate {
	if s != nil {
		cru.SetV5(*s)
	}
	return cru
}

// ClearV5 clears the value of the "v5" field.
func (cru *CasbinRulesUpdate) ClearV5() *CasbinRulesUpdate {
	cru.mutation.ClearV5()
	return cru
}

// Mutation returns the CasbinRulesMutation object of the builder.
func (cru *CasbinRulesUpdate) Mutation() *CasbinRulesMutation {
	return cru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *CasbinRulesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cru.hooks) == 0 {
		affected, err = cru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CasbinRulesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cru.mutation = mutation
			affected, err = cru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cru.hooks) - 1; i >= 0; i-- {
			mut = cru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cru *CasbinRulesUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *CasbinRulesUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *CasbinRulesUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cru *CasbinRulesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   casbinrules.Table,
			Columns: casbinrules.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: casbinrules.FieldID,
			},
		},
	}
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.Ptype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldPtype,
		})
	}
	if cru.mutation.PtypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: casbinrules.FieldPtype,
		})
	}
	if value, ok := cru.mutation.V0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV0,
		})
	}
	if cru.mutation.V0Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: casbinrules.FieldV0,
		})
	}
	if value, ok := cru.mutation.V1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV1,
		})
	}
	if cru.mutation.V1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: casbinrules.FieldV1,
		})
	}
	if value, ok := cru.mutation.V2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV2,
		})
	}
	if cru.mutation.V2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: casbinrules.FieldV2,
		})
	}
	if value, ok := cru.mutation.V3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV3,
		})
	}
	if cru.mutation.V3Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: casbinrules.FieldV3,
		})
	}
	if value, ok := cru.mutation.V4(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV4,
		})
	}
	if cru.mutation.V4Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: casbinrules.FieldV4,
		})
	}
	if value, ok := cru.mutation.V5(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV5,
		})
	}
	if cru.mutation.V5Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: casbinrules.FieldV5,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{casbinrules.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CasbinRulesUpdateOne is the builder for updating a single CasbinRules entity.
type CasbinRulesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CasbinRulesMutation
}

// SetPtype sets the "ptype" field.
func (cruo *CasbinRulesUpdateOne) SetPtype(s string) *CasbinRulesUpdateOne {
	cruo.mutation.SetPtype(s)
	return cruo
}

// SetNillablePtype sets the "ptype" field if the given value is not nil.
func (cruo *CasbinRulesUpdateOne) SetNillablePtype(s *string) *CasbinRulesUpdateOne {
	if s != nil {
		cruo.SetPtype(*s)
	}
	return cruo
}

// ClearPtype clears the value of the "ptype" field.
func (cruo *CasbinRulesUpdateOne) ClearPtype() *CasbinRulesUpdateOne {
	cruo.mutation.ClearPtype()
	return cruo
}

// SetV0 sets the "v0" field.
func (cruo *CasbinRulesUpdateOne) SetV0(s string) *CasbinRulesUpdateOne {
	cruo.mutation.SetV0(s)
	return cruo
}

// SetNillableV0 sets the "v0" field if the given value is not nil.
func (cruo *CasbinRulesUpdateOne) SetNillableV0(s *string) *CasbinRulesUpdateOne {
	if s != nil {
		cruo.SetV0(*s)
	}
	return cruo
}

// ClearV0 clears the value of the "v0" field.
func (cruo *CasbinRulesUpdateOne) ClearV0() *CasbinRulesUpdateOne {
	cruo.mutation.ClearV0()
	return cruo
}

// SetV1 sets the "v1" field.
func (cruo *CasbinRulesUpdateOne) SetV1(s string) *CasbinRulesUpdateOne {
	cruo.mutation.SetV1(s)
	return cruo
}

// SetNillableV1 sets the "v1" field if the given value is not nil.
func (cruo *CasbinRulesUpdateOne) SetNillableV1(s *string) *CasbinRulesUpdateOne {
	if s != nil {
		cruo.SetV1(*s)
	}
	return cruo
}

// ClearV1 clears the value of the "v1" field.
func (cruo *CasbinRulesUpdateOne) ClearV1() *CasbinRulesUpdateOne {
	cruo.mutation.ClearV1()
	return cruo
}

// SetV2 sets the "v2" field.
func (cruo *CasbinRulesUpdateOne) SetV2(s string) *CasbinRulesUpdateOne {
	cruo.mutation.SetV2(s)
	return cruo
}

// SetNillableV2 sets the "v2" field if the given value is not nil.
func (cruo *CasbinRulesUpdateOne) SetNillableV2(s *string) *CasbinRulesUpdateOne {
	if s != nil {
		cruo.SetV2(*s)
	}
	return cruo
}

// ClearV2 clears the value of the "v2" field.
func (cruo *CasbinRulesUpdateOne) ClearV2() *CasbinRulesUpdateOne {
	cruo.mutation.ClearV2()
	return cruo
}

// SetV3 sets the "v3" field.
func (cruo *CasbinRulesUpdateOne) SetV3(s string) *CasbinRulesUpdateOne {
	cruo.mutation.SetV3(s)
	return cruo
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (cruo *CasbinRulesUpdateOne) SetNillableV3(s *string) *CasbinRulesUpdateOne {
	if s != nil {
		cruo.SetV3(*s)
	}
	return cruo
}

// ClearV3 clears the value of the "v3" field.
func (cruo *CasbinRulesUpdateOne) ClearV3() *CasbinRulesUpdateOne {
	cruo.mutation.ClearV3()
	return cruo
}

// SetV4 sets the "v4" field.
func (cruo *CasbinRulesUpdateOne) SetV4(s string) *CasbinRulesUpdateOne {
	cruo.mutation.SetV4(s)
	return cruo
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (cruo *CasbinRulesUpdateOne) SetNillableV4(s *string) *CasbinRulesUpdateOne {
	if s != nil {
		cruo.SetV4(*s)
	}
	return cruo
}

// ClearV4 clears the value of the "v4" field.
func (cruo *CasbinRulesUpdateOne) ClearV4() *CasbinRulesUpdateOne {
	cruo.mutation.ClearV4()
	return cruo
}

// SetV5 sets the "v5" field.
func (cruo *CasbinRulesUpdateOne) SetV5(s string) *CasbinRulesUpdateOne {
	cruo.mutation.SetV5(s)
	return cruo
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (cruo *CasbinRulesUpdateOne) SetNillableV5(s *string) *CasbinRulesUpdateOne {
	if s != nil {
		cruo.SetV5(*s)
	}
	return cruo
}

// ClearV5 clears the value of the "v5" field.
func (cruo *CasbinRulesUpdateOne) ClearV5() *CasbinRulesUpdateOne {
	cruo.mutation.ClearV5()
	return cruo
}

// Mutation returns the CasbinRulesMutation object of the builder.
func (cruo *CasbinRulesUpdateOne) Mutation() *CasbinRulesMutation {
	return cruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *CasbinRulesUpdateOne) Select(field string, fields ...string) *CasbinRulesUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated CasbinRules entity.
func (cruo *CasbinRulesUpdateOne) Save(ctx context.Context) (*CasbinRules, error) {
	var (
		err  error
		node *CasbinRules
	)
	if len(cruo.hooks) == 0 {
		node, err = cruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CasbinRulesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cruo.mutation = mutation
			node, err = cruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cruo.hooks) - 1; i >= 0; i-- {
			mut = cruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *CasbinRulesUpdateOne) SaveX(ctx context.Context) *CasbinRules {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *CasbinRulesUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *CasbinRulesUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cruo *CasbinRulesUpdateOne) sqlSave(ctx context.Context) (_node *CasbinRules, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   casbinrules.Table,
			Columns: casbinrules.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: casbinrules.FieldID,
			},
		},
	}
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CasbinRules.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, casbinrules.FieldID)
		for _, f := range fields {
			if !casbinrules.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != casbinrules.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.Ptype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldPtype,
		})
	}
	if cruo.mutation.PtypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: casbinrules.FieldPtype,
		})
	}
	if value, ok := cruo.mutation.V0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV0,
		})
	}
	if cruo.mutation.V0Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: casbinrules.FieldV0,
		})
	}
	if value, ok := cruo.mutation.V1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV1,
		})
	}
	if cruo.mutation.V1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: casbinrules.FieldV1,
		})
	}
	if value, ok := cruo.mutation.V2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV2,
		})
	}
	if cruo.mutation.V2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: casbinrules.FieldV2,
		})
	}
	if value, ok := cruo.mutation.V3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV3,
		})
	}
	if cruo.mutation.V3Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: casbinrules.FieldV3,
		})
	}
	if value, ok := cruo.mutation.V4(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV4,
		})
	}
	if cruo.mutation.V4Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: casbinrules.FieldV4,
		})
	}
	if value, ok := cruo.mutation.V5(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrules.FieldV5,
		})
	}
	if cruo.mutation.V5Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: casbinrules.FieldV5,
		})
	}
	_node = &CasbinRules{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{casbinrules.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
