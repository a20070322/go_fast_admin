// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/a20070322/go_fast_admin/ent/admindict"
	"github.com/a20070322/go_fast_admin/ent/admindictkey"
	"github.com/a20070322/go_fast_admin/ent/adminmenus"
	"github.com/a20070322/go_fast_admin/ent/adminrole"
	"github.com/a20070322/go_fast_admin/ent/adminuser"
	"github.com/a20070322/go_fast_admin/ent/predicate"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAdminDict    = "AdminDict"
	TypeAdminDictKey = "AdminDictKey"
	TypeAdminMenus   = "AdminMenus"
	TypeAdminRole    = "AdminRole"
	TypeAdminUser    = "AdminUser"
)

// AdminDictMutation represents an operation that mutates the AdminDict nodes in the graph.
type AdminDictMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	dict_type     *string
	dict_name     *string
	remarks       *string
	is_enable     *bool
	clearedFields map[string]struct{}
	key           map[int]struct{}
	removedkey    map[int]struct{}
	clearedkey    bool
	done          bool
	oldValue      func(context.Context) (*AdminDict, error)
	predicates    []predicate.AdminDict
}

var _ ent.Mutation = (*AdminDictMutation)(nil)

// admindictOption allows management of the mutation configuration using functional options.
type admindictOption func(*AdminDictMutation)

// newAdminDictMutation creates new mutation for the AdminDict entity.
func newAdminDictMutation(c config, op Op, opts ...admindictOption) *AdminDictMutation {
	m := &AdminDictMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminDict,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminDictID sets the ID field of the mutation.
func withAdminDictID(id int) admindictOption {
	return func(m *AdminDictMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminDict
		)
		m.oldValue = func(ctx context.Context) (*AdminDict, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminDict.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminDict sets the old AdminDict of the mutation.
func withAdminDict(node *AdminDict) admindictOption {
	return func(m *AdminDictMutation) {
		m.oldValue = func(context.Context) (*AdminDict, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminDictMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminDictMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *AdminDictMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminDictMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminDictMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AdminDict entity.
// If the AdminDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminDictMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminDictMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AdminDictMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AdminDictMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AdminDict entity.
// If the AdminDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminDictMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AdminDictMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[admindict.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AdminDictMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[admindict.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AdminDictMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, admindict.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AdminDictMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AdminDictMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the AdminDict entity.
// If the AdminDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminDictMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AdminDictMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[admindict.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AdminDictMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[admindict.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AdminDictMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, admindict.FieldDeletedAt)
}

// SetDictType sets the "dict_type" field.
func (m *AdminDictMutation) SetDictType(s string) {
	m.dict_type = &s
}

// DictType returns the value of the "dict_type" field in the mutation.
func (m *AdminDictMutation) DictType() (r string, exists bool) {
	v := m.dict_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDictType returns the old "dict_type" field's value of the AdminDict entity.
// If the AdminDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminDictMutation) OldDictType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDictType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDictType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDictType: %w", err)
	}
	return oldValue.DictType, nil
}

// ResetDictType resets all changes to the "dict_type" field.
func (m *AdminDictMutation) ResetDictType() {
	m.dict_type = nil
}

// SetDictName sets the "dict_name" field.
func (m *AdminDictMutation) SetDictName(s string) {
	m.dict_name = &s
}

// DictName returns the value of the "dict_name" field in the mutation.
func (m *AdminDictMutation) DictName() (r string, exists bool) {
	v := m.dict_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDictName returns the old "dict_name" field's value of the AdminDict entity.
// If the AdminDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminDictMutation) OldDictName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDictName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDictName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDictName: %w", err)
	}
	return oldValue.DictName, nil
}

// ResetDictName resets all changes to the "dict_name" field.
func (m *AdminDictMutation) ResetDictName() {
	m.dict_name = nil
}

// SetRemarks sets the "remarks" field.
func (m *AdminDictMutation) SetRemarks(s string) {
	m.remarks = &s
}

// Remarks returns the value of the "remarks" field in the mutation.
func (m *AdminDictMutation) Remarks() (r string, exists bool) {
	v := m.remarks
	if v == nil {
		return
	}
	return *v, true
}

// OldRemarks returns the old "remarks" field's value of the AdminDict entity.
// If the AdminDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminDictMutation) OldRemarks(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemarks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemarks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemarks: %w", err)
	}
	return oldValue.Remarks, nil
}

// ResetRemarks resets all changes to the "remarks" field.
func (m *AdminDictMutation) ResetRemarks() {
	m.remarks = nil
}

// SetIsEnable sets the "is_enable" field.
func (m *AdminDictMutation) SetIsEnable(b bool) {
	m.is_enable = &b
}

// IsEnable returns the value of the "is_enable" field in the mutation.
func (m *AdminDictMutation) IsEnable() (r bool, exists bool) {
	v := m.is_enable
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnable returns the old "is_enable" field's value of the AdminDict entity.
// If the AdminDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminDictMutation) OldIsEnable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsEnable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsEnable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnable: %w", err)
	}
	return oldValue.IsEnable, nil
}

// ResetIsEnable resets all changes to the "is_enable" field.
func (m *AdminDictMutation) ResetIsEnable() {
	m.is_enable = nil
}

// AddKeyIDs adds the "key" edge to the AdminDictKey entity by ids.
func (m *AdminDictMutation) AddKeyIDs(ids ...int) {
	if m.key == nil {
		m.key = make(map[int]struct{})
	}
	for i := range ids {
		m.key[ids[i]] = struct{}{}
	}
}

// ClearKey clears the "key" edge to the AdminDictKey entity.
func (m *AdminDictMutation) ClearKey() {
	m.clearedkey = true
}

// KeyCleared reports if the "key" edge to the AdminDictKey entity was cleared.
func (m *AdminDictMutation) KeyCleared() bool {
	return m.clearedkey
}

// RemoveKeyIDs removes the "key" edge to the AdminDictKey entity by IDs.
func (m *AdminDictMutation) RemoveKeyIDs(ids ...int) {
	if m.removedkey == nil {
		m.removedkey = make(map[int]struct{})
	}
	for i := range ids {
		m.removedkey[ids[i]] = struct{}{}
	}
}

// RemovedKey returns the removed IDs of the "key" edge to the AdminDictKey entity.
func (m *AdminDictMutation) RemovedKeyIDs() (ids []int) {
	for id := range m.removedkey {
		ids = append(ids, id)
	}
	return
}

// KeyIDs returns the "key" edge IDs in the mutation.
func (m *AdminDictMutation) KeyIDs() (ids []int) {
	for id := range m.key {
		ids = append(ids, id)
	}
	return
}

// ResetKey resets all changes to the "key" edge.
func (m *AdminDictMutation) ResetKey() {
	m.key = nil
	m.clearedkey = false
	m.removedkey = nil
}

// Op returns the operation name.
func (m *AdminDictMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AdminDict).
func (m *AdminDictMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminDictMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, admindict.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, admindict.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, admindict.FieldDeletedAt)
	}
	if m.dict_type != nil {
		fields = append(fields, admindict.FieldDictType)
	}
	if m.dict_name != nil {
		fields = append(fields, admindict.FieldDictName)
	}
	if m.remarks != nil {
		fields = append(fields, admindict.FieldRemarks)
	}
	if m.is_enable != nil {
		fields = append(fields, admindict.FieldIsEnable)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminDictMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case admindict.FieldCreatedAt:
		return m.CreatedAt()
	case admindict.FieldUpdatedAt:
		return m.UpdatedAt()
	case admindict.FieldDeletedAt:
		return m.DeletedAt()
	case admindict.FieldDictType:
		return m.DictType()
	case admindict.FieldDictName:
		return m.DictName()
	case admindict.FieldRemarks:
		return m.Remarks()
	case admindict.FieldIsEnable:
		return m.IsEnable()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminDictMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case admindict.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case admindict.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case admindict.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case admindict.FieldDictType:
		return m.OldDictType(ctx)
	case admindict.FieldDictName:
		return m.OldDictName(ctx)
	case admindict.FieldRemarks:
		return m.OldRemarks(ctx)
	case admindict.FieldIsEnable:
		return m.OldIsEnable(ctx)
	}
	return nil, fmt.Errorf("unknown AdminDict field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminDictMutation) SetField(name string, value ent.Value) error {
	switch name {
	case admindict.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case admindict.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case admindict.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case admindict.FieldDictType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDictType(v)
		return nil
	case admindict.FieldDictName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDictName(v)
		return nil
	case admindict.FieldRemarks:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemarks(v)
		return nil
	case admindict.FieldIsEnable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnable(v)
		return nil
	}
	return fmt.Errorf("unknown AdminDict field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminDictMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminDictMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminDictMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AdminDict numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminDictMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(admindict.FieldUpdatedAt) {
		fields = append(fields, admindict.FieldUpdatedAt)
	}
	if m.FieldCleared(admindict.FieldDeletedAt) {
		fields = append(fields, admindict.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminDictMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminDictMutation) ClearField(name string) error {
	switch name {
	case admindict.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case admindict.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown AdminDict nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminDictMutation) ResetField(name string) error {
	switch name {
	case admindict.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case admindict.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case admindict.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case admindict.FieldDictType:
		m.ResetDictType()
		return nil
	case admindict.FieldDictName:
		m.ResetDictName()
		return nil
	case admindict.FieldRemarks:
		m.ResetRemarks()
		return nil
	case admindict.FieldIsEnable:
		m.ResetIsEnable()
		return nil
	}
	return fmt.Errorf("unknown AdminDict field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminDictMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.key != nil {
		edges = append(edges, admindict.EdgeKey)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminDictMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case admindict.EdgeKey:
		ids := make([]ent.Value, 0, len(m.key))
		for id := range m.key {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminDictMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedkey != nil {
		edges = append(edges, admindict.EdgeKey)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminDictMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case admindict.EdgeKey:
		ids := make([]ent.Value, 0, len(m.removedkey))
		for id := range m.removedkey {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminDictMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedkey {
		edges = append(edges, admindict.EdgeKey)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminDictMutation) EdgeCleared(name string) bool {
	switch name {
	case admindict.EdgeKey:
		return m.clearedkey
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminDictMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown AdminDict unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminDictMutation) ResetEdge(name string) error {
	switch name {
	case admindict.EdgeKey:
		m.ResetKey()
		return nil
	}
	return fmt.Errorf("unknown AdminDict edge %s", name)
}

// AdminDictKeyMutation represents an operation that mutates the AdminDictKey nodes in the graph.
type AdminDictKeyMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	dict_label    *string
	dict_code     *string
	sort          *int
	addsort       *int
	remarks       *string
	is_enable     *bool
	clearedFields map[string]struct{}
	_P            *int
	cleared_P     bool
	done          bool
	oldValue      func(context.Context) (*AdminDictKey, error)
	predicates    []predicate.AdminDictKey
}

var _ ent.Mutation = (*AdminDictKeyMutation)(nil)

// admindictkeyOption allows management of the mutation configuration using functional options.
type admindictkeyOption func(*AdminDictKeyMutation)

// newAdminDictKeyMutation creates new mutation for the AdminDictKey entity.
func newAdminDictKeyMutation(c config, op Op, opts ...admindictkeyOption) *AdminDictKeyMutation {
	m := &AdminDictKeyMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminDictKey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminDictKeyID sets the ID field of the mutation.
func withAdminDictKeyID(id int) admindictkeyOption {
	return func(m *AdminDictKeyMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminDictKey
		)
		m.oldValue = func(ctx context.Context) (*AdminDictKey, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminDictKey.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminDictKey sets the old AdminDictKey of the mutation.
func withAdminDictKey(node *AdminDictKey) admindictkeyOption {
	return func(m *AdminDictKeyMutation) {
		m.oldValue = func(context.Context) (*AdminDictKey, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminDictKeyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminDictKeyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *AdminDictKeyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminDictKeyMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminDictKeyMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AdminDictKey entity.
// If the AdminDictKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminDictKeyMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminDictKeyMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AdminDictKeyMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AdminDictKeyMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AdminDictKey entity.
// If the AdminDictKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminDictKeyMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AdminDictKeyMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[admindictkey.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AdminDictKeyMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[admindictkey.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AdminDictKeyMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, admindictkey.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AdminDictKeyMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AdminDictKeyMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the AdminDictKey entity.
// If the AdminDictKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminDictKeyMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AdminDictKeyMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[admindictkey.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AdminDictKeyMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[admindictkey.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AdminDictKeyMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, admindictkey.FieldDeletedAt)
}

// SetDictLabel sets the "dict_label" field.
func (m *AdminDictKeyMutation) SetDictLabel(s string) {
	m.dict_label = &s
}

// DictLabel returns the value of the "dict_label" field in the mutation.
func (m *AdminDictKeyMutation) DictLabel() (r string, exists bool) {
	v := m.dict_label
	if v == nil {
		return
	}
	return *v, true
}

// OldDictLabel returns the old "dict_label" field's value of the AdminDictKey entity.
// If the AdminDictKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminDictKeyMutation) OldDictLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDictLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDictLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDictLabel: %w", err)
	}
	return oldValue.DictLabel, nil
}

// ResetDictLabel resets all changes to the "dict_label" field.
func (m *AdminDictKeyMutation) ResetDictLabel() {
	m.dict_label = nil
}

// SetDictCode sets the "dict_code" field.
func (m *AdminDictKeyMutation) SetDictCode(s string) {
	m.dict_code = &s
}

// DictCode returns the value of the "dict_code" field in the mutation.
func (m *AdminDictKeyMutation) DictCode() (r string, exists bool) {
	v := m.dict_code
	if v == nil {
		return
	}
	return *v, true
}

// OldDictCode returns the old "dict_code" field's value of the AdminDictKey entity.
// If the AdminDictKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminDictKeyMutation) OldDictCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDictCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDictCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDictCode: %w", err)
	}
	return oldValue.DictCode, nil
}

// ResetDictCode resets all changes to the "dict_code" field.
func (m *AdminDictKeyMutation) ResetDictCode() {
	m.dict_code = nil
}

// SetSort sets the "sort" field.
func (m *AdminDictKeyMutation) SetSort(i int) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *AdminDictKeyMutation) Sort() (r int, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the AdminDictKey entity.
// If the AdminDictKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminDictKeyMutation) OldSort(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *AdminDictKeyMutation) AddSort(i int) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *AdminDictKeyMutation) AddedSort() (r int, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ClearSort clears the value of the "sort" field.
func (m *AdminDictKeyMutation) ClearSort() {
	m.sort = nil
	m.addsort = nil
	m.clearedFields[admindictkey.FieldSort] = struct{}{}
}

// SortCleared returns if the "sort" field was cleared in this mutation.
func (m *AdminDictKeyMutation) SortCleared() bool {
	_, ok := m.clearedFields[admindictkey.FieldSort]
	return ok
}

// ResetSort resets all changes to the "sort" field.
func (m *AdminDictKeyMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
	delete(m.clearedFields, admindictkey.FieldSort)
}

// SetRemarks sets the "remarks" field.
func (m *AdminDictKeyMutation) SetRemarks(s string) {
	m.remarks = &s
}

// Remarks returns the value of the "remarks" field in the mutation.
func (m *AdminDictKeyMutation) Remarks() (r string, exists bool) {
	v := m.remarks
	if v == nil {
		return
	}
	return *v, true
}

// OldRemarks returns the old "remarks" field's value of the AdminDictKey entity.
// If the AdminDictKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminDictKeyMutation) OldRemarks(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemarks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemarks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemarks: %w", err)
	}
	return oldValue.Remarks, nil
}

// ClearRemarks clears the value of the "remarks" field.
func (m *AdminDictKeyMutation) ClearRemarks() {
	m.remarks = nil
	m.clearedFields[admindictkey.FieldRemarks] = struct{}{}
}

// RemarksCleared returns if the "remarks" field was cleared in this mutation.
func (m *AdminDictKeyMutation) RemarksCleared() bool {
	_, ok := m.clearedFields[admindictkey.FieldRemarks]
	return ok
}

// ResetRemarks resets all changes to the "remarks" field.
func (m *AdminDictKeyMutation) ResetRemarks() {
	m.remarks = nil
	delete(m.clearedFields, admindictkey.FieldRemarks)
}

// SetIsEnable sets the "is_enable" field.
func (m *AdminDictKeyMutation) SetIsEnable(b bool) {
	m.is_enable = &b
}

// IsEnable returns the value of the "is_enable" field in the mutation.
func (m *AdminDictKeyMutation) IsEnable() (r bool, exists bool) {
	v := m.is_enable
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnable returns the old "is_enable" field's value of the AdminDictKey entity.
// If the AdminDictKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminDictKeyMutation) OldIsEnable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsEnable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsEnable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnable: %w", err)
	}
	return oldValue.IsEnable, nil
}

// ResetIsEnable resets all changes to the "is_enable" field.
func (m *AdminDictKeyMutation) ResetIsEnable() {
	m.is_enable = nil
}

// SetPID sets the "P" edge to the AdminDict entity by id.
func (m *AdminDictKeyMutation) SetPID(id int) {
	m._P = &id
}

// ClearP clears the "P" edge to the AdminDict entity.
func (m *AdminDictKeyMutation) ClearP() {
	m.cleared_P = true
}

// PCleared reports if the "P" edge to the AdminDict entity was cleared.
func (m *AdminDictKeyMutation) PCleared() bool {
	return m.cleared_P
}

// PID returns the "P" edge ID in the mutation.
func (m *AdminDictKeyMutation) PID() (id int, exists bool) {
	if m._P != nil {
		return *m._P, true
	}
	return
}

// PIDs returns the "P" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PID instead. It exists only for internal usage by the builders.
func (m *AdminDictKeyMutation) PIDs() (ids []int) {
	if id := m._P; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetP resets all changes to the "P" edge.
func (m *AdminDictKeyMutation) ResetP() {
	m._P = nil
	m.cleared_P = false
}

// Op returns the operation name.
func (m *AdminDictKeyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AdminDictKey).
func (m *AdminDictKeyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminDictKeyMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, admindictkey.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, admindictkey.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, admindictkey.FieldDeletedAt)
	}
	if m.dict_label != nil {
		fields = append(fields, admindictkey.FieldDictLabel)
	}
	if m.dict_code != nil {
		fields = append(fields, admindictkey.FieldDictCode)
	}
	if m.sort != nil {
		fields = append(fields, admindictkey.FieldSort)
	}
	if m.remarks != nil {
		fields = append(fields, admindictkey.FieldRemarks)
	}
	if m.is_enable != nil {
		fields = append(fields, admindictkey.FieldIsEnable)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminDictKeyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case admindictkey.FieldCreatedAt:
		return m.CreatedAt()
	case admindictkey.FieldUpdatedAt:
		return m.UpdatedAt()
	case admindictkey.FieldDeletedAt:
		return m.DeletedAt()
	case admindictkey.FieldDictLabel:
		return m.DictLabel()
	case admindictkey.FieldDictCode:
		return m.DictCode()
	case admindictkey.FieldSort:
		return m.Sort()
	case admindictkey.FieldRemarks:
		return m.Remarks()
	case admindictkey.FieldIsEnable:
		return m.IsEnable()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminDictKeyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case admindictkey.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case admindictkey.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case admindictkey.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case admindictkey.FieldDictLabel:
		return m.OldDictLabel(ctx)
	case admindictkey.FieldDictCode:
		return m.OldDictCode(ctx)
	case admindictkey.FieldSort:
		return m.OldSort(ctx)
	case admindictkey.FieldRemarks:
		return m.OldRemarks(ctx)
	case admindictkey.FieldIsEnable:
		return m.OldIsEnable(ctx)
	}
	return nil, fmt.Errorf("unknown AdminDictKey field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminDictKeyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case admindictkey.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case admindictkey.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case admindictkey.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case admindictkey.FieldDictLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDictLabel(v)
		return nil
	case admindictkey.FieldDictCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDictCode(v)
		return nil
	case admindictkey.FieldSort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case admindictkey.FieldRemarks:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemarks(v)
		return nil
	case admindictkey.FieldIsEnable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnable(v)
		return nil
	}
	return fmt.Errorf("unknown AdminDictKey field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminDictKeyMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, admindictkey.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminDictKeyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case admindictkey.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminDictKeyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case admindictkey.FieldSort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown AdminDictKey numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminDictKeyMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(admindictkey.FieldUpdatedAt) {
		fields = append(fields, admindictkey.FieldUpdatedAt)
	}
	if m.FieldCleared(admindictkey.FieldDeletedAt) {
		fields = append(fields, admindictkey.FieldDeletedAt)
	}
	if m.FieldCleared(admindictkey.FieldSort) {
		fields = append(fields, admindictkey.FieldSort)
	}
	if m.FieldCleared(admindictkey.FieldRemarks) {
		fields = append(fields, admindictkey.FieldRemarks)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminDictKeyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminDictKeyMutation) ClearField(name string) error {
	switch name {
	case admindictkey.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case admindictkey.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case admindictkey.FieldSort:
		m.ClearSort()
		return nil
	case admindictkey.FieldRemarks:
		m.ClearRemarks()
		return nil
	}
	return fmt.Errorf("unknown AdminDictKey nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminDictKeyMutation) ResetField(name string) error {
	switch name {
	case admindictkey.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case admindictkey.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case admindictkey.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case admindictkey.FieldDictLabel:
		m.ResetDictLabel()
		return nil
	case admindictkey.FieldDictCode:
		m.ResetDictCode()
		return nil
	case admindictkey.FieldSort:
		m.ResetSort()
		return nil
	case admindictkey.FieldRemarks:
		m.ResetRemarks()
		return nil
	case admindictkey.FieldIsEnable:
		m.ResetIsEnable()
		return nil
	}
	return fmt.Errorf("unknown AdminDictKey field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminDictKeyMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._P != nil {
		edges = append(edges, admindictkey.EdgeP)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminDictKeyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case admindictkey.EdgeP:
		if id := m._P; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminDictKeyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminDictKeyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminDictKeyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_P {
		edges = append(edges, admindictkey.EdgeP)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminDictKeyMutation) EdgeCleared(name string) bool {
	switch name {
	case admindictkey.EdgeP:
		return m.cleared_P
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminDictKeyMutation) ClearEdge(name string) error {
	switch name {
	case admindictkey.EdgeP:
		m.ClearP()
		return nil
	}
	return fmt.Errorf("unknown AdminDictKey unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminDictKeyMutation) ResetEdge(name string) error {
	switch name {
	case admindictkey.EdgeP:
		m.ResetP()
		return nil
	}
	return fmt.Errorf("unknown AdminDictKey edge %s", name)
}

// AdminMenusMutation represents an operation that mutates the AdminMenus nodes in the graph.
type AdminMenusMutation struct {
	config
	op               Op
	typ              string
	id               *int
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	name             *string
	_path            *string
	path_action      *string
	router_path      *string
	icon             *string
	_type            *int8
	add_type         *int8
	power_str        *string
	sort             *int
	addsort          *int
	fid              *int
	addfid           *int
	is_external_link *bool
	is_show          *bool
	is_enable        *bool
	clearedFields    map[string]struct{}
	role             map[int]struct{}
	removedrole      map[int]struct{}
	clearedrole      bool
	done             bool
	oldValue         func(context.Context) (*AdminMenus, error)
	predicates       []predicate.AdminMenus
}

var _ ent.Mutation = (*AdminMenusMutation)(nil)

// adminmenusOption allows management of the mutation configuration using functional options.
type adminmenusOption func(*AdminMenusMutation)

// newAdminMenusMutation creates new mutation for the AdminMenus entity.
func newAdminMenusMutation(c config, op Op, opts ...adminmenusOption) *AdminMenusMutation {
	m := &AdminMenusMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminMenus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminMenusID sets the ID field of the mutation.
func withAdminMenusID(id int) adminmenusOption {
	return func(m *AdminMenusMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminMenus
		)
		m.oldValue = func(ctx context.Context) (*AdminMenus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminMenus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminMenus sets the old AdminMenus of the mutation.
func withAdminMenus(node *AdminMenus) adminmenusOption {
	return func(m *AdminMenusMutation) {
		m.oldValue = func(context.Context) (*AdminMenus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminMenusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminMenusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *AdminMenusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminMenusMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminMenusMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AdminMenus entity.
// If the AdminMenus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenusMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminMenusMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AdminMenusMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AdminMenusMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AdminMenus entity.
// If the AdminMenus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenusMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AdminMenusMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[adminmenus.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AdminMenusMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[adminmenus.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AdminMenusMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, adminmenus.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AdminMenusMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AdminMenusMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the AdminMenus entity.
// If the AdminMenus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenusMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AdminMenusMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[adminmenus.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AdminMenusMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[adminmenus.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AdminMenusMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, adminmenus.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *AdminMenusMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AdminMenusMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AdminMenus entity.
// If the AdminMenus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenusMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AdminMenusMutation) ResetName() {
	m.name = nil
}

// SetPath sets the "path" field.
func (m *AdminMenusMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *AdminMenusMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the AdminMenus entity.
// If the AdminMenus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenusMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ClearPath clears the value of the "path" field.
func (m *AdminMenusMutation) ClearPath() {
	m._path = nil
	m.clearedFields[adminmenus.FieldPath] = struct{}{}
}

// PathCleared returns if the "path" field was cleared in this mutation.
func (m *AdminMenusMutation) PathCleared() bool {
	_, ok := m.clearedFields[adminmenus.FieldPath]
	return ok
}

// ResetPath resets all changes to the "path" field.
func (m *AdminMenusMutation) ResetPath() {
	m._path = nil
	delete(m.clearedFields, adminmenus.FieldPath)
}

// SetPathAction sets the "path_action" field.
func (m *AdminMenusMutation) SetPathAction(s string) {
	m.path_action = &s
}

// PathAction returns the value of the "path_action" field in the mutation.
func (m *AdminMenusMutation) PathAction() (r string, exists bool) {
	v := m.path_action
	if v == nil {
		return
	}
	return *v, true
}

// OldPathAction returns the old "path_action" field's value of the AdminMenus entity.
// If the AdminMenus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenusMutation) OldPathAction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPathAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPathAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPathAction: %w", err)
	}
	return oldValue.PathAction, nil
}

// ClearPathAction clears the value of the "path_action" field.
func (m *AdminMenusMutation) ClearPathAction() {
	m.path_action = nil
	m.clearedFields[adminmenus.FieldPathAction] = struct{}{}
}

// PathActionCleared returns if the "path_action" field was cleared in this mutation.
func (m *AdminMenusMutation) PathActionCleared() bool {
	_, ok := m.clearedFields[adminmenus.FieldPathAction]
	return ok
}

// ResetPathAction resets all changes to the "path_action" field.
func (m *AdminMenusMutation) ResetPathAction() {
	m.path_action = nil
	delete(m.clearedFields, adminmenus.FieldPathAction)
}

// SetRouterPath sets the "router_path" field.
func (m *AdminMenusMutation) SetRouterPath(s string) {
	m.router_path = &s
}

// RouterPath returns the value of the "router_path" field in the mutation.
func (m *AdminMenusMutation) RouterPath() (r string, exists bool) {
	v := m.router_path
	if v == nil {
		return
	}
	return *v, true
}

// OldRouterPath returns the old "router_path" field's value of the AdminMenus entity.
// If the AdminMenus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenusMutation) OldRouterPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRouterPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRouterPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRouterPath: %w", err)
	}
	return oldValue.RouterPath, nil
}

// ClearRouterPath clears the value of the "router_path" field.
func (m *AdminMenusMutation) ClearRouterPath() {
	m.router_path = nil
	m.clearedFields[adminmenus.FieldRouterPath] = struct{}{}
}

// RouterPathCleared returns if the "router_path" field was cleared in this mutation.
func (m *AdminMenusMutation) RouterPathCleared() bool {
	_, ok := m.clearedFields[adminmenus.FieldRouterPath]
	return ok
}

// ResetRouterPath resets all changes to the "router_path" field.
func (m *AdminMenusMutation) ResetRouterPath() {
	m.router_path = nil
	delete(m.clearedFields, adminmenus.FieldRouterPath)
}

// SetIcon sets the "icon" field.
func (m *AdminMenusMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *AdminMenusMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the AdminMenus entity.
// If the AdminMenus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenusMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ClearIcon clears the value of the "icon" field.
func (m *AdminMenusMutation) ClearIcon() {
	m.icon = nil
	m.clearedFields[adminmenus.FieldIcon] = struct{}{}
}

// IconCleared returns if the "icon" field was cleared in this mutation.
func (m *AdminMenusMutation) IconCleared() bool {
	_, ok := m.clearedFields[adminmenus.FieldIcon]
	return ok
}

// ResetIcon resets all changes to the "icon" field.
func (m *AdminMenusMutation) ResetIcon() {
	m.icon = nil
	delete(m.clearedFields, adminmenus.FieldIcon)
}

// SetType sets the "type" field.
func (m *AdminMenusMutation) SetType(i int8) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *AdminMenusMutation) GetType() (r int8, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the AdminMenus entity.
// If the AdminMenus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenusMutation) OldType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *AdminMenusMutation) AddType(i int8) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *AdminMenusMutation) AddedType() (r int8, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ClearType clears the value of the "type" field.
func (m *AdminMenusMutation) ClearType() {
	m._type = nil
	m.add_type = nil
	m.clearedFields[adminmenus.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *AdminMenusMutation) TypeCleared() bool {
	_, ok := m.clearedFields[adminmenus.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *AdminMenusMutation) ResetType() {
	m._type = nil
	m.add_type = nil
	delete(m.clearedFields, adminmenus.FieldType)
}

// SetPowerStr sets the "power_str" field.
func (m *AdminMenusMutation) SetPowerStr(s string) {
	m.power_str = &s
}

// PowerStr returns the value of the "power_str" field in the mutation.
func (m *AdminMenusMutation) PowerStr() (r string, exists bool) {
	v := m.power_str
	if v == nil {
		return
	}
	return *v, true
}

// OldPowerStr returns the old "power_str" field's value of the AdminMenus entity.
// If the AdminMenus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenusMutation) OldPowerStr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPowerStr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPowerStr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPowerStr: %w", err)
	}
	return oldValue.PowerStr, nil
}

// ClearPowerStr clears the value of the "power_str" field.
func (m *AdminMenusMutation) ClearPowerStr() {
	m.power_str = nil
	m.clearedFields[adminmenus.FieldPowerStr] = struct{}{}
}

// PowerStrCleared returns if the "power_str" field was cleared in this mutation.
func (m *AdminMenusMutation) PowerStrCleared() bool {
	_, ok := m.clearedFields[adminmenus.FieldPowerStr]
	return ok
}

// ResetPowerStr resets all changes to the "power_str" field.
func (m *AdminMenusMutation) ResetPowerStr() {
	m.power_str = nil
	delete(m.clearedFields, adminmenus.FieldPowerStr)
}

// SetSort sets the "sort" field.
func (m *AdminMenusMutation) SetSort(i int) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *AdminMenusMutation) Sort() (r int, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the AdminMenus entity.
// If the AdminMenus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenusMutation) OldSort(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *AdminMenusMutation) AddSort(i int) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *AdminMenusMutation) AddedSort() (r int, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ClearSort clears the value of the "sort" field.
func (m *AdminMenusMutation) ClearSort() {
	m.sort = nil
	m.addsort = nil
	m.clearedFields[adminmenus.FieldSort] = struct{}{}
}

// SortCleared returns if the "sort" field was cleared in this mutation.
func (m *AdminMenusMutation) SortCleared() bool {
	_, ok := m.clearedFields[adminmenus.FieldSort]
	return ok
}

// ResetSort resets all changes to the "sort" field.
func (m *AdminMenusMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
	delete(m.clearedFields, adminmenus.FieldSort)
}

// SetFid sets the "fid" field.
func (m *AdminMenusMutation) SetFid(i int) {
	m.fid = &i
	m.addfid = nil
}

// Fid returns the value of the "fid" field in the mutation.
func (m *AdminMenusMutation) Fid() (r int, exists bool) {
	v := m.fid
	if v == nil {
		return
	}
	return *v, true
}

// OldFid returns the old "fid" field's value of the AdminMenus entity.
// If the AdminMenus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenusMutation) OldFid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFid: %w", err)
	}
	return oldValue.Fid, nil
}

// AddFid adds i to the "fid" field.
func (m *AdminMenusMutation) AddFid(i int) {
	if m.addfid != nil {
		*m.addfid += i
	} else {
		m.addfid = &i
	}
}

// AddedFid returns the value that was added to the "fid" field in this mutation.
func (m *AdminMenusMutation) AddedFid() (r int, exists bool) {
	v := m.addfid
	if v == nil {
		return
	}
	return *v, true
}

// ClearFid clears the value of the "fid" field.
func (m *AdminMenusMutation) ClearFid() {
	m.fid = nil
	m.addfid = nil
	m.clearedFields[adminmenus.FieldFid] = struct{}{}
}

// FidCleared returns if the "fid" field was cleared in this mutation.
func (m *AdminMenusMutation) FidCleared() bool {
	_, ok := m.clearedFields[adminmenus.FieldFid]
	return ok
}

// ResetFid resets all changes to the "fid" field.
func (m *AdminMenusMutation) ResetFid() {
	m.fid = nil
	m.addfid = nil
	delete(m.clearedFields, adminmenus.FieldFid)
}

// SetIsExternalLink sets the "is_external_link" field.
func (m *AdminMenusMutation) SetIsExternalLink(b bool) {
	m.is_external_link = &b
}

// IsExternalLink returns the value of the "is_external_link" field in the mutation.
func (m *AdminMenusMutation) IsExternalLink() (r bool, exists bool) {
	v := m.is_external_link
	if v == nil {
		return
	}
	return *v, true
}

// OldIsExternalLink returns the old "is_external_link" field's value of the AdminMenus entity.
// If the AdminMenus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenusMutation) OldIsExternalLink(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsExternalLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsExternalLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsExternalLink: %w", err)
	}
	return oldValue.IsExternalLink, nil
}

// ClearIsExternalLink clears the value of the "is_external_link" field.
func (m *AdminMenusMutation) ClearIsExternalLink() {
	m.is_external_link = nil
	m.clearedFields[adminmenus.FieldIsExternalLink] = struct{}{}
}

// IsExternalLinkCleared returns if the "is_external_link" field was cleared in this mutation.
func (m *AdminMenusMutation) IsExternalLinkCleared() bool {
	_, ok := m.clearedFields[adminmenus.FieldIsExternalLink]
	return ok
}

// ResetIsExternalLink resets all changes to the "is_external_link" field.
func (m *AdminMenusMutation) ResetIsExternalLink() {
	m.is_external_link = nil
	delete(m.clearedFields, adminmenus.FieldIsExternalLink)
}

// SetIsShow sets the "is_show" field.
func (m *AdminMenusMutation) SetIsShow(b bool) {
	m.is_show = &b
}

// IsShow returns the value of the "is_show" field in the mutation.
func (m *AdminMenusMutation) IsShow() (r bool, exists bool) {
	v := m.is_show
	if v == nil {
		return
	}
	return *v, true
}

// OldIsShow returns the old "is_show" field's value of the AdminMenus entity.
// If the AdminMenus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenusMutation) OldIsShow(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsShow is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsShow requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsShow: %w", err)
	}
	return oldValue.IsShow, nil
}

// ClearIsShow clears the value of the "is_show" field.
func (m *AdminMenusMutation) ClearIsShow() {
	m.is_show = nil
	m.clearedFields[adminmenus.FieldIsShow] = struct{}{}
}

// IsShowCleared returns if the "is_show" field was cleared in this mutation.
func (m *AdminMenusMutation) IsShowCleared() bool {
	_, ok := m.clearedFields[adminmenus.FieldIsShow]
	return ok
}

// ResetIsShow resets all changes to the "is_show" field.
func (m *AdminMenusMutation) ResetIsShow() {
	m.is_show = nil
	delete(m.clearedFields, adminmenus.FieldIsShow)
}

// SetIsEnable sets the "is_enable" field.
func (m *AdminMenusMutation) SetIsEnable(b bool) {
	m.is_enable = &b
}

// IsEnable returns the value of the "is_enable" field in the mutation.
func (m *AdminMenusMutation) IsEnable() (r bool, exists bool) {
	v := m.is_enable
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnable returns the old "is_enable" field's value of the AdminMenus entity.
// If the AdminMenus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenusMutation) OldIsEnable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsEnable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsEnable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnable: %w", err)
	}
	return oldValue.IsEnable, nil
}

// ClearIsEnable clears the value of the "is_enable" field.
func (m *AdminMenusMutation) ClearIsEnable() {
	m.is_enable = nil
	m.clearedFields[adminmenus.FieldIsEnable] = struct{}{}
}

// IsEnableCleared returns if the "is_enable" field was cleared in this mutation.
func (m *AdminMenusMutation) IsEnableCleared() bool {
	_, ok := m.clearedFields[adminmenus.FieldIsEnable]
	return ok
}

// ResetIsEnable resets all changes to the "is_enable" field.
func (m *AdminMenusMutation) ResetIsEnable() {
	m.is_enable = nil
	delete(m.clearedFields, adminmenus.FieldIsEnable)
}

// AddRoleIDs adds the "role" edge to the AdminRole entity by ids.
func (m *AdminMenusMutation) AddRoleIDs(ids ...int) {
	if m.role == nil {
		m.role = make(map[int]struct{})
	}
	for i := range ids {
		m.role[ids[i]] = struct{}{}
	}
}

// ClearRole clears the "role" edge to the AdminRole entity.
func (m *AdminMenusMutation) ClearRole() {
	m.clearedrole = true
}

// RoleCleared reports if the "role" edge to the AdminRole entity was cleared.
func (m *AdminMenusMutation) RoleCleared() bool {
	return m.clearedrole
}

// RemoveRoleIDs removes the "role" edge to the AdminRole entity by IDs.
func (m *AdminMenusMutation) RemoveRoleIDs(ids ...int) {
	if m.removedrole == nil {
		m.removedrole = make(map[int]struct{})
	}
	for i := range ids {
		m.removedrole[ids[i]] = struct{}{}
	}
}

// RemovedRole returns the removed IDs of the "role" edge to the AdminRole entity.
func (m *AdminMenusMutation) RemovedRoleIDs() (ids []int) {
	for id := range m.removedrole {
		ids = append(ids, id)
	}
	return
}

// RoleIDs returns the "role" edge IDs in the mutation.
func (m *AdminMenusMutation) RoleIDs() (ids []int) {
	for id := range m.role {
		ids = append(ids, id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *AdminMenusMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
	m.removedrole = nil
}

// Op returns the operation name.
func (m *AdminMenusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AdminMenus).
func (m *AdminMenusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminMenusMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, adminmenus.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, adminmenus.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, adminmenus.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, adminmenus.FieldName)
	}
	if m._path != nil {
		fields = append(fields, adminmenus.FieldPath)
	}
	if m.path_action != nil {
		fields = append(fields, adminmenus.FieldPathAction)
	}
	if m.router_path != nil {
		fields = append(fields, adminmenus.FieldRouterPath)
	}
	if m.icon != nil {
		fields = append(fields, adminmenus.FieldIcon)
	}
	if m._type != nil {
		fields = append(fields, adminmenus.FieldType)
	}
	if m.power_str != nil {
		fields = append(fields, adminmenus.FieldPowerStr)
	}
	if m.sort != nil {
		fields = append(fields, adminmenus.FieldSort)
	}
	if m.fid != nil {
		fields = append(fields, adminmenus.FieldFid)
	}
	if m.is_external_link != nil {
		fields = append(fields, adminmenus.FieldIsExternalLink)
	}
	if m.is_show != nil {
		fields = append(fields, adminmenus.FieldIsShow)
	}
	if m.is_enable != nil {
		fields = append(fields, adminmenus.FieldIsEnable)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminMenusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adminmenus.FieldCreatedAt:
		return m.CreatedAt()
	case adminmenus.FieldUpdatedAt:
		return m.UpdatedAt()
	case adminmenus.FieldDeletedAt:
		return m.DeletedAt()
	case adminmenus.FieldName:
		return m.Name()
	case adminmenus.FieldPath:
		return m.Path()
	case adminmenus.FieldPathAction:
		return m.PathAction()
	case adminmenus.FieldRouterPath:
		return m.RouterPath()
	case adminmenus.FieldIcon:
		return m.Icon()
	case adminmenus.FieldType:
		return m.GetType()
	case adminmenus.FieldPowerStr:
		return m.PowerStr()
	case adminmenus.FieldSort:
		return m.Sort()
	case adminmenus.FieldFid:
		return m.Fid()
	case adminmenus.FieldIsExternalLink:
		return m.IsExternalLink()
	case adminmenus.FieldIsShow:
		return m.IsShow()
	case adminmenus.FieldIsEnable:
		return m.IsEnable()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminMenusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adminmenus.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case adminmenus.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case adminmenus.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case adminmenus.FieldName:
		return m.OldName(ctx)
	case adminmenus.FieldPath:
		return m.OldPath(ctx)
	case adminmenus.FieldPathAction:
		return m.OldPathAction(ctx)
	case adminmenus.FieldRouterPath:
		return m.OldRouterPath(ctx)
	case adminmenus.FieldIcon:
		return m.OldIcon(ctx)
	case adminmenus.FieldType:
		return m.OldType(ctx)
	case adminmenus.FieldPowerStr:
		return m.OldPowerStr(ctx)
	case adminmenus.FieldSort:
		return m.OldSort(ctx)
	case adminmenus.FieldFid:
		return m.OldFid(ctx)
	case adminmenus.FieldIsExternalLink:
		return m.OldIsExternalLink(ctx)
	case adminmenus.FieldIsShow:
		return m.OldIsShow(ctx)
	case adminmenus.FieldIsEnable:
		return m.OldIsEnable(ctx)
	}
	return nil, fmt.Errorf("unknown AdminMenus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminMenusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adminmenus.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case adminmenus.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case adminmenus.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case adminmenus.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case adminmenus.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case adminmenus.FieldPathAction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPathAction(v)
		return nil
	case adminmenus.FieldRouterPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRouterPath(v)
		return nil
	case adminmenus.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case adminmenus.FieldType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case adminmenus.FieldPowerStr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPowerStr(v)
		return nil
	case adminmenus.FieldSort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case adminmenus.FieldFid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFid(v)
		return nil
	case adminmenus.FieldIsExternalLink:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsExternalLink(v)
		return nil
	case adminmenus.FieldIsShow:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsShow(v)
		return nil
	case adminmenus.FieldIsEnable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnable(v)
		return nil
	}
	return fmt.Errorf("unknown AdminMenus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminMenusMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, adminmenus.FieldType)
	}
	if m.addsort != nil {
		fields = append(fields, adminmenus.FieldSort)
	}
	if m.addfid != nil {
		fields = append(fields, adminmenus.FieldFid)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminMenusMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case adminmenus.FieldType:
		return m.AddedType()
	case adminmenus.FieldSort:
		return m.AddedSort()
	case adminmenus.FieldFid:
		return m.AddedFid()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminMenusMutation) AddField(name string, value ent.Value) error {
	switch name {
	case adminmenus.FieldType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case adminmenus.FieldSort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	case adminmenus.FieldFid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFid(v)
		return nil
	}
	return fmt.Errorf("unknown AdminMenus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminMenusMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(adminmenus.FieldUpdatedAt) {
		fields = append(fields, adminmenus.FieldUpdatedAt)
	}
	if m.FieldCleared(adminmenus.FieldDeletedAt) {
		fields = append(fields, adminmenus.FieldDeletedAt)
	}
	if m.FieldCleared(adminmenus.FieldPath) {
		fields = append(fields, adminmenus.FieldPath)
	}
	if m.FieldCleared(adminmenus.FieldPathAction) {
		fields = append(fields, adminmenus.FieldPathAction)
	}
	if m.FieldCleared(adminmenus.FieldRouterPath) {
		fields = append(fields, adminmenus.FieldRouterPath)
	}
	if m.FieldCleared(adminmenus.FieldIcon) {
		fields = append(fields, adminmenus.FieldIcon)
	}
	if m.FieldCleared(adminmenus.FieldType) {
		fields = append(fields, adminmenus.FieldType)
	}
	if m.FieldCleared(adminmenus.FieldPowerStr) {
		fields = append(fields, adminmenus.FieldPowerStr)
	}
	if m.FieldCleared(adminmenus.FieldSort) {
		fields = append(fields, adminmenus.FieldSort)
	}
	if m.FieldCleared(adminmenus.FieldFid) {
		fields = append(fields, adminmenus.FieldFid)
	}
	if m.FieldCleared(adminmenus.FieldIsExternalLink) {
		fields = append(fields, adminmenus.FieldIsExternalLink)
	}
	if m.FieldCleared(adminmenus.FieldIsShow) {
		fields = append(fields, adminmenus.FieldIsShow)
	}
	if m.FieldCleared(adminmenus.FieldIsEnable) {
		fields = append(fields, adminmenus.FieldIsEnable)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminMenusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminMenusMutation) ClearField(name string) error {
	switch name {
	case adminmenus.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case adminmenus.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case adminmenus.FieldPath:
		m.ClearPath()
		return nil
	case adminmenus.FieldPathAction:
		m.ClearPathAction()
		return nil
	case adminmenus.FieldRouterPath:
		m.ClearRouterPath()
		return nil
	case adminmenus.FieldIcon:
		m.ClearIcon()
		return nil
	case adminmenus.FieldType:
		m.ClearType()
		return nil
	case adminmenus.FieldPowerStr:
		m.ClearPowerStr()
		return nil
	case adminmenus.FieldSort:
		m.ClearSort()
		return nil
	case adminmenus.FieldFid:
		m.ClearFid()
		return nil
	case adminmenus.FieldIsExternalLink:
		m.ClearIsExternalLink()
		return nil
	case adminmenus.FieldIsShow:
		m.ClearIsShow()
		return nil
	case adminmenus.FieldIsEnable:
		m.ClearIsEnable()
		return nil
	}
	return fmt.Errorf("unknown AdminMenus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminMenusMutation) ResetField(name string) error {
	switch name {
	case adminmenus.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case adminmenus.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case adminmenus.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case adminmenus.FieldName:
		m.ResetName()
		return nil
	case adminmenus.FieldPath:
		m.ResetPath()
		return nil
	case adminmenus.FieldPathAction:
		m.ResetPathAction()
		return nil
	case adminmenus.FieldRouterPath:
		m.ResetRouterPath()
		return nil
	case adminmenus.FieldIcon:
		m.ResetIcon()
		return nil
	case adminmenus.FieldType:
		m.ResetType()
		return nil
	case adminmenus.FieldPowerStr:
		m.ResetPowerStr()
		return nil
	case adminmenus.FieldSort:
		m.ResetSort()
		return nil
	case adminmenus.FieldFid:
		m.ResetFid()
		return nil
	case adminmenus.FieldIsExternalLink:
		m.ResetIsExternalLink()
		return nil
	case adminmenus.FieldIsShow:
		m.ResetIsShow()
		return nil
	case adminmenus.FieldIsEnable:
		m.ResetIsEnable()
		return nil
	}
	return fmt.Errorf("unknown AdminMenus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminMenusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.role != nil {
		edges = append(edges, adminmenus.EdgeRole)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminMenusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case adminmenus.EdgeRole:
		ids := make([]ent.Value, 0, len(m.role))
		for id := range m.role {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminMenusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrole != nil {
		edges = append(edges, adminmenus.EdgeRole)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminMenusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case adminmenus.EdgeRole:
		ids := make([]ent.Value, 0, len(m.removedrole))
		for id := range m.removedrole {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminMenusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrole {
		edges = append(edges, adminmenus.EdgeRole)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminMenusMutation) EdgeCleared(name string) bool {
	switch name {
	case adminmenus.EdgeRole:
		return m.clearedrole
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminMenusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown AdminMenus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminMenusMutation) ResetEdge(name string) error {
	switch name {
	case adminmenus.EdgeRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown AdminMenus edge %s", name)
}

// AdminRoleMutation represents an operation that mutates the AdminRole nodes in the graph.
type AdminRoleMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	name          *string
	is_enable     *bool
	clearedFields map[string]struct{}
	user          map[uuid.UUID]struct{}
	removeduser   map[uuid.UUID]struct{}
	cleareduser   bool
	menu          map[int]struct{}
	removedmenu   map[int]struct{}
	clearedmenu   bool
	done          bool
	oldValue      func(context.Context) (*AdminRole, error)
	predicates    []predicate.AdminRole
}

var _ ent.Mutation = (*AdminRoleMutation)(nil)

// adminroleOption allows management of the mutation configuration using functional options.
type adminroleOption func(*AdminRoleMutation)

// newAdminRoleMutation creates new mutation for the AdminRole entity.
func newAdminRoleMutation(c config, op Op, opts ...adminroleOption) *AdminRoleMutation {
	m := &AdminRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminRoleID sets the ID field of the mutation.
func withAdminRoleID(id int) adminroleOption {
	return func(m *AdminRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminRole
		)
		m.oldValue = func(ctx context.Context) (*AdminRole, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminRole sets the old AdminRole of the mutation.
func withAdminRole(node *AdminRole) adminroleOption {
	return func(m *AdminRoleMutation) {
		m.oldValue = func(context.Context) (*AdminRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *AdminRoleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminRoleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminRoleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AdminRole entity.
// If the AdminRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminRoleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminRoleMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AdminRoleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AdminRoleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AdminRole entity.
// If the AdminRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminRoleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AdminRoleMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[adminrole.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AdminRoleMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[adminrole.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AdminRoleMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, adminrole.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AdminRoleMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AdminRoleMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the AdminRole entity.
// If the AdminRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminRoleMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AdminRoleMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[adminrole.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AdminRoleMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[adminrole.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AdminRoleMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, adminrole.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *AdminRoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AdminRoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AdminRole entity.
// If the AdminRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminRoleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AdminRoleMutation) ResetName() {
	m.name = nil
}

// SetIsEnable sets the "is_enable" field.
func (m *AdminRoleMutation) SetIsEnable(b bool) {
	m.is_enable = &b
}

// IsEnable returns the value of the "is_enable" field in the mutation.
func (m *AdminRoleMutation) IsEnable() (r bool, exists bool) {
	v := m.is_enable
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnable returns the old "is_enable" field's value of the AdminRole entity.
// If the AdminRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminRoleMutation) OldIsEnable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsEnable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsEnable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnable: %w", err)
	}
	return oldValue.IsEnable, nil
}

// ClearIsEnable clears the value of the "is_enable" field.
func (m *AdminRoleMutation) ClearIsEnable() {
	m.is_enable = nil
	m.clearedFields[adminrole.FieldIsEnable] = struct{}{}
}

// IsEnableCleared returns if the "is_enable" field was cleared in this mutation.
func (m *AdminRoleMutation) IsEnableCleared() bool {
	_, ok := m.clearedFields[adminrole.FieldIsEnable]
	return ok
}

// ResetIsEnable resets all changes to the "is_enable" field.
func (m *AdminRoleMutation) ResetIsEnable() {
	m.is_enable = nil
	delete(m.clearedFields, adminrole.FieldIsEnable)
}

// AddUserIDs adds the "user" edge to the AdminUser entity by ids.
func (m *AdminRoleMutation) AddUserIDs(ids ...uuid.UUID) {
	if m.user == nil {
		m.user = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.user[ids[i]] = struct{}{}
	}
}

// ClearUser clears the "user" edge to the AdminUser entity.
func (m *AdminRoleMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the AdminUser entity was cleared.
func (m *AdminRoleMutation) UserCleared() bool {
	return m.cleareduser
}

// RemoveUserIDs removes the "user" edge to the AdminUser entity by IDs.
func (m *AdminRoleMutation) RemoveUserIDs(ids ...uuid.UUID) {
	if m.removeduser == nil {
		m.removeduser = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removeduser[ids[i]] = struct{}{}
	}
}

// RemovedUser returns the removed IDs of the "user" edge to the AdminUser entity.
func (m *AdminRoleMutation) RemovedUserIDs() (ids []uuid.UUID) {
	for id := range m.removeduser {
		ids = append(ids, id)
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
func (m *AdminRoleMutation) UserIDs() (ids []uuid.UUID) {
	for id := range m.user {
		ids = append(ids, id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *AdminRoleMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
	m.removeduser = nil
}

// AddMenuIDs adds the "menu" edge to the AdminMenus entity by ids.
func (m *AdminRoleMutation) AddMenuIDs(ids ...int) {
	if m.menu == nil {
		m.menu = make(map[int]struct{})
	}
	for i := range ids {
		m.menu[ids[i]] = struct{}{}
	}
}

// ClearMenu clears the "menu" edge to the AdminMenus entity.
func (m *AdminRoleMutation) ClearMenu() {
	m.clearedmenu = true
}

// MenuCleared reports if the "menu" edge to the AdminMenus entity was cleared.
func (m *AdminRoleMutation) MenuCleared() bool {
	return m.clearedmenu
}

// RemoveMenuIDs removes the "menu" edge to the AdminMenus entity by IDs.
func (m *AdminRoleMutation) RemoveMenuIDs(ids ...int) {
	if m.removedmenu == nil {
		m.removedmenu = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmenu[ids[i]] = struct{}{}
	}
}

// RemovedMenu returns the removed IDs of the "menu" edge to the AdminMenus entity.
func (m *AdminRoleMutation) RemovedMenuIDs() (ids []int) {
	for id := range m.removedmenu {
		ids = append(ids, id)
	}
	return
}

// MenuIDs returns the "menu" edge IDs in the mutation.
func (m *AdminRoleMutation) MenuIDs() (ids []int) {
	for id := range m.menu {
		ids = append(ids, id)
	}
	return
}

// ResetMenu resets all changes to the "menu" edge.
func (m *AdminRoleMutation) ResetMenu() {
	m.menu = nil
	m.clearedmenu = false
	m.removedmenu = nil
}

// Op returns the operation name.
func (m *AdminRoleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AdminRole).
func (m *AdminRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminRoleMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, adminrole.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, adminrole.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, adminrole.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, adminrole.FieldName)
	}
	if m.is_enable != nil {
		fields = append(fields, adminrole.FieldIsEnable)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adminrole.FieldCreatedAt:
		return m.CreatedAt()
	case adminrole.FieldUpdatedAt:
		return m.UpdatedAt()
	case adminrole.FieldDeletedAt:
		return m.DeletedAt()
	case adminrole.FieldName:
		return m.Name()
	case adminrole.FieldIsEnable:
		return m.IsEnable()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adminrole.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case adminrole.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case adminrole.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case adminrole.FieldName:
		return m.OldName(ctx)
	case adminrole.FieldIsEnable:
		return m.OldIsEnable(ctx)
	}
	return nil, fmt.Errorf("unknown AdminRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adminrole.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case adminrole.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case adminrole.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case adminrole.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case adminrole.FieldIsEnable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnable(v)
		return nil
	}
	return fmt.Errorf("unknown AdminRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminRoleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminRoleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AdminRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminRoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(adminrole.FieldUpdatedAt) {
		fields = append(fields, adminrole.FieldUpdatedAt)
	}
	if m.FieldCleared(adminrole.FieldDeletedAt) {
		fields = append(fields, adminrole.FieldDeletedAt)
	}
	if m.FieldCleared(adminrole.FieldIsEnable) {
		fields = append(fields, adminrole.FieldIsEnable)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminRoleMutation) ClearField(name string) error {
	switch name {
	case adminrole.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case adminrole.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case adminrole.FieldIsEnable:
		m.ClearIsEnable()
		return nil
	}
	return fmt.Errorf("unknown AdminRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminRoleMutation) ResetField(name string) error {
	switch name {
	case adminrole.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case adminrole.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case adminrole.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case adminrole.FieldName:
		m.ResetName()
		return nil
	case adminrole.FieldIsEnable:
		m.ResetIsEnable()
		return nil
	}
	return fmt.Errorf("unknown AdminRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, adminrole.EdgeUser)
	}
	if m.menu != nil {
		edges = append(edges, adminrole.EdgeMenu)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminRoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case adminrole.EdgeUser:
		ids := make([]ent.Value, 0, len(m.user))
		for id := range m.user {
			ids = append(ids, id)
		}
		return ids
	case adminrole.EdgeMenu:
		ids := make([]ent.Value, 0, len(m.menu))
		for id := range m.menu {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeduser != nil {
		edges = append(edges, adminrole.EdgeUser)
	}
	if m.removedmenu != nil {
		edges = append(edges, adminrole.EdgeMenu)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminRoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case adminrole.EdgeUser:
		ids := make([]ent.Value, 0, len(m.removeduser))
		for id := range m.removeduser {
			ids = append(ids, id)
		}
		return ids
	case adminrole.EdgeMenu:
		ids := make([]ent.Value, 0, len(m.removedmenu))
		for id := range m.removedmenu {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, adminrole.EdgeUser)
	}
	if m.clearedmenu {
		edges = append(edges, adminrole.EdgeMenu)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminRoleMutation) EdgeCleared(name string) bool {
	switch name {
	case adminrole.EdgeUser:
		return m.cleareduser
	case adminrole.EdgeMenu:
		return m.clearedmenu
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminRoleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown AdminRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminRoleMutation) ResetEdge(name string) error {
	switch name {
	case adminrole.EdgeUser:
		m.ResetUser()
		return nil
	case adminrole.EdgeMenu:
		m.ResetMenu()
		return nil
	}
	return fmt.Errorf("unknown AdminRole edge %s", name)
}

// AdminUserMutation represents an operation that mutates the AdminUser nodes in the graph.
type AdminUserMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	username      *string
	password      *string
	avatar        *string
	phone         *string
	is_enable     *bool
	clearedFields map[string]struct{}
	role          map[int]struct{}
	removedrole   map[int]struct{}
	clearedrole   bool
	done          bool
	oldValue      func(context.Context) (*AdminUser, error)
	predicates    []predicate.AdminUser
}

var _ ent.Mutation = (*AdminUserMutation)(nil)

// adminuserOption allows management of the mutation configuration using functional options.
type adminuserOption func(*AdminUserMutation)

// newAdminUserMutation creates new mutation for the AdminUser entity.
func newAdminUserMutation(c config, op Op, opts ...adminuserOption) *AdminUserMutation {
	m := &AdminUserMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminUserID sets the ID field of the mutation.
func withAdminUserID(id uuid.UUID) adminuserOption {
	return func(m *AdminUserMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminUser
		)
		m.oldValue = func(ctx context.Context) (*AdminUser, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminUser sets the old AdminUser of the mutation.
func withAdminUser(node *AdminUser) adminuserOption {
	return func(m *AdminUserMutation) {
		m.oldValue = func(context.Context) (*AdminUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AdminUser entities.
func (m *AdminUserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *AdminUserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminUserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AdminUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AdminUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AdminUserMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[adminuser.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AdminUserMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[adminuser.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AdminUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, adminuser.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AdminUserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AdminUserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AdminUserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[adminuser.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AdminUserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[adminuser.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AdminUserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, adminuser.FieldDeletedAt)
}

// SetUsername sets the "username" field.
func (m *AdminUserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *AdminUserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *AdminUserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *AdminUserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *AdminUserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *AdminUserMutation) ResetPassword() {
	m.password = nil
}

// SetAvatar sets the "avatar" field.
func (m *AdminUserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *AdminUserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *AdminUserMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[adminuser.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *AdminUserMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[adminuser.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *AdminUserMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, adminuser.FieldAvatar)
}

// SetPhone sets the "phone" field.
func (m *AdminUserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *AdminUserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *AdminUserMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[adminuser.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *AdminUserMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[adminuser.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *AdminUserMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, adminuser.FieldPhone)
}

// SetIsEnable sets the "is_enable" field.
func (m *AdminUserMutation) SetIsEnable(b bool) {
	m.is_enable = &b
}

// IsEnable returns the value of the "is_enable" field in the mutation.
func (m *AdminUserMutation) IsEnable() (r bool, exists bool) {
	v := m.is_enable
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnable returns the old "is_enable" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldIsEnable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsEnable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsEnable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnable: %w", err)
	}
	return oldValue.IsEnable, nil
}

// ClearIsEnable clears the value of the "is_enable" field.
func (m *AdminUserMutation) ClearIsEnable() {
	m.is_enable = nil
	m.clearedFields[adminuser.FieldIsEnable] = struct{}{}
}

// IsEnableCleared returns if the "is_enable" field was cleared in this mutation.
func (m *AdminUserMutation) IsEnableCleared() bool {
	_, ok := m.clearedFields[adminuser.FieldIsEnable]
	return ok
}

// ResetIsEnable resets all changes to the "is_enable" field.
func (m *AdminUserMutation) ResetIsEnable() {
	m.is_enable = nil
	delete(m.clearedFields, adminuser.FieldIsEnable)
}

// AddRoleIDs adds the "role" edge to the AdminRole entity by ids.
func (m *AdminUserMutation) AddRoleIDs(ids ...int) {
	if m.role == nil {
		m.role = make(map[int]struct{})
	}
	for i := range ids {
		m.role[ids[i]] = struct{}{}
	}
}

// ClearRole clears the "role" edge to the AdminRole entity.
func (m *AdminUserMutation) ClearRole() {
	m.clearedrole = true
}

// RoleCleared reports if the "role" edge to the AdminRole entity was cleared.
func (m *AdminUserMutation) RoleCleared() bool {
	return m.clearedrole
}

// RemoveRoleIDs removes the "role" edge to the AdminRole entity by IDs.
func (m *AdminUserMutation) RemoveRoleIDs(ids ...int) {
	if m.removedrole == nil {
		m.removedrole = make(map[int]struct{})
	}
	for i := range ids {
		m.removedrole[ids[i]] = struct{}{}
	}
}

// RemovedRole returns the removed IDs of the "role" edge to the AdminRole entity.
func (m *AdminUserMutation) RemovedRoleIDs() (ids []int) {
	for id := range m.removedrole {
		ids = append(ids, id)
	}
	return
}

// RoleIDs returns the "role" edge IDs in the mutation.
func (m *AdminUserMutation) RoleIDs() (ids []int) {
	for id := range m.role {
		ids = append(ids, id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *AdminUserMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
	m.removedrole = nil
}

// Op returns the operation name.
func (m *AdminUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AdminUser).
func (m *AdminUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminUserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, adminuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, adminuser.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, adminuser.FieldDeletedAt)
	}
	if m.username != nil {
		fields = append(fields, adminuser.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, adminuser.FieldPassword)
	}
	if m.avatar != nil {
		fields = append(fields, adminuser.FieldAvatar)
	}
	if m.phone != nil {
		fields = append(fields, adminuser.FieldPhone)
	}
	if m.is_enable != nil {
		fields = append(fields, adminuser.FieldIsEnable)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adminuser.FieldCreatedAt:
		return m.CreatedAt()
	case adminuser.FieldUpdatedAt:
		return m.UpdatedAt()
	case adminuser.FieldDeletedAt:
		return m.DeletedAt()
	case adminuser.FieldUsername:
		return m.Username()
	case adminuser.FieldPassword:
		return m.Password()
	case adminuser.FieldAvatar:
		return m.Avatar()
	case adminuser.FieldPhone:
		return m.Phone()
	case adminuser.FieldIsEnable:
		return m.IsEnable()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adminuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case adminuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case adminuser.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case adminuser.FieldUsername:
		return m.OldUsername(ctx)
	case adminuser.FieldPassword:
		return m.OldPassword(ctx)
	case adminuser.FieldAvatar:
		return m.OldAvatar(ctx)
	case adminuser.FieldPhone:
		return m.OldPhone(ctx)
	case adminuser.FieldIsEnable:
		return m.OldIsEnable(ctx)
	}
	return nil, fmt.Errorf("unknown AdminUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adminuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case adminuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case adminuser.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case adminuser.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case adminuser.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case adminuser.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case adminuser.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case adminuser.FieldIsEnable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnable(v)
		return nil
	}
	return fmt.Errorf("unknown AdminUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AdminUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(adminuser.FieldUpdatedAt) {
		fields = append(fields, adminuser.FieldUpdatedAt)
	}
	if m.FieldCleared(adminuser.FieldDeletedAt) {
		fields = append(fields, adminuser.FieldDeletedAt)
	}
	if m.FieldCleared(adminuser.FieldAvatar) {
		fields = append(fields, adminuser.FieldAvatar)
	}
	if m.FieldCleared(adminuser.FieldPhone) {
		fields = append(fields, adminuser.FieldPhone)
	}
	if m.FieldCleared(adminuser.FieldIsEnable) {
		fields = append(fields, adminuser.FieldIsEnable)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminUserMutation) ClearField(name string) error {
	switch name {
	case adminuser.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case adminuser.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case adminuser.FieldAvatar:
		m.ClearAvatar()
		return nil
	case adminuser.FieldPhone:
		m.ClearPhone()
		return nil
	case adminuser.FieldIsEnable:
		m.ClearIsEnable()
		return nil
	}
	return fmt.Errorf("unknown AdminUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminUserMutation) ResetField(name string) error {
	switch name {
	case adminuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case adminuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case adminuser.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case adminuser.FieldUsername:
		m.ResetUsername()
		return nil
	case adminuser.FieldPassword:
		m.ResetPassword()
		return nil
	case adminuser.FieldAvatar:
		m.ResetAvatar()
		return nil
	case adminuser.FieldPhone:
		m.ResetPhone()
		return nil
	case adminuser.FieldIsEnable:
		m.ResetIsEnable()
		return nil
	}
	return fmt.Errorf("unknown AdminUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.role != nil {
		edges = append(edges, adminuser.EdgeRole)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case adminuser.EdgeRole:
		ids := make([]ent.Value, 0, len(m.role))
		for id := range m.role {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrole != nil {
		edges = append(edges, adminuser.EdgeRole)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case adminuser.EdgeRole:
		ids := make([]ent.Value, 0, len(m.removedrole))
		for id := range m.removedrole {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrole {
		edges = append(edges, adminuser.EdgeRole)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminUserMutation) EdgeCleared(name string) bool {
	switch name {
	case adminuser.EdgeRole:
		return m.clearedrole
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminUserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown AdminUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminUserMutation) ResetEdge(name string) error {
	switch name {
	case adminuser.EdgeRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown AdminUser edge %s", name)
}
