// Code generated by entc, DO NOT EDIT.

package admindict

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/a20070322/go_fast_admin/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DictType applies equality check predicate on the "dict_type" field. It's identical to DictTypeEQ.
func DictType(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDictType), v))
	})
}

// DictName applies equality check predicate on the "dict_name" field. It's identical to DictNameEQ.
func DictName(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDictName), v))
	})
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// IsEnable applies equality check predicate on the "is_enable" field. It's identical to IsEnableEQ.
func IsEnable(v bool) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsEnable), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AdminDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AdminDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AdminDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AdminDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.AdminDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.AdminDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// DictTypeEQ applies the EQ predicate on the "dict_type" field.
func DictTypeEQ(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDictType), v))
	})
}

// DictTypeNEQ applies the NEQ predicate on the "dict_type" field.
func DictTypeNEQ(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDictType), v))
	})
}

// DictTypeIn applies the In predicate on the "dict_type" field.
func DictTypeIn(vs ...string) predicate.AdminDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDictType), v...))
	})
}

// DictTypeNotIn applies the NotIn predicate on the "dict_type" field.
func DictTypeNotIn(vs ...string) predicate.AdminDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDictType), v...))
	})
}

// DictTypeGT applies the GT predicate on the "dict_type" field.
func DictTypeGT(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDictType), v))
	})
}

// DictTypeGTE applies the GTE predicate on the "dict_type" field.
func DictTypeGTE(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDictType), v))
	})
}

// DictTypeLT applies the LT predicate on the "dict_type" field.
func DictTypeLT(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDictType), v))
	})
}

// DictTypeLTE applies the LTE predicate on the "dict_type" field.
func DictTypeLTE(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDictType), v))
	})
}

// DictTypeContains applies the Contains predicate on the "dict_type" field.
func DictTypeContains(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDictType), v))
	})
}

// DictTypeHasPrefix applies the HasPrefix predicate on the "dict_type" field.
func DictTypeHasPrefix(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDictType), v))
	})
}

// DictTypeHasSuffix applies the HasSuffix predicate on the "dict_type" field.
func DictTypeHasSuffix(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDictType), v))
	})
}

// DictTypeEqualFold applies the EqualFold predicate on the "dict_type" field.
func DictTypeEqualFold(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDictType), v))
	})
}

// DictTypeContainsFold applies the ContainsFold predicate on the "dict_type" field.
func DictTypeContainsFold(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDictType), v))
	})
}

// DictNameEQ applies the EQ predicate on the "dict_name" field.
func DictNameEQ(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDictName), v))
	})
}

// DictNameNEQ applies the NEQ predicate on the "dict_name" field.
func DictNameNEQ(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDictName), v))
	})
}

// DictNameIn applies the In predicate on the "dict_name" field.
func DictNameIn(vs ...string) predicate.AdminDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDictName), v...))
	})
}

// DictNameNotIn applies the NotIn predicate on the "dict_name" field.
func DictNameNotIn(vs ...string) predicate.AdminDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDictName), v...))
	})
}

// DictNameGT applies the GT predicate on the "dict_name" field.
func DictNameGT(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDictName), v))
	})
}

// DictNameGTE applies the GTE predicate on the "dict_name" field.
func DictNameGTE(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDictName), v))
	})
}

// DictNameLT applies the LT predicate on the "dict_name" field.
func DictNameLT(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDictName), v))
	})
}

// DictNameLTE applies the LTE predicate on the "dict_name" field.
func DictNameLTE(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDictName), v))
	})
}

// DictNameContains applies the Contains predicate on the "dict_name" field.
func DictNameContains(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDictName), v))
	})
}

// DictNameHasPrefix applies the HasPrefix predicate on the "dict_name" field.
func DictNameHasPrefix(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDictName), v))
	})
}

// DictNameHasSuffix applies the HasSuffix predicate on the "dict_name" field.
func DictNameHasSuffix(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDictName), v))
	})
}

// DictNameEqualFold applies the EqualFold predicate on the "dict_name" field.
func DictNameEqualFold(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDictName), v))
	})
}

// DictNameContainsFold applies the ContainsFold predicate on the "dict_name" field.
func DictNameContainsFold(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDictName), v))
	})
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemarks), v))
	})
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.AdminDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemarks), v...))
	})
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.AdminDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdminDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemarks), v...))
	})
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemarks), v))
	})
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemarks), v))
	})
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemarks), v))
	})
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemarks), v))
	})
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemarks), v))
	})
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemarks), v))
	})
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemarks), v))
	})
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemarks), v))
	})
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemarks), v))
	})
}

// IsEnableEQ applies the EQ predicate on the "is_enable" field.
func IsEnableEQ(v bool) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsEnable), v))
	})
}

// IsEnableNEQ applies the NEQ predicate on the "is_enable" field.
func IsEnableNEQ(v bool) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsEnable), v))
	})
}

// HasKey applies the HasEdge predicate on the "key" edge.
func HasKey() predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(KeyTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, KeyTable, KeyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKeyWith applies the HasEdge predicate on the "key" edge with a given conditions (other predicates).
func HasKeyWith(preds ...predicate.AdminDictKey) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(KeyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, KeyTable, KeyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AdminDict) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AdminDict) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AdminDict) predicate.AdminDict {
	return predicate.AdminDict(func(s *sql.Selector) {
		p(s.Not())
	})
}
