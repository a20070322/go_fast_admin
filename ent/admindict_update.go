// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a20070322/go_fast_admin/ent/admindict"
	"github.com/a20070322/go_fast_admin/ent/admindictkey"
	"github.com/a20070322/go_fast_admin/ent/predicate"
)

// AdminDictUpdate is the builder for updating AdminDict entities.
type AdminDictUpdate struct {
	config
	hooks    []Hook
	mutation *AdminDictMutation
}

// Where adds a new predicate for the AdminDictUpdate builder.
func (adu *AdminDictUpdate) Where(ps ...predicate.AdminDict) *AdminDictUpdate {
	adu.mutation.predicates = append(adu.mutation.predicates, ps...)
	return adu
}

// SetUpdatedAt sets the "updated_at" field.
func (adu *AdminDictUpdate) SetUpdatedAt(t time.Time) *AdminDictUpdate {
	adu.mutation.SetUpdatedAt(t)
	return adu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (adu *AdminDictUpdate) ClearUpdatedAt() *AdminDictUpdate {
	adu.mutation.ClearUpdatedAt()
	return adu
}

// SetDeletedAt sets the "deleted_at" field.
func (adu *AdminDictUpdate) SetDeletedAt(t time.Time) *AdminDictUpdate {
	adu.mutation.SetDeletedAt(t)
	return adu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (adu *AdminDictUpdate) SetNillableDeletedAt(t *time.Time) *AdminDictUpdate {
	if t != nil {
		adu.SetDeletedAt(*t)
	}
	return adu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (adu *AdminDictUpdate) ClearDeletedAt() *AdminDictUpdate {
	adu.mutation.ClearDeletedAt()
	return adu
}

// SetDictType sets the "dict_type" field.
func (adu *AdminDictUpdate) SetDictType(s string) *AdminDictUpdate {
	adu.mutation.SetDictType(s)
	return adu
}

// SetDictName sets the "dict_name" field.
func (adu *AdminDictUpdate) SetDictName(s string) *AdminDictUpdate {
	adu.mutation.SetDictName(s)
	return adu
}

// SetRemarks sets the "remarks" field.
func (adu *AdminDictUpdate) SetRemarks(s string) *AdminDictUpdate {
	adu.mutation.SetRemarks(s)
	return adu
}

// SetIsEnable sets the "is_enable" field.
func (adu *AdminDictUpdate) SetIsEnable(b bool) *AdminDictUpdate {
	adu.mutation.SetIsEnable(b)
	return adu
}

// AddKeyIDs adds the "key" edge to the AdminDictKey entity by IDs.
func (adu *AdminDictUpdate) AddKeyIDs(ids ...int) *AdminDictUpdate {
	adu.mutation.AddKeyIDs(ids...)
	return adu
}

// AddKey adds the "key" edges to the AdminDictKey entity.
func (adu *AdminDictUpdate) AddKey(a ...*AdminDictKey) *AdminDictUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return adu.AddKeyIDs(ids...)
}

// Mutation returns the AdminDictMutation object of the builder.
func (adu *AdminDictUpdate) Mutation() *AdminDictMutation {
	return adu.mutation
}

// ClearKey clears all "key" edges to the AdminDictKey entity.
func (adu *AdminDictUpdate) ClearKey() *AdminDictUpdate {
	adu.mutation.ClearKey()
	return adu
}

// RemoveKeyIDs removes the "key" edge to AdminDictKey entities by IDs.
func (adu *AdminDictUpdate) RemoveKeyIDs(ids ...int) *AdminDictUpdate {
	adu.mutation.RemoveKeyIDs(ids...)
	return adu
}

// RemoveKey removes "key" edges to AdminDictKey entities.
func (adu *AdminDictUpdate) RemoveKey(a ...*AdminDictKey) *AdminDictUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return adu.RemoveKeyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (adu *AdminDictUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	adu.defaults()
	if len(adu.hooks) == 0 {
		affected, err = adu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminDictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			adu.mutation = mutation
			affected, err = adu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(adu.hooks) - 1; i >= 0; i-- {
			mut = adu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, adu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (adu *AdminDictUpdate) SaveX(ctx context.Context) int {
	affected, err := adu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (adu *AdminDictUpdate) Exec(ctx context.Context) error {
	_, err := adu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adu *AdminDictUpdate) ExecX(ctx context.Context) {
	if err := adu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (adu *AdminDictUpdate) defaults() {
	if _, ok := adu.mutation.UpdatedAt(); !ok && !adu.mutation.UpdatedAtCleared() {
		v := admindict.UpdateDefaultUpdatedAt()
		adu.mutation.SetUpdatedAt(v)
	}
}

func (adu *AdminDictUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   admindict.Table,
			Columns: admindict.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admindict.FieldID,
			},
		},
	}
	if ps := adu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admindict.FieldUpdatedAt,
		})
	}
	if adu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: admindict.FieldUpdatedAt,
		})
	}
	if value, ok := adu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admindict.FieldDeletedAt,
		})
	}
	if adu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: admindict.FieldDeletedAt,
		})
	}
	if value, ok := adu.mutation.DictType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admindict.FieldDictType,
		})
	}
	if value, ok := adu.mutation.DictName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admindict.FieldDictName,
		})
	}
	if value, ok := adu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admindict.FieldRemarks,
		})
	}
	if value, ok := adu.mutation.IsEnable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: admindict.FieldIsEnable,
		})
	}
	if adu.mutation.KeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admindict.KeyTable,
			Columns: []string{admindict.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admindictkey.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adu.mutation.RemovedKeyIDs(); len(nodes) > 0 && !adu.mutation.KeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admindict.KeyTable,
			Columns: []string{admindict.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admindictkey.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adu.mutation.KeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admindict.KeyTable,
			Columns: []string{admindict.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admindictkey.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, adu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admindict.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AdminDictUpdateOne is the builder for updating a single AdminDict entity.
type AdminDictUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminDictMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (aduo *AdminDictUpdateOne) SetUpdatedAt(t time.Time) *AdminDictUpdateOne {
	aduo.mutation.SetUpdatedAt(t)
	return aduo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aduo *AdminDictUpdateOne) ClearUpdatedAt() *AdminDictUpdateOne {
	aduo.mutation.ClearUpdatedAt()
	return aduo
}

// SetDeletedAt sets the "deleted_at" field.
func (aduo *AdminDictUpdateOne) SetDeletedAt(t time.Time) *AdminDictUpdateOne {
	aduo.mutation.SetDeletedAt(t)
	return aduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aduo *AdminDictUpdateOne) SetNillableDeletedAt(t *time.Time) *AdminDictUpdateOne {
	if t != nil {
		aduo.SetDeletedAt(*t)
	}
	return aduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aduo *AdminDictUpdateOne) ClearDeletedAt() *AdminDictUpdateOne {
	aduo.mutation.ClearDeletedAt()
	return aduo
}

// SetDictType sets the "dict_type" field.
func (aduo *AdminDictUpdateOne) SetDictType(s string) *AdminDictUpdateOne {
	aduo.mutation.SetDictType(s)
	return aduo
}

// SetDictName sets the "dict_name" field.
func (aduo *AdminDictUpdateOne) SetDictName(s string) *AdminDictUpdateOne {
	aduo.mutation.SetDictName(s)
	return aduo
}

// SetRemarks sets the "remarks" field.
func (aduo *AdminDictUpdateOne) SetRemarks(s string) *AdminDictUpdateOne {
	aduo.mutation.SetRemarks(s)
	return aduo
}

// SetIsEnable sets the "is_enable" field.
func (aduo *AdminDictUpdateOne) SetIsEnable(b bool) *AdminDictUpdateOne {
	aduo.mutation.SetIsEnable(b)
	return aduo
}

// AddKeyIDs adds the "key" edge to the AdminDictKey entity by IDs.
func (aduo *AdminDictUpdateOne) AddKeyIDs(ids ...int) *AdminDictUpdateOne {
	aduo.mutation.AddKeyIDs(ids...)
	return aduo
}

// AddKey adds the "key" edges to the AdminDictKey entity.
func (aduo *AdminDictUpdateOne) AddKey(a ...*AdminDictKey) *AdminDictUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aduo.AddKeyIDs(ids...)
}

// Mutation returns the AdminDictMutation object of the builder.
func (aduo *AdminDictUpdateOne) Mutation() *AdminDictMutation {
	return aduo.mutation
}

// ClearKey clears all "key" edges to the AdminDictKey entity.
func (aduo *AdminDictUpdateOne) ClearKey() *AdminDictUpdateOne {
	aduo.mutation.ClearKey()
	return aduo
}

// RemoveKeyIDs removes the "key" edge to AdminDictKey entities by IDs.
func (aduo *AdminDictUpdateOne) RemoveKeyIDs(ids ...int) *AdminDictUpdateOne {
	aduo.mutation.RemoveKeyIDs(ids...)
	return aduo
}

// RemoveKey removes "key" edges to AdminDictKey entities.
func (aduo *AdminDictUpdateOne) RemoveKey(a ...*AdminDictKey) *AdminDictUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aduo.RemoveKeyIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aduo *AdminDictUpdateOne) Select(field string, fields ...string) *AdminDictUpdateOne {
	aduo.fields = append([]string{field}, fields...)
	return aduo
}

// Save executes the query and returns the updated AdminDict entity.
func (aduo *AdminDictUpdateOne) Save(ctx context.Context) (*AdminDict, error) {
	var (
		err  error
		node *AdminDict
	)
	aduo.defaults()
	if len(aduo.hooks) == 0 {
		node, err = aduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminDictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aduo.mutation = mutation
			node, err = aduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aduo.hooks) - 1; i >= 0; i-- {
			mut = aduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aduo *AdminDictUpdateOne) SaveX(ctx context.Context) *AdminDict {
	node, err := aduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aduo *AdminDictUpdateOne) Exec(ctx context.Context) error {
	_, err := aduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aduo *AdminDictUpdateOne) ExecX(ctx context.Context) {
	if err := aduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aduo *AdminDictUpdateOne) defaults() {
	if _, ok := aduo.mutation.UpdatedAt(); !ok && !aduo.mutation.UpdatedAtCleared() {
		v := admindict.UpdateDefaultUpdatedAt()
		aduo.mutation.SetUpdatedAt(v)
	}
}

func (aduo *AdminDictUpdateOne) sqlSave(ctx context.Context) (_node *AdminDict, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   admindict.Table,
			Columns: admindict.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admindict.FieldID,
			},
		},
	}
	id, ok := aduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AdminDict.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, admindict.FieldID)
		for _, f := range fields {
			if !admindict.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != admindict.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admindict.FieldUpdatedAt,
		})
	}
	if aduo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: admindict.FieldUpdatedAt,
		})
	}
	if value, ok := aduo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admindict.FieldDeletedAt,
		})
	}
	if aduo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: admindict.FieldDeletedAt,
		})
	}
	if value, ok := aduo.mutation.DictType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admindict.FieldDictType,
		})
	}
	if value, ok := aduo.mutation.DictName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admindict.FieldDictName,
		})
	}
	if value, ok := aduo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admindict.FieldRemarks,
		})
	}
	if value, ok := aduo.mutation.IsEnable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: admindict.FieldIsEnable,
		})
	}
	if aduo.mutation.KeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admindict.KeyTable,
			Columns: []string{admindict.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admindictkey.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aduo.mutation.RemovedKeyIDs(); len(nodes) > 0 && !aduo.mutation.KeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admindict.KeyTable,
			Columns: []string{admindict.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admindictkey.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aduo.mutation.KeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admindict.KeyTable,
			Columns: []string{admindict.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admindictkey.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AdminDict{config: aduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admindict.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
