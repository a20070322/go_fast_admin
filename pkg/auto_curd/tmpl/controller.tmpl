package {{GetControllerModule .ProjectConfig.ControllerPath}}
{{ $camel2Case :=  Camel2Case .Table.Name}}
import (
	"{{.ProjectConfig.ModulePath}}/app/service/{{$camel2Case}}_service"
	"{{.ProjectConfig.ModulePath}}/utils/response"
	"github.com/gin-gonic/gin"
	"net/http"
    {{- if IdIsUUIDFn .Table.Fields}}

    {{- else }}
       "strconv"
    {{end -}}
)

type {{.Table.Name}} struct {

}

func (c {{.Table.Name}}) List(ctx *gin.Context) {
	var form {{$camel2Case}}_service.FormList
	if err := ctx.ShouldBind(&form); err != nil {
		response.Fail(ctx, http.StatusUnprocessableEntity, err.Error(), nil)
		return
	}
	rep, err := {{$camel2Case}}_service.Init(ctx).List(&form)
	if err != nil {
		response.Fail(ctx, http.StatusBadRequest, err.Error(), nil)
		return
	}
	response.Success(ctx, "ok", rep)
}

func (c {{.Table.Name}}) Create(ctx *gin.Context) {
	var form {{$camel2Case}}_service.FormCreate
	if err := ctx.ShouldBind(&form); err != nil {
		response.Fail(ctx, http.StatusUnprocessableEntity, err.Error(), nil)
		return
	}
	rep, err := {{$camel2Case}}_service.Init(ctx).Create(&form)
	if err != nil {
		response.Fail(ctx, http.StatusBadRequest, err.Error(), nil)
		return
	}
	response.Success(ctx, "ok", rep)
}

func (c {{.Table.Name}}) Update(ctx *gin.Context) {
    {{- if IdIsUUIDFn .Table.Fields}}
        id := ctx.Param("id")
        if id == "" {
            response.Fail(ctx, http.StatusUnprocessableEntity, "参数错误", nil)
            return
        }
    {{else}}
        id, err := strconv.Atoi(ctx.Param("id"))
        if err != nil {
            response.Fail(ctx, http.StatusUnprocessableEntity, "参数错误", nil)
            return
        }
    {{end -}}

	var form {{$camel2Case}}_service.FormUpdate
	if err := ctx.ShouldBind(&form); err != nil {
		response.Fail(ctx, http.StatusUnprocessableEntity, err.Error(), nil)
		return
	}
	rep, err := {{$camel2Case}}_service.Init(ctx).Update(id, &form)
	if err != nil {
		response.Fail(ctx, http.StatusBadRequest, err.Error(), nil)
		return
	}
	response.Success(ctx, "ok", rep)
}

func (c {{.Table.Name}}) Delete (ctx *gin.Context) {
    var err error
    {{- if IdIsUUIDFn .Table.Fields}}
        id := ctx.Param("id")
        if id == "" {
            response.Fail(ctx, http.StatusUnprocessableEntity, "参数错误", nil)
            return
        }
    {{else}}
        id, err := strconv.Atoi(ctx.Param("id"))
        if err != nil {
            response.Fail(ctx, http.StatusUnprocessableEntity, "参数错误", nil)
            return
        }
    {{end -}}
	err = {{$camel2Case}}_service.Init(ctx).Delete(id)
	if err != nil {
		response.Fail(ctx, http.StatusBadRequest, err.Error(), nil)
		return
	}
	response.Success(ctx, "ok", "")
}
